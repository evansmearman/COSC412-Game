(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (Buffer){
/**
 * Converts a given buffer of bytes to a stream of bits and provides methods for reading individual bits (non-aligned reads)
 **/
var Long = require('long');
//accepts a native buffer object
var BitStream = function(buf) {
    this.offset = 0;
    this.limit = buf.length * 8;
    this.bytes = buf;
};
/**
 * Reads the specified number of bits (possibly non-aligned) and returns as 32bit int
 **/
BitStream.prototype.readBits = function(n) {
    if (n > (this.limit - this.offset)) {
        throw "not enough bits left in stream to read!";
    }
    var bitOffset = this.offset % 8;
    var bitsToRead = bitOffset + n;
    var bytesToRead = ~~(bitsToRead / 8);
    //if reading a multiple of 8 bits, read an additional byte
    if (bitsToRead % 8) {
        bytesToRead += 1;
    }
    var value = null;
    if (!bitOffset && n === 8) {
        //if we are byte-aligned and only want one byte, we can read quickly without shifting operations
        value = this.bytes.readUInt8(this.offset / 8);
    }
    //32 bit shifting
    else if (bitsToRead <= 31) {
        value = 0;
        //console.error(bits, this.offset, bitOffset, bitsToRead,bytesToRead);
        for (var i = 0; i < bytesToRead; i++) {
            //extract the byte from the backing buffer
            var m = this.bytes[~~(this.offset / 8) + i];
            //move these 8 bits to the correct location
            //looks like most significant 8 bits come last, so this flips endianness
            value += (m << (i * 8));
        }
        //drop the extra bits, since we started from the beginning of the byte regardless of offset
        value >>= bitOffset;
        //shift a single 1 over, subtract 1 to form a bit mask that removes the first bit
        value &= ((1 << n) - 1);
    }
    else {
        //trying to read 32+ bits with native JS probably won't work because we must then read five bytes from the backing buffer
        //this means in practice we may have difficulty with n >= 25 bits (since offset can be up to 7)
        //can't fit that into a 32 bit int unless we use JS Long, which is slow
        console.error(bitsToRead);
        //64 bit shifting, we only need this if our operations cant fit into 32 bits
        value = new Long();
        //console.error(bits, this.offset, bitOffset, bitsToRead,bytesToRead);
        for (var i = 0; i < bytesToRead; i++) {
            //extract the byte from the backing buffer
            var m64 = this.bytes[~~(this.offset / 8) + i];
            //console.error(m, this.bytes);
            //copy m into a 64bit holder so we can shift bits around more
            m64 = new Long.fromNumber(m64);
            //shift to get the bits we want
            value = value.add(m64.shiftLeft(i * 8));
        }
        value = value.shiftRight(bitOffset);
        //shift a single 1 over, subtract 1 to form a bit mask 
        value = value.and((1 << n) - 1);
        value = value.toInt();
    }
    this.offset += n;
    return value;
};
/**
 * Reads the specified number of bits into a Buffer and returns
 **/
BitStream.prototype.readBuffer = function(bits) {
    var bytes = Math.ceil(bits / 8);
    var result = new Buffer(bytes);
    var offset = 0;
    result.length = bytes;
    while (bits > 0) {
        //read up to 8 bits at a time (we may read less at the end if not aligned)
        var bitsToRead = Math.min(bits, 8);
        result.writeUInt8(this.readBits(bitsToRead), offset);
        offset += 1;
        bits -= bitsToRead;
    }
    return result;
};
BitStream.prototype.readBoolean = function() {
    return this.readBits(1);
};
/**
 * Reads until we reach a null terminator character and returns the result as a string
 **/
BitStream.prototype.readNullTerminatedString = function() {
    var str = "";
    while (true) {
        var byteInt = this.readBits(8);
        if (!byteInt) {
            break;
        }
        var byteBuf = new Buffer(1);
        byteBuf.writeUInt8(byteInt);
        str += byteBuf.toString();
    }
    //console.log(str);
    return str;
};
BitStream.prototype.readVarUInt = function() {
    var max = 32;
    var m = ((max + 6) / 7) * 7;
    var value = 0;
    var shift = 0;
    while (true) {
        var byte = this.readBits(8);
        value |= (byte & 0x7F) << shift;
        shift += 7;
        if ((byte & 0x80) === 0 || shift == m) {
            return value;
        }
    }
};
BitStream.prototype.readUBitVar = function() {
    // Thanks to Robin Dietrich for providing a clean version of this code :-)
    // The header looks like this: [XY00001111222233333333333333333333] where everything > 0 is optional.
    // The first 2 bits (X and Y) tell us how much (if any) to read other than the 6 initial bits:
    // Y set -> read 4
    // X set -> read 8
    // X + Y set -> read 28
    var v = this.readBits(6);
    //bitwise & 0x30 (0b110000) (determines whether the first two bits are set)
    switch (v & 0x30) {
        case 0x10:
            v = (v & 15) | (this.readBits(4) << 4);
            break;
        case 0x20:
            v = (v & 15) | (this.readBits(8) << 4);
            break;
        case 0x30:
            v = (v & 15) | (this.readBits(28) << 4);
            break;
    }
    return v;
};
module.exports = BitStream;
}).call(this,require("buffer").Buffer)
},{"buffer":28,"long":33}],2:[function(require,module,exports){
(function (global,Buffer){
/**
 * Class creating a Source 2 Dota 2 replay parser
 **/
var ProtoBuf = require('protobufjs');
var snappy = require('./snappy');
var BitStream = require('./BitStream');
var EventEmitter = require('events').EventEmitter;
var async = require('async');
var stream = require('stream');
var types = require('./build/types.json');
var protos = require('./build/protos.json');
var packetTypes = types.packets;
var demTypes = types.dems;
//read the protobufs and build a dota object for reference
var builder = ProtoBuf.newBuilder();
ProtoBuf.loadJson(protos, builder);
var dota = builder.build();
//CDemoSignonPacket is a special case and should be decoded with CDemoPacket since it doesn't have its own protobuf
//it appears that things like the gameeventlist and createstringtables calls are here?
dota["CDemoSignonPacket"] = dota["CDemoPacket"];
//console.error(Object.keys(dota));
var Parser = function(input) {
    //if a JS ArrayBuffer, convert to native node buffer
    if (input.byteLength) {
        var buffer = new Buffer(input.byteLength);
        var view = new Uint8Array(input);
        for (var i = 0; i < buffer.length; i++) {
            buffer[i] = view[i];
        }
        input = buffer;
    }
    //wrap a passed buffer in a stream
    if (Buffer.isBuffer(input)) {
        var bufferStream = new stream.PassThrough();
        bufferStream.end(input);
        input = bufferStream;
    }
    var stop = false;
    var p = new EventEmitter();
    //expose the gameeventdescriptor, stringtables, types, entities to the user and have the parser update them as it parses
    p.types = types;
    p.game_event_descriptors = {};
    p.string_tables = {
        tables: [],
        byName: {}
    };
    p.entities = {};
    p.start = function start(cb) {
        input.on('end', function() {
            stop = true;
            input.removeAllListeners();
            return cb();
        });
        async.series({
            "header": function(cb) {
                readString(8, function(err, header) {
                    //verify the file magic number is correct
                    cb(err || header.toString() !== "PBDEMS2\0", header);
                });
            },
            //two uint32s related to replay size
            "size1": readUint32,
            "size2": readUint32,
            "demo": function(cb) {
                //keep parsing demo messages until it hits a stop condition
                async.until(function() {
                    return stop;
                }, readDemoMessage, cb);
            }
        }, cb);
    };
    /**
     * Internal listeners to automatically process certain packets.
     * We abstract this away from the user so they don't need to worry about it.
     * For optimal speed we could allow the user to disable the ones they don't need
     **/
    p.on("CDemoStop", function(data) {
        //don't stop on CDemoStop since some replays have CDemoGameInfo after it
        //stop = true;
    });
    //p.on("CDemoStringTables", readCDemoStringTables);
    p.on("CDemoSignonPacket", readCDemoPacket);
    p.on("CDemoPacket", readCDemoPacket);
    p.on("CDemoFullPacket", function(data) {
        //console.error(data);
        //readCDemoStringTables(data.string_table);
        readCDemoPacket(data.packet);
    });
    //string tables may mutate over the lifetime of the replay.
    //Therefore we listen for create/update events and modify the table as needed.
    p.on("CSVCMsg_CreateStringTable", createStringTable);
    p.on("CSVCMsg_UpdateStringTable", updateStringTable);
    //this packet sets up our game event descriptors
    p.on("CMsgSource1LegacyGameEventList", function(data) {
        //console.error(data);
        var gameEventDescriptors = p.game_event_descriptors;
        for (var i = 0; i < data.descriptors.length; i++) {
            gameEventDescriptors[data.descriptors[i].eventid] = data.descriptors[i];
        }
    });
    //TODO entities. huffman trees, property decoding?!  requires parsing CDemoClassInfo, and instancebaseline string table?
    return p;
    /**
     * Reads the next DEM message from the replay (outer message)
     **/
    function readDemoMessage(cb) {
        async.series({
            command: readVarint32,
            tick: readVarint32,
            size: readVarint32
        }, function(err, result) {
            if (err) {
                return cb(err);
            }
            readBytes(result.size, function(err, buf) {
                // Read a command header, which includes both the message type
                // well as a flag to determine whether or not whether or not the
                // message is compressed with snappy.
                var command = result.command;
                var tick = result.tick;
                var size = result.size;
                // Extract the type and compressed flag out of the command
                //msgType: = int32(command & ^ dota.EDemoCommands_DEM_IsCompressed)
                //msgCompressed: = (command & dota.EDemoCommands_DEM_IsCompressed) == dota.EDemoCommands_DEM_IsCompressed
                var demType = command & ~dota.EDemoCommands.DEM_IsCompressed;
                var isCompressed = (command & dota.EDemoCommands.DEM_IsCompressed) === dota.EDemoCommands.DEM_IsCompressed;
                // Read the tick that the message corresponds with.
                //tick: = p.reader.readVarUint32()
                // This appears to actually be an int32, where a -1 means pre-game.
                /*
                if tick == 4294967295 {
                        tick = 0
                }
                */
                if (tick === 4294967295) {
                    tick = 0;
                }
                if (isCompressed) {
                    buf = snappy.uncompressSync(buf);
                }
                var dem = {
                    tick: tick,
                    type: demType,
                    size: size,
                    data: buf
                };
                //console.error(dem);
                if (demType in demTypes) {
                    //lookup the name of the protobuf message to decode with
                    var name = demTypes[demType];
                    if (dota[name]) {
                        if (listening(name)) {
                            dem.data = dota[name].decode(dem.data);
                            dem.data.proto_name = name;
                            p.emit("*", dem.data);
                            p.emit(name, dem.data);
                        }
                    }
                    else {
                        console.error("no proto definition for dem type %s", demType);
                    }
                }
                else {
                    console.error("no proto name for dem type %s", demType);
                }
                return cb(err);
            });
        });
    }
    // Internal parser for callback OnCDemoPacket, responsible for extracting
    // multiple inner packets from a single CDemoPacket. This is the main structure
    // that contains all other data types in the demo file.
    function readCDemoPacket(msg) {
        /*
        message CDemoPacket {
        	optional int32 sequence_in = 1;
        	optional int32 sequence_out_ack = 2;
        	optional bytes data = 3;
        }
        */
        var priorities = {
            "CNETMsg_Tick": -10,
            "CSVCMsg_CreateStringTable": -10,
            "CSVCMsg_UpdateStringTable": -10,
            "CNETMsg_SpawnGroup_Load": -10,
            "CSVCMsg_PacketEntities": 5,
            "CMsgSource1LegacyGameEvent": 10
        };
        //the inner data of a CDemoPacket is raw bits (no longer byte aligned!)
        var packets = [];
        //extract the native buffer from the ByteBuffer decoded by protobufjs
        //rewrap it in a new Buffer to force usage of node buffer shim rather than ArrayBuffer when in browser
        var buf = new Buffer(msg.data.toBuffer());
        //convert the buffer object into a bitstream so we can read bits from it
        var bs = new BitStream(buf);
        //read until less than 8 bits left
        while (bs.limit - bs.offset >= 8) {
            var t = bs.readUBitVar();
            var s = bs.readVarUInt();
            var d = bs.readBuffer(s * 8);
            var pack = {
                type: t,
                size: s,
                data: d,
                position: packets.length
            };
            packets.push(pack);
        }
        //sort the inner packets by priority in order to ensure we parse dependent packets last
        packets.sort(function(a, b) {
            //we must use a stable sort here in order to preserve order of packets when possible (for example, string tables)
            var p1 = priorities[packetTypes[a.type]] || 0;
            var p2 = priorities[packetTypes[b.type]] || 0;
            if (p1 === p2) {
                return a.position - b.position;
            }
            return p1 - p2;
        });
        for (var i = 0; i < packets.length; i++) {
            var packet = packets[i];
            var packType = packet.type;
            if (packType in packetTypes) {
                //lookup the name of the proto message for this packet type
                var name = packetTypes[packType];
                if (dota[name]) {
                    if (listening(name)) {
                        packet.data = dota[name].decode(packet.data);
                        packet.data.proto_name = name;
                        p.emit("*", packet.data);
                        p.emit(name, packet.data);
                    }
                }
                else {
                    console.error("no proto definition for packet name %s", name);
                }
            }
            else {
                console.error("no proto name for packet type %s", packType);
            }
        }
    }

    function createStringTable(data) {
        //create a stringtable
        //console.error(data);
        //extract the native buffer from the string_data ByteBuffer, with the offset removed
        var buf = new Buffer(data.string_data.toBuffer());
        if (data.data_compressed) {
            //decompress the string data with snappy
            //early source 2 replays may use LZSS, we can detect this by reading the first four bytes of buffer
            buf = snappy.uncompressSync(buf);
        }
        //pass the buffer and parse string table data from it
        var items = parseStringTableData(buf, data.num_entries, data.user_data_fixed_size, data.user_data_size);
        //console.error(items);
        //remove the buf and replace with items, which is a decoded version of it
        data.string_data = {};
        // Insert the items into the table as an object
        items.forEach(function(it) {
            data.string_data[it.index] = it;
        });
        /*
        // Apply the updates to baseline state
	    if t.name == "instancebaseline" {
	    	p.updateInstanceBaseline()
	    }
        */
        p.string_tables.byName[data.name] = data;
        p.string_tables.tables.push(data);
    }

    function updateStringTable(data) {
        //update a string table
        //retrieve table by id
        var table = p.string_tables.tables[data.table_id];
        //extract native buffer
        var buf = new Buffer(data.string_data.toBuffer());
        if (table) {
            var items = parseStringTableData(buf, data.num_changed_entries, table.user_data_fixed_size, table.user_data_size);
            var string_data = table.string_data;
            items.forEach(function(it) {
                //console.error(it);
                if (!string_data[it.index]) {
                    //we don't have this item in the string table yet, add it
                    string_data[it.index] = it;
                }
                else {
                    //we're updating an existing item
                    //only update key if the new key is not blank
                    if (it.key) {
                        //console.error("updating key %s->%s at index %s on %s, id %s", string_data[it.index].key, it.key, it.index, table.name, data.table_id);
                        string_data[it.index].key = it.key;
                        //string_data[it.index].key = [].concat(string_data[it.index].key).concat(it.key);
                    }
                    //only update value if the new item has a nonempty value buffer
                    if (it.value.length) {
                        //console.error("updating value length %s->%s at index %s on %s", string_data[it.index].value.length, it.value.length, it.index, table.name);
                        string_data[it.index].value = it.value;
                    }
                }
            });
        }
        else {
            throw "string table doesn't exist!";
        }
        /*
        // Apply the updates to baseline state
	    if t.name == "instancebaseline" {
	    	p.updateInstanceBaseline()
	    }
	    */
    }
    /**
     * Parses a buffer of string table data and returns an array of decoded items
     **/
    function parseStringTableData(buf, num_entries, userDataFixedSize, userDataSize) {
        // Some tables have no data
        if (!buf.length) {
            return [];
        }
        var items = [];
        var bs = new BitStream(buf);
        // Start with an index of -1.
        // If the first item is at index 0 it will use a incr operation.
        var index = -1;
        var STRINGTABLE_KEY_HISTORY_SIZE = 32;
        // Maintain a list of key history
        // each entry is a string
        var keyHistory = [];
        // Loop through entries in the data structure
        // Each entry is a tuple consisting of {index, key, value}
        // Index can either be incremented from the previous position or overwritten with a given entry.
        // Key may be omitted (will be represented here as "")
        // Value may be omitted
        for (var i = 0; i < num_entries; i++) {
            var key = null;
            var value = new Buffer(0);
            // Read a boolean to determine whether the operation is an increment or
            // has a fixed index position. A fixed index position of zero should be
            // the last data in the buffer, and indicates that all data has been read.
            var incr = bs.readBoolean();
            if (incr) {
                index += 1;
            }
            else {
                index = bs.readVarUInt() + 1;
            }
            // Some values have keys, some don't.
            var hasKey = bs.readBoolean();
            if (hasKey) {
                // Some entries use reference a position in the key history for
                // part of the key. If referencing the history, read the position
                // and size from the buffer, then use those to build the string
                // combined with an extra string read (null terminated).
                // Alternatively, just read the string.
                var useHistory = bs.readBoolean();
                if (useHistory) {
                    var pos = bs.readBits(5);
                    var size = bs.readBits(5);
                    if (pos >= keyHistory.length) {
                        //history doesn't have this position, just read
                        key = bs.readNullTerminatedString();
                    }
                    else {
                        var s = keyHistory[pos];
                        if (size > s.length) {
                            //our target size is longer than the key stored in history
                            //pad the remaining size with a null terminated string from stream
                            key = (s + bs.readNullTerminatedString());
                        }
                        else {
                            //we only want a piece of the historical string, slice it out and read the null terminator
                            key = s.slice(0, size) + bs.readNullTerminatedString();
                        }
                    }
                }
                else {
                    //don't use the history, just read the string
                    key = bs.readNullTerminatedString();
                }
                keyHistory.push(key);
                if (keyHistory.length > STRINGTABLE_KEY_HISTORY_SIZE) {
                    //drop the oldest key if we hit the cap
                    keyHistory.shift();
                }
            }
            // Some entries have a value.
            var hasValue = bs.readBoolean();
            if (hasValue) {
                // Values can be either fixed size (with a size specified in
                // bits during table creation, or have a variable size with
                // a 14-bit prefixed size.
                if (userDataFixedSize) {
                    value = bs.readBuffer(userDataSize);
                }
                else {
                    var valueSize = bs.readBits(14);
                    //TODO mysterious 3 bits of data?
                    bs.readBits(3);
                    value = bs.readBuffer(valueSize * 8);
                }
            }
            items.push({
                index: index,
                key: key,
                value: value
            });
        }
        //console.error(keyHistory, items, num_entries);
        return items;
    }
    /**
     * Returns whether there is an attached listener for this message name.
     **/
    function listening(name) {
        return p.listeners(name).length || p.listeners("*").length;
    }

    function readCDemoStringTables(data) {
        //rather than processing when we read this demo message, we want to create when we read the packet CSVCMsg_CreateStringTable
        //this packet is just emitted as a state dump at intervals
        return;
    }

    function readByte(cb) {
        readBytes(1, function(err, buf) {
            cb(err, buf.readInt8(0));
        });
    }

    function readString(size, cb) {
        readBytes(size, function(err, buf) {
            cb(err, buf.toString());
        });
    }

    function readUint32(cb) {
        readBytes(4, function(err, buf) {
            cb(err, buf.readUInt32LE(0));
        });
    }

    function readVarint32(cb) {
        readByte(function(err, tmp) {
            if (tmp >= 0) {
                return cb(err, tmp);
            }
            var result = tmp & 0x7f;
            readByte(function(err, tmp) {
                if (tmp >= 0) {
                    result |= tmp << 7;
                    return cb(err, result);
                }
                else {
                    result |= (tmp & 0x7f) << 7;
                    readByte(function(err, tmp) {
                        if (tmp >= 0) {
                            result |= tmp << 14;
                            return cb(err, result);
                        }
                        else {
                            result |= (tmp & 0x7f) << 14;
                            readByte(function(err, tmp) {
                                if (tmp >= 0) {
                                    result |= tmp << 21;
                                    return cb(err, result);
                                }
                                else {
                                    result |= (tmp & 0x7f) << 21;
                                    readByte(function(err, tmp) {
                                        result |= tmp << 28;
                                        if (tmp < 0) {
                                            err = "malformed varint detected";
                                        }
                                        return cb(err, result);
                                    });
                                }
                            });
                        }
                    });
                }
            });
        });
    }

    function readBytes(size, cb) {
        if (!size) {
            //return an empty buffer if reading 0 bytes
            return cb(null, new Buffer(""));
        }
        var buf = input.read(size);
        if (buf) {
            return cb(null, buf);
        }
        else {
            input.once('readable', function() {
                return readBytes(size, cb);
            });
        }
    }
};
global.Parser = Parser;
module.exports = Parser;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./BitStream":1,"./build/protos.json":3,"./build/types.json":4,"./snappy":35,"async":5,"buffer":28,"events":8,"protobufjs":34,"stream":26}],3:[function(require,module,exports){
module.exports={
    "package": null,
    "options": {
        "optimize_for": "SPEED",
        "cc_generic_services": false
    },
    "messages": [
        {
            "name": "CMsgProtoBufHeader",
            "options": {
                "(msgpool_soft_limit)": 256,
                "(msgpool_hard_limit)": 1024
            },
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "client_steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "client_session_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_app_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "job_id_source",
                    "id": 10,
                    "options": {
                        "default": 18446744073709552000
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "job_id_target",
                    "id": 11,
                    "options": {
                        "default": 18446744073709552000
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "target_job_name",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 13,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "error_message",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "GCProtoBufMsgSrc",
                    "name": "gc_msg_src",
                    "id": 200,
                    "options": {
                        "default": "GCProtoBufMsgSrc_Unspecified"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gc_dir_index_source",
                    "id": 201
                }
            ]
        },
        {
            "name": "CMsgWebAPIKey",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "status",
                    "id": 1,
                    "options": {
                        "default": 255
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "publisher_group_id",
                    "id": 3,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "key_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "domain",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgHttpRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "request_method",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "hostname",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "RequestHeader",
                    "name": "headers",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "QueryParam",
                    "name": "get_params",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "QueryParam",
                    "name": "post_params",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "body",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "absolute_timeout",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "RequestHeader",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "value",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "QueryParam",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgWebAPIRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "UNUSED_job_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "interface_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "method_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgWebAPIKey",
                    "name": "api_key",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgHttpRequest",
                    "name": "request",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "routing_app_id",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgHttpResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "status_code",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "ResponseHeader",
                    "name": "headers",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "body",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "ResponseHeader",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgAMFindAccounts",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "search_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_string",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAMFindAccountsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgNotifyWatchdog",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "alert_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "alert_destination",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "critical",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgAMGetLicenses",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPackageLicense",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "package_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_created",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgAMGetLicensesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgPackageLicense",
                    "name": "license",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAMGetUserGameStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "game_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "stats",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgAMGetUserGameStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "game_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 3,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Stats",
                    "name": "stats",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "Achievement_Blocks",
                    "name": "achievement_blocks",
                    "id": 5
                }
            ],
            "messages": [
                {
                    "name": "Stats",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "stat_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "stat_value",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "Achievement_Blocks",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "achievement_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "achievement_bit_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "unlock_time",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCGetCommandList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "app_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "command_prefix",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCGetCommandListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "command_name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgMemCachedGet",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "keys",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgMemCachedGetResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "ValueTag",
                    "name": "values",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "ValueTag",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "found",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CGCMsgMemCachedSet",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "KeyPair",
                    "name": "keys",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "KeyPair",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CGCMsgMemCachedDelete",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "keys",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgMemCachedStats",
            "fields": []
        },
        {
            "name": "CGCMsgMemCachedStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "curr_connections",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "cmd_get",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "cmd_set",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "cmd_flush",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "get_hits",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "get_misses",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "delete_hits",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "delete_misses",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "bytes_read",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "bytes_written",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "limit_maxbytes",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "curr_items",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "evictions",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "bytes",
                    "id": 14
                }
            ]
        },
        {
            "name": "CGCMsgSQLStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "schema_catalog",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgSQLStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "threads",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "threads_connected",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "threads_active",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "operations_submitted",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prepared_statements_executed",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "non_prepared_statements_executed",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deadlock_retries",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "operations_timed_out_in_queue",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "errors",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgAMAddFreeLicense",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ip_public",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "packageid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "store_country_code",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgAMAddFreeLicenseResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "purchase_result_detail",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "transid",
                    "id": 3
                }
            ]
        },
        {
            "name": "CGCMsgGetIPLocation",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed32",
                    "name": "ips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CIPLocationInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ip",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "latitude",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "longitude",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "state",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "city",
                    "id": 6
                }
            ]
        },
        {
            "name": "CGCMsgGetIPLocationResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CIPLocationInfo",
                    "name": "infos",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgGetIPASN",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed32",
                    "name": "ips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CIPASNInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "ip",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "asn",
                    "id": 2
                }
            ]
        },
        {
            "name": "CGCMsgGetIPASNResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CIPASNInfo",
                    "name": "infos",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCMsgSystemStatsSchema",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gc_app_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "schema_kv",
                    "id": 2
                }
            ]
        },
        {
            "name": "CGCMsgGetSystemStats",
            "fields": []
        },
        {
            "name": "CGCMsgGetSystemStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gc_app_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "stats_kv",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "active_jobs",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "yielding_jobs",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "user_sessions",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_server_sessions",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "socaches",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "socaches_to_unload",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "socaches_loading",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "writeback_queue",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "steamid_locks",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "logon_queue",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "logon_jobs",
                    "id": 13
                }
            ]
        },
        {
            "name": "CMsgAMSendEmail",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "email_msg_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "email_format",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "PersonaNameReplacementToken",
                    "name": "persona_name_tokens",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_gc",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "ReplacementToken",
                    "name": "tokens",
                    "id": 7
                }
            ],
            "messages": [
                {
                    "name": "ReplacementToken",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "token_name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "token_value",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "PersonaNameReplacementToken",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steamid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "token_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgAMSendEmailResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgGCGetEmailTemplate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "app_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "email_msg_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "email_lang",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "email_format",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCGetEmailTemplateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "template_exists",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "template",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgAMGrantGuestPasses2",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "package_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "passes_to_grant",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "days_to_expiration",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "action",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgAMGrantGuestPasses2Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "passes_granted",
                    "id": 2,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CGCSystemMsg_GetAccountDetails",
            "options": {
                "(msgpool_soft_limit)": 128,
                "(msgpool_hard_limit)": 512
            },
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CGCSystemMsg_GetAccountDetails_Response",
            "options": {
                "(msgpool_soft_limit)": 128,
                "(msgpool_hard_limit)": 512
            },
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult_deprecated",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "account_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_profile_created",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_profile_public",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_inventory_public",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_vac_banned",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_cyber_cafe",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_school_account",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_limited",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_subscribed",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "package",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_free_trial_account",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "free_trial_expiration",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_low_violence",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_account_locked_down",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_community_banned",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_trade_banned",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "trade_ban_expiration",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "accountid",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "suspension_end_time",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "currency",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "steam_level",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "friend_count",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_creation_time",
                    "id": 25
                }
            ]
        },
        {
            "name": "CMsgGCGetPersonaNames",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steamids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCGetPersonaNames_Response",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "PersonaName",
                    "name": "succeeded_lookups",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "failed_lookup_steamids",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PersonaName",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steamid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "persona_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCCheckFriendship",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid_right",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCCheckFriendship_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "found_friendship",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCGetAppFriendsList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCGetAppFriendsList_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steamids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetDirectory",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "master_dir_index",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "SubGC",
                    "name": "dir",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "SubGC",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "dir_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "box",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "command_line",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "gc_binary",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetDirectory_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgGCMsgWebAPIJobRequestForwardResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dir_index",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCSystemMsg_GetPurchaseTrust_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CGCSystemMsg_GetPurchaseTrust_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_prior_purchase_history",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_no_recent_password_resets",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_wallet_cash_trusted",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_all_trusted",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCHAccountVacStatusChange",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "app_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rtime_vacban_starts",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_banned_now",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_banned_future",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgGCGetPartnerAccountLink",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCGetPartnerAccountLink_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "pwid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "nexonid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCRoutingInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "dir_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "RoutingMethod",
                    "name": "method",
                    "id": 2,
                    "options": {
                        "default": "RANDOM"
                    }
                },
                {
                    "rule": "optional",
                    "type": "RoutingMethod",
                    "name": "fallback",
                    "id": 3,
                    "options": {
                        "default": "DISCARD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "protobuf_field",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "webapi_param",
                    "id": 5
                }
            ],
            "enums": [
                {
                    "name": "RoutingMethod",
                    "values": [
                        {
                            "name": "RANDOM",
                            "id": 0
                        },
                        {
                            "name": "DISCARD",
                            "id": 1
                        },
                        {
                            "name": "CLIENT_STEAMID",
                            "id": 2
                        },
                        {
                            "name": "PROTOBUF_FIELD_UINT64",
                            "id": 3
                        },
                        {
                            "name": "WEBAPI_PARAM_UINT64",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetWebAPIRouting",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Entry",
                    "name": "entries",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Entry",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "interface_name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "method_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgGCRoutingInfo",
                            "name": "routing",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetClientMsgRouting",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Entry",
                    "name": "entries",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Entry",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "msg_type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgGCRoutingInfo",
                            "name": "routing",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetWebAPIRouting_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgGCMsgMasterSetClientMsgRouting_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgGCMsgSetOptions",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Option",
                    "name": "options",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "MessageRange",
                    "name": "client_msg_ranges",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "GCSQLVersion",
                    "name": "gcsql_version",
                    "id": 3,
                    "options": {
                        "default": "GCSQL_VERSION_BASELINE"
                    }
                }
            ],
            "messages": [
                {
                    "name": "MessageRange",
                    "fields": [
                        {
                            "rule": "required",
                            "type": "uint32",
                            "name": "low",
                            "id": 1
                        },
                        {
                            "rule": "required",
                            "type": "uint32",
                            "name": "high",
                            "id": 2
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "Option",
                    "values": [
                        {
                            "name": "NOTIFY_USER_SESSIONS",
                            "id": 0
                        },
                        {
                            "name": "NOTIFY_SERVER_SESSIONS",
                            "id": 1
                        },
                        {
                            "name": "NOTIFY_ACHIEVEMENTS",
                            "id": 2
                        },
                        {
                            "name": "NOTIFY_VAC_ACTION",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "GCSQLVersion",
                    "values": [
                        {
                            "name": "GCSQL_VERSION_BASELINE",
                            "id": 1
                        },
                        {
                            "name": "GCSQL_VERSION_BOOLTYPE",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCHUpdateSession",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "app_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "online",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steam_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_addr",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_port",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "os_type",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_addr",
                    "id": 8
                },
                {
                    "rule": "repeated",
                    "type": "ExtraField",
                    "name": "extra_fields",
                    "id": 9
                }
            ],
            "messages": [
                {
                    "name": "ExtraField",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgNotificationOfSuspiciousActivity",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "MultipleGameInstances",
                    "name": "multiple_instances",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "MultipleGameInstances",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "app_instance_count",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "fixed64",
                            "name": "other_steamids",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDPPartnerMicroTxns",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "gc_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "PartnerInfo",
                    "name": "partner",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "PartnerMicroTxn",
                    "name": "transactions",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "PartnerMicroTxn",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "init_time",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "last_update_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "txn_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "line_item",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "def_index",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "price",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tax",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "price_usd",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tax_usd",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "purchase_type",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "steam_txn_type",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country_code",
                            "id": 14
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "region_code",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "quantity",
                            "id": 16
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "ref_trans_id",
                            "id": 17
                        }
                    ]
                },
                {
                    "name": "PartnerInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "partner_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "partner_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "currency_code",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "currency_name",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDPPartnerMicroTxnsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "EErrorCode",
                    "name": "eerrorcode",
                    "id": 2,
                    "options": {
                        "default": "k_MsgValid"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EErrorCode",
                    "values": [
                        {
                            "name": "k_MsgValid",
                            "id": 0
                        },
                        {
                            "name": "k_MsgInvalidAppID",
                            "id": 1
                        },
                        {
                            "name": "k_MsgInvalidPartnerInfo",
                            "id": 2
                        },
                        {
                            "name": "k_MsgNoTransactions",
                            "id": 3
                        },
                        {
                            "name": "k_MsgSQLFailure",
                            "id": 4
                        },
                        {
                            "name": "k_MsgPartnerInfoDiscrepancy",
                            "id": 5
                        },
                        {
                            "name": "k_MsgTransactionInsertFailed",
                            "id": 7
                        },
                        {
                            "name": "k_MsgAlreadyRunning",
                            "id": 8
                        },
                        {
                            "name": "k_MsgInvalidTransactionData",
                            "id": 9
                        }
                    ]
                }
            ]
        },
        {
            "name": "CGCStorePurchaseInit_LineItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "quantity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cost_in_local_currency",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "purchase_type",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "source_reference_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseInit",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "language",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "currency",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CGCStorePurchaseInit_LineItem",
                    "name": "line_items",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseInitResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "txn_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSystemBroadcast",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgInviteToParty",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "as_coach",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgInviteToLobby",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgInvitationCreated",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "group_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgPartyInviteResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "accept",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "as_coach",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_language_enum",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_language_name",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgLobbyInviteResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "accept",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_language_enum",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_language_name",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_crc",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "custom_game_timestamp",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgKickFromParty",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgLeaveParty",
            "fields": []
        },
        {
            "name": "CMsgCustomGameInstallStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "ECustomGameInstallStatus",
                    "name": "status",
                    "id": 1,
                    "options": {
                        "default": "k_ECustomGameInstallStatus_Unknown"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "latest_timestamp_from_steam",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgServerAvailable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgCustomGameInstallStatus",
                    "name": "custom_game_install_status",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgLANServerAvailable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSOEconGameAccountClient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "additional_backpack_slots",
                    "id": 1,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "trial_account",
                    "id": 2,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "eligible_for_online_play",
                    "id": 3,
                    "options": {
                        "default": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "need_to_choose_most_helpful_friend",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "in_coaches_list",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "trade_ban_expiration",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "duel_ban_expiration",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "preview_item_def",
                    "id": 8,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "made_first_purchase",
                    "id": 9,
                    "options": {
                        "default": false
                    }
                }
            ]
        },
        {
            "name": "CSOItemCriteriaCondition",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "op",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "field",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "required",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "float_value",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "string_value",
                    "id": 5
                }
            ]
        },
        {
            "name": "CSOItemCriteria",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_level",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "item_quality",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "item_level_set",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "item_quality_set",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "initial_inventory",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "initial_quantity",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "ignore_enabled_flag",
                    "id": 8
                },
                {
                    "rule": "repeated",
                    "type": "CSOItemCriteriaCondition",
                    "name": "conditions",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "recent_only",
                    "id": 10
                }
            ]
        },
        {
            "name": "CSOItemRecipe",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "n_a",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "desc_inputs",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "desc_outputs",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "di_a",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "di_b",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "di_c",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "do_a",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "do_b",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "do_c",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "requires_all_same_class",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "requires_all_same_slot",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "class_usage_for_output",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot_usage_for_output",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "set_for_output",
                    "id": 16
                },
                {
                    "rule": "repeated",
                    "type": "CSOItemCriteria",
                    "name": "input_items_criteria",
                    "id": 20
                },
                {
                    "rule": "repeated",
                    "type": "CSOItemCriteria",
                    "name": "output_items_criteria",
                    "id": 21
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "input_item_dupe_counts",
                    "id": 22
                }
            ]
        },
        {
            "name": "CMsgApplyStrangePart",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "strange_part_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgApplyPennantUpgrade",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "upgrade_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "pennant_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgApplyEggEssence",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "essence_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "egg_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSOEconItemAttribute",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "value_bytes",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSOEconItemEquipped",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "new_class",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "new_slot",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSOEconItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "inventory",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "quantity",
                    "id": 5,
                    "options": {
                        "default": 1
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level",
                    "id": 6,
                    "options": {
                        "default": 1
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "quality",
                    "id": 7,
                    "options": {
                        "default": 4
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 8,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "origin",
                    "id": 9,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CSOEconItemAttribute",
                    "name": "attribute",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "CSOEconItem",
                    "name": "interior_item",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "in_use",
                    "id": 14,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "style",
                    "id": 15,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "original_id",
                    "id": 16,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CSOEconItemEquipped",
                    "name": "equipped_state",
                    "id": 18
                }
            ]
        },
        {
            "name": "CMsgSortItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sort_type",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSOEconClaimCode",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "code_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_acquired",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "code",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgStoreGetUserData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "price_sheet_version",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgStoreGetUserDataResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "currency",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "price_sheet_version",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "experiment_data",
                    "id": 5,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "featured_item_idx",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "show_hat_descriptions",
                    "id": 7,
                    "options": {
                        "default": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "price_sheet",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "default_item_sort",
                    "id": 9,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "popular_items",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgUpdateItemSchema",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "items_game",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "item_schema_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "items_game_url",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCError",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "error_text",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestInventoryRefresh",
            "fields": []
        },
        {
            "name": "CMsgConVarValue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "value",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgReplicateConVars",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgConVarValue",
                    "name": "convars",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgReplayUploadedToYouTube",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "youtube_url",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "youtube_account_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "session_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgConsumableExhausted",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "item_def_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgItemAcknowledged",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "inventory",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "quality",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rarity",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "origin",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgSetPresetItemPosition",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "preset_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgSetItemPositions",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "ItemPosition",
                    "name": "item_positions",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "ItemPosition",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "position",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSOEconItemPresetInstance",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "preset_id",
                    "id": 3,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 4,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSelectItemPresetForClass",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "preset_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSelectItemPresetForClassReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSOSelectedItemPreset",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "preset_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCReportAbuse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "target_steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "gid",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "abuse_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "content_type",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "target_game_server_ip",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_game_server_port",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgGCReportAbuseResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "target_steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "error_message",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCNameItemNotification",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "player_steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "item_name_custom",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCClientDisplayNotification",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "notification_title_localization_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "notification_body_localization_key",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "body_substring_keys",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "body_substring_values",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCShowItemsPickedUp",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "player_steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCIncrementKillCountResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "killer_account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_kills",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level_type",
                    "id": 4
                }
            ]
        },
        {
            "name": "CSOEconItemDropRateBonus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "expiration_date",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "bonus",
                    "id": 3,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bonus_count",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_left",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "booster_type",
                    "id": 8,
                    "options": {
                        "(key_field)": true
                    }
                }
            ]
        },
        {
            "name": "CSOEconItemLeagueViewPass",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "itemindex",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "grant_reason",
                    "id": 5
                }
            ]
        },
        {
            "name": "CSOEconItemEventTicket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSOEconItemTournamentPassport",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "original_purchaser_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "passports_bought",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reward_flags",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgGCItemPreviewItemBoughtNotification",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_index",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseCancel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "txn_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseCancelResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseFinalize",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "txn_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCStorePurchaseFinalizeResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCBannedWordListRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ban_list_group_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "word_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCBannedWord",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "word_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "GC_BannedWordType",
                    "name": "word_type",
                    "id": 2,
                    "options": {
                        "default": "GC_BANNED_WORD_DISABLE_WORD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "word",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCBannedWordListResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ban_list_group_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgGCBannedWord",
                    "name": "word_list",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCBannedWordListBroadcast",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgGCBannedWordListResponse",
                    "name": "broadcast",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCBannedWordListUpdated",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "group_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCDirtySDOCache",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sdo_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "key_uint64",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCDirtyMultipleSDOCache",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sdo_type",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "key_uint64",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCApplyLocalizationDiff",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "language",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "packed_diff",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCApplyLocalizationDiffResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCCollectItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "collection_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "subject_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSDONoMemcached",
            "fields": []
        },
        {
            "name": "CMsgGCToGCUpdateSQLKeyValue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "key_name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCBroadcastConsoleCommand",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "con_command",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCServerVersionUpdated",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_version",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCClientVersionUpdated",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCWebAPIAccountChanged",
            "fields": []
        },
        {
            "name": "CMsgRecipeComponent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "subject_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "attribute_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgFulfillDynamicRecipeComponent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "tool_item_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgRecipeComponent",
                    "name": "consumption_components",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCClientMarketDataRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "user_currency",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCClientMarketDataEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_quality",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_sell_listings",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "price_in_local_currency",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCClientMarketData",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgGCClientMarketDataEntry",
                    "name": "entries",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgExtractGems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "tool_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAddSocket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "tool_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "unusual",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgAddSocketResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "updated_socket_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAddItemToSocketData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "gem_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "socket_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAddItemToSocket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAddItemToSocketData",
                    "name": "gems_to_socket",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAddItemToSocketResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "updated_socket_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgResetStrangeGemCount",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "socket_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgVector",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "z",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgVector2D",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "y",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgQAngle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "z",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgPlayerInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "xuid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "userid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "fakeplayer",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "ishltv",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsg_CVars",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CVar",
                    "name": "cvars",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "CVar",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CNETMsg_NOP",
            "fields": []
        },
        {
            "name": "CNETMsg_SplitScreenUser",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot",
                    "id": 1
                }
            ]
        },
        {
            "name": "CNETMsg_Disconnect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "ENetworkDisconnectionReason",
                    "name": "reason",
                    "id": 2,
                    "options": {
                        "default": "NETWORK_DISCONNECT_INVALID"
                    }
                }
            ]
        },
        {
            "name": "CNETMsg_Tick",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tick",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_frametime",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_frametime_std_deviation",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_computationtime",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_computationtime_std_deviation",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_framestarttime_std_deviation",
                    "id": 6
                }
            ]
        },
        {
            "name": "CNETMsg_StringCmd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "command",
                    "id": 1
                }
            ]
        },
        {
            "name": "CNETMsg_SetConVar",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsg_CVars",
                    "name": "convars",
                    "id": 1
                }
            ]
        },
        {
            "name": "CNETMsg_SignonState",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "signon_state",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawn_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_server_players",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "players_networkids",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "map_name",
                    "id": 5
                }
            ]
        },
        {
            "name": "CSVCMsg_GameEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "event_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eventid",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "key_t",
                    "name": "keys",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "key_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "val_string",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "val_float",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_long",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_short",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_byte",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "val_bool",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "val_uint64",
                            "id": 8
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsgList_GameEvents",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "event_t",
                    "name": "events",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "event_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "tick",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CSVCMsg_GameEvent",
                            "name": "event",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsg_UserMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "msg_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "msg_data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSVCMsgList_UserMessages",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "usermsg_t",
                    "name": "usermsgs",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "usermsg_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "tick",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CSVCMsg_UserMessage",
                            "name": "msg",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CNETMsg_SpawnGroup_Load",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "worldname",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "entitylumpname",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "entityfiltername",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngrouphandle",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngroupownerhandle",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "world_offset_pos",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "world_offset_angle",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "spawngroupmanifest",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tickcount",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "manifestincomplete",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "localnamefixup",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "parentnamefixup",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "manifestloadpriority",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "worldgroupid",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "creationsequence",
                    "id": 16
                }
            ]
        },
        {
            "name": "CNETMsg_SpawnGroup_ManifestUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngrouphandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "spawngroupmanifest",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "manifestincomplete",
                    "id": 3
                }
            ]
        },
        {
            "name": "CNETMsg_SpawnGroup_SetCreationTick",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngrouphandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tickcount",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "creationsequence",
                    "id": 3
                }
            ]
        },
        {
            "name": "CNETMsg_SpawnGroup_Unload",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngrouphandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tickcount",
                    "id": 3
                }
            ]
        },
        {
            "name": "CNETMsg_SpawnGroup_LoadCompleted",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spawngrouphandle",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_GameSessionConfiguration",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_multiplayer",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_loadsavegame",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_background_map",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_headless",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "min_client_limit",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_client_limit",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_clients",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "tick_interval",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "hostname",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "savegamename",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "s1_mapname",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "gamemode",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "server_ip_address",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_localonly",
                    "id": 15
                }
            ]
        },
        {
            "name": "CCLCMsg_ClientInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "send_table_crc",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_hltv",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_replay",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "friends_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "friends_name",
                    "id": 6
                }
            ]
        },
        {
            "name": "CCLCMsg_Move",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_backup_commands",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_new_commands",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgVoiceAudio",
            "fields": [
                {
                    "rule": "optional",
                    "type": "VoiceDataFormat_t",
                    "name": "format",
                    "id": 1,
                    "options": {
                        "default": "VOICEDATA_FORMAT_STEAM"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "voice_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sequence_bytes",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "section_number",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sample_rate",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "uncompressed_sample_offset",
                    "id": 6
                }
            ]
        },
        {
            "name": "CCLCMsg_VoiceData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVoiceAudio",
                    "name": "audio",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "xuid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tick",
                    "id": 3
                }
            ]
        },
        {
            "name": "CCLCMsg_BaselineAck",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "baseline_tick",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "baseline_nr",
                    "id": 2
                }
            ]
        },
        {
            "name": "CCLCMsg_ListenEvents",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed32",
                    "name": "event_mask",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCLCMsg_RespondCvarValue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "cookie",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "status_code",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "value",
                    "id": 4
                }
            ]
        },
        {
            "name": "CCLCMsg_FileCRCCheck",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "code_path",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "path",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "code_filename",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "filename",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "crc",
                    "id": 5
                }
            ]
        },
        {
            "name": "CCLCMsg_LoadingProgress",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "progress",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCLCMsg_SplitPlayerConnect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "playername",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCLCMsg_ClientMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "msg_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CCLCMsg_SplitPlayerDisconnect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCLCMsg_ServerStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "simplified",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCLCMsg_ServerPing",
            "fields": []
        },
        {
            "name": "CCLCMsg_RequestPause",
            "fields": [
                {
                    "rule": "optional",
                    "type": "RequestPause_t",
                    "name": "pause_type",
                    "id": 1,
                    "options": {
                        "default": "RP_PAUSE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "pause_group",
                    "id": 2
                }
            ]
        },
        {
            "name": "CCLCMsg_CmdKeyValues",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_ServerInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "protocol",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "server_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_dedicated",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_hltv",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_replay",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "c_os",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "map_crc",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_crc",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "string_table_crc",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "max_clients",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "max_classes",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_slot",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "tick_interval",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_dir",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "map_name",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sky_name",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "host_name",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "addon_name",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "CSVCMsg_GameSessionConfiguration",
                    "name": "game_session_config",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "game_session_manifest",
                    "id": 20
                }
            ]
        },
        {
            "name": "CSVCMsg_ClassInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "create_on_client",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "class_t",
                    "name": "classes",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "class_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "class_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "data_table_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "class_name",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsg_SetPause",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "paused",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_VoiceInit",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "quality",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "codec",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "version",
                    "id": 3,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CSVCMsg_Print",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_Sounds",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "reliable_sound",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "sounddata_t",
                    "name": "sounds",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "sounddata_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "sint32",
                            "name": "origin_x",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "sint32",
                            "name": "origin_y",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "sint32",
                            "name": "origin_z",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "volume",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "delay_value",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "sequence_number",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_index",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "channel",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "pitch",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "flags",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "sound_num",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "sound_num_handle",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "speaker_entity",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "random_seed",
                            "id": 14
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "sound_level",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "is_sentence",
                            "id": 16
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "is_ambient",
                            "id": 17
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "guid",
                            "id": 18
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "sound_resource_id",
                            "id": 19
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsg_Prefetch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sound_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "PrefetchType",
                    "name": "resource_type",
                    "id": 2,
                    "options": {
                        "default": "PFT_SOUND"
                    }
                }
            ]
        },
        {
            "name": "CSVCMsg_SetView",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSVCMsg_FixAngle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "relative",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angle",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSVCMsg_CrosshairAngle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angle",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_BSPDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "pos",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "decal_texture_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "model_index",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority",
                    "id": 5
                }
            ]
        },
        {
            "name": "CSVCMsg_SplitScreen",
            "fields": [
                {
                    "rule": "optional",
                    "type": "ESplitScreenMessageType",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "MSG_SPLITSCREEN_ADDUSER"
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_GetCvarValue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "cookie",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "cvar_name",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSVCMsg_Menu",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "dialog_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "menu_key_values",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSVCMsg_SendTable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_end",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "net_table_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needs_decoder",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "sendprop_t",
                    "name": "props",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "sendprop_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "var_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "flags",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "priority",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "dt_name",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "num_elements",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "low_value",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "high_value",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "num_bits",
                            "id": 9
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsg_GameEventList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "descriptor_t",
                    "name": "descriptors",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "key_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "descriptor_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "eventid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "key_t",
                            "name": "keys",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSVCMsg_PacketEntities",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "max_entries",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "updated_entries",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_delta",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "update_baseline",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "baseline",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "delta_from",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "entity_data",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "pending_full_frame",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "active_spawngroup_handle",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_spawngroup_creationsequence",
                    "id": 10
                }
            ]
        },
        {
            "name": "CSVCMsg_TempEntities",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "reliable",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "num_entries",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "entity_data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_CreateStringTable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "num_entries",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "user_data_fixed_size",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "user_data_size",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "user_data_size_bits",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "flags",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "string_data",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "uncompressed_size",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "data_compressed",
                    "id": 9
                }
            ]
        },
        {
            "name": "CSVCMsg_UpdateStringTable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "table_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "num_changed_entries",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "string_data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_VoiceData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVoiceAudio",
                    "name": "audio",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "client",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "proximity",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "xuid",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "audible_mask",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tick",
                    "id": 6
                }
            ]
        },
        {
            "name": "CSVCMsg_PacketReliable",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tick",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "messagessize",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "state",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_FullFrameSplit",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tick",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "section",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "total",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 4
                }
            ]
        },
        {
            "name": "CSVCMsg_CmdKeyValues",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgIPCAddress",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "computer_guid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "process_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgServerPeer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_slot",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgIPCAddress",
                    "name": "ipc",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "they_hear_you",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "you_hear_them",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_listenserver_host",
                    "id": 6
                }
            ]
        },
        {
            "name": "CSVCMsg_PeerList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgServerPeer",
                    "name": "peer",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSVCMsg_ClearAllStringTables",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "mapname",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "map_crc",
                    "id": 2
                }
            ]
        },
        {
            "name": "ProtoFlattenedSerializerField_t",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "var_type_sym",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "var_name_sym",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "bit_count",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "low_value",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "high_value",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "encode_flags",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "field_serializer_name_sym",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "field_serializer_version",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "send_node_sym",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "var_encoder_sym",
                    "id": 10
                }
            ]
        },
        {
            "name": "ProtoFlattenedSerializer_t",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "serializer_name_sym",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "serializer_version",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "int32",
                    "name": "fields_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_FlattenedSerializer",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "ProtoFlattenedSerializer_t",
                    "name": "serializers",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "symbols",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "ProtoFlattenedSerializerField_t",
                    "name": "fields",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSVCMsg_StopSound",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "guid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CBidirMsg_RebroadcastGameEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "posttoserver",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "buftype",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "clientbitcount",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "receivingclients",
                    "id": 4
                }
            ]
        },
        {
            "name": "CBidirMsg_RebroadcastSource",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eventsource",
                    "id": 1
                }
            ]
        },
        {
            "name": "SerializedNetAddress_t",
            "fields": [
                {
                    "rule": "required",
                    "type": "bytes",
                    "name": "serializedAddress",
                    "id": 1
                }
            ]
        },
        {
            "name": "CBidirMsg_RelayInfo",
            "fields": [
                {
                    "rule": "required",
                    "type": "Operation_t",
                    "name": "operation",
                    "id": 1,
                    "options": {
                        "default": "RIO_REQUEST_RELAY"
                    }
                },
                {
                    "rule": "optional",
                    "type": "SerializedNetAddress_t",
                    "name": "serializedTargetAddress",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "additionalHops",
                    "id": 3
                }
            ],
            "enums": [
                {
                    "name": "Operation_t",
                    "values": [
                        {
                            "name": "RIO_REQUEST_RELAY",
                            "id": 0
                        },
                        {
                            "name": "RIO_WILL_RELAY",
                            "id": 1
                        },
                        {
                            "name": "RIO_NO_ROUTE",
                            "id": 2
                        },
                        {
                            "name": "RIO_REJECT_RELAY",
                            "id": 3
                        },
                        {
                            "name": "RIO_ESTABLISH_CONNECTION",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "SignedPayload_t",
            "fields": [
                {
                    "rule": "required",
                    "type": "bytes",
                    "name": "payloadData",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "uint32",
                    "name": "signature",
                    "id": 2
                },
                {
                    "rule": "required",
                    "type": "bool",
                    "name": "bPayloadEncrypted",
                    "id": 3
                }
            ]
        },
        {
            "name": "CBidirMsg_RelayPacket",
            "fields": [
                {
                    "rule": "required",
                    "type": "uint32",
                    "name": "prevhopcount",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "SerializedNetAddress_t",
                    "name": "originalSender",
                    "id": 2
                },
                {
                    "rule": "required",
                    "type": "SignedPayload_t",
                    "name": "signedPayload",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "SignedDestinationAddress_t",
                    "name": "recipientList",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "SignedDestinationAddress_t",
                    "fields": [
                        {
                            "rule": "required",
                            "type": "SerializedNetAddress_t",
                            "name": "serializedAddr",
                            "id": 1
                        },
                        {
                            "rule": "required",
                            "type": "uint32",
                            "name": "signature",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "encryptedPayloadKey",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CP2P_TextMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "text",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSteam_Voice_Encoding",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "voice_data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CP2P_Voice",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVoiceAudio",
                    "name": "audio",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "broadcast_group",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Handler_Flags",
                    "values": [
                        {
                            "name": "Played_Audio",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CP2P_Ping",
            "fields": [
                {
                    "rule": "required",
                    "type": "uint64",
                    "name": "send_time",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "bool",
                    "name": "is_reply",
                    "id": 2
                }
            ]
        },
        {
            "name": "C2S_CONNECT_Message",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "host_version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "auth_protocol",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "challenge_number",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "reservation_cookie",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_violence",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "encrypted_password",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "CCLCMsg_SplitPlayerConnect",
                    "name": "splitplayers",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "auth_steam",
                    "id": 8
                }
            ]
        },
        {
            "name": "C2S_CONNECTION_Message",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "addon_name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDemoFileHeader",
            "fields": [
                {
                    "rule": "required",
                    "type": "string",
                    "name": "demo_file_stamp",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "network_protocol",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "server_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "client_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "map_name",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_directory",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "fullpackets_version",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_clientside_entities",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_clientside_particles",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "addons",
                    "id": 10
                }
            ]
        },
        {
            "name": "CGameInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDotaGameInfo",
                    "name": "dota",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CDotaGameInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "match_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "game_mode",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "game_winner",
                            "id": 3
                        },
                        {
                            "rule": "repeated",
                            "type": "CPlayerInfo",
                            "name": "player_info",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "leagueid",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "CHeroSelectEvent",
                            "name": "picks_bans",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "radiant_team_id",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "dire_team_id",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "radiant_team_tag",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "dire_team_tag",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "end_time",
                            "id": 11
                        }
                    ],
                    "messages": [
                        {
                            "name": "CPlayerInfo",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "string",
                                    "name": "hero_name",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "string",
                                    "name": "player_name",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "bool",
                                    "name": "is_fake_client",
                                    "id": 3
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint64",
                                    "name": "steamid",
                                    "id": 4
                                },
                                {
                                    "rule": "optional",
                                    "type": "int32",
                                    "name": "game_team",
                                    "id": 5
                                }
                            ]
                        },
                        {
                            "name": "CHeroSelectEvent",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "bool",
                                    "name": "is_pick",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "team",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_id",
                                    "id": 3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDemoFileInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "playback_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "playback_ticks",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "playback_frames",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CGameInfo",
                    "name": "game_info",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDemoPacket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sequence_in",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sequence_out_ack",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDemoFullPacket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDemoStringTables",
                    "name": "string_table",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDemoPacket",
                    "name": "packet",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDemoSaveGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "signature",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "version",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDemoSyncTick",
            "fields": []
        },
        {
            "name": "CDemoConsoleCmd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "cmdstring",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDemoSendTables",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDemoClassInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "class_t",
                    "name": "classes",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "class_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "class_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "network_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "table_name",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDemoCustomData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "callback_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDemoCustomDataCallbacks",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "save_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDemoStringTables",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "table_t",
                    "name": "tables",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "items_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "str",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "data",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "table_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "table_name",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "items_t",
                            "name": "items",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "items_t",
                            "name": "items_clientside",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "table_flags",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDemoStop",
            "fields": []
        },
        {
            "name": "CDemoUserCmd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "cmd_number",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDemoSpawnGroups",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "bytes",
                    "name": "msgs",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTABroadcastMsg",
            "fields": [
                {
                    "rule": "required",
                    "type": "EDotaBroadcastMessages",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "DOTA_BM_LANLobbyRequest"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "msg",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTABroadcastMsg_LANLobbyRequest",
            "fields": []
        },
        {
            "name": "CDOTABroadcastMsg_LANLobbyReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyMember",
                    "name": "members",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "requires_pass_key",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leader_account_id",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "players",
                    "id": 9
                }
            ],
            "messages": [
                {
                    "name": "CLobbyMember",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "player_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAMsg_LocationPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "target",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "direct_ping",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "type",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAMsg_ItemAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAMsg_MapLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "initial",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAMsg_WorldLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "z",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "initial",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "end",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAMsg_SendStatPopup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EDOTAStatPopupTypes",
                    "name": "style",
                    "id": 1,
                    "options": {
                        "default": "k_EDOTA_SPT_Textline"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "stat_strings",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "int32",
                    "name": "stat_images",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAMsg_CoachHUDPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tgtpath",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_MapPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_LocationPing",
                    "name": "location_ping",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_ItemAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_ItemAlert",
                    "name": "item_alert",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_EnemyItemAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_entindex",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_ModifierAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "buff_internal_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_entindex",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_ClickedBuff",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "buff_internal_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_entindex",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_HPManaAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_entindex",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_GlyphAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "negative",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_MapLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_MapLine",
                    "name": "mapline",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_AspectRatio",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "ratio",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_UnitsAutoAttack",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_UnitsAutoAttackAfterSpell",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_TeleportRequiresHalt",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_AutoPurchaseItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_TestItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "key_values",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_SearchString",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_Pause",
            "fields": []
        },
        {
            "name": "CDOTAClientMsg_ShopViewMode",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "mode",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_SetUnitShareFlag",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "playerID",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flag",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "state",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_SwapRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_SwapAccept",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_WorldLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_WorldLine",
                    "name": "worldline",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_RequestGraphUpdate",
            "fields": []
        },
        {
            "name": "CDOTAClientMsg_ChatWheel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EDOTAChatWheelMessage",
                    "name": "chat_message",
                    "id": 1,
                    "options": {
                        "default": "k_EDOTA_CW_Ok"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "param_hero_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_SendStatPopup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_SendStatPopup",
                    "name": "statpopup",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_BeginLastHitChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "chosen_lane",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "helper_enabled",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_UpdateQuickBuyItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "item_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "purchasable",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_UpdateQuickBuy",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CDOTAClientMsg_UpdateQuickBuyItem",
                    "name": "items",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_UpdateCoachListen",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_mask",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_CoachHUDPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_CoachHUDPing",
                    "name": "hud_ping",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_RecordVote",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "choice_index",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_WillPurchaseAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gold_remaining",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_BuyBackStateAlert",
            "fields": []
        },
        {
            "name": "CDOTAClientMsg_QuickBuyAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "gold_required",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_PlayerShowCase",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "showcase",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_CameraZoomAmount",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "zoom_amount",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_BroadcasterUsingCameraman",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "cameraman",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 1
                }
            ]
        },
        {
            "name": "CAdditionalEquipSlotClientMsg",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_FreeInventory",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CAdditionalEquipSlotClientMsg",
                    "name": "equips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_FillEmptySlotsWithBots",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "fillwithbots",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_HeroStatueLike",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_TeamShowcaseEditor",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_TeamShowcaseClientData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_PlayTeamShowcase",
            "fields": []
        },
        {
            "name": "CDOTAClientMsg_EventCNY2015Cmd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_DemoHero",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hero_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hero_id_to_spawn",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "item_defs",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "style_index",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_ChallengeSelect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sequence_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAClientMsg_ChallengeReroll",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sequence_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgSHA1Digest",
            "fields": [
                {
                    "rule": "required",
                    "type": "fixed64",
                    "name": "block1",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "fixed64",
                    "name": "block2",
                    "id": 2
                },
                {
                    "rule": "required",
                    "type": "fixed32",
                    "name": "block3",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgSOIDOwner",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSOSingleObject",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "type_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "object_data",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgSOMultipleObjects",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "SingleObject",
                    "name": "objects_modified",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "SingleObject",
                    "name": "objects_added",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "SingleObject",
                    "name": "objects_removed",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 7
                }
            ],
            "messages": [
                {
                    "name": "SingleObject",
                    "options": {
                        "(msgpool_soft_limit)": 256,
                        "(msgpool_hard_limit)": 1024
                    },
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "object_data",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSOCacheSubscribed",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "SubscribedType",
                    "name": "objects",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "service_list",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sync_version",
                    "id": 7
                }
            ],
            "messages": [
                {
                    "name": "SubscribedType",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type_id",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "bytes",
                            "name": "object_data",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSOCacheSubscribedUpToDate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "service_list",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sync_version",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSOCacheUnsubscribed",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSOCacheSubscriptionCheck",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "service_list",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sync_version",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgSOCacheSubscriptionRefresh",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "owner_soid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSOCacheVersion",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCMultiplexMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "msgtype",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "payload",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steamids",
                    "id": 3
                }
            ]
        },
        {
            "name": "CGCToGCMsgMasterAck",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dir_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "machine_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "process_name",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "Process",
                    "name": "directory",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "Process",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "dir_index",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "type_instances",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CGCToGCMsgMasterAck_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CGCToGCMsgMasterStartupComplete",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "GCInfo",
                    "name": "gc_info",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "GCInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "dir_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "machine_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CGCToGCMsgRouted",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "msg_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sender_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "net_message",
                    "id": 3
                }
            ]
        },
        {
            "name": "CGCToGCMsgRoutedReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "msg_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "net_message",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCUpdateSubGCSessionInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgUpdate",
                    "name": "updates",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "CMsgUpdate",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steamid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "ip",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "trusted",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCRequestSubGCSessionInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCRequestSubGCSessionInfoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "ip",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "trusted",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSOCacheHaveVersion",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSOIDOwner",
                    "name": "soid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "service_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cached_file_version",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgClientHello",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgSOCacheHaveVersion",
                    "name": "socache_have_versions",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_session_need",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "client_launcher",
                    "id": 4,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "secret_key",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_language",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "ESourceEngine",
                    "name": "engine",
                    "id": 7,
                    "options": {
                        "default": "k_ESE_Source1"
                    }
                }
            ]
        },
        {
            "name": "CMsgClientWelcome",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "game_data",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgSOCacheSubscribed",
                    "name": "outofdate_subscribed_caches",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgSOCacheSubscriptionCheck",
                    "name": "uptodate_subscribed_caches",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "Location",
                    "name": "location",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "save_game_key",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "Location",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "latitude",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "longitude",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgConnectionStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "GCConnectionStatus",
                    "name": "status",
                    "id": 1,
                    "options": {
                        "default": "GCConnectionStatus_HAVE_SESSION"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_session_need",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "queue_position",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "queue_size",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "wait_seconds",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "estimated_wait_seconds_remaining",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgGCToGCSOCacheSubscribe",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "subscriber",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "subscribe_to",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sync_version",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgHaveVersions",
                    "name": "have_versions",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CMsgHaveVersions",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "service_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "version",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToGCSOCacheUnsubscribe",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "subscriber",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "unsubscribe_from",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCClientPing",
            "fields": []
        },
        {
            "name": "CMsgGCToGCLoadSessionSOCache",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCLoadSessionSOCacheResponse",
            "fields": []
        },
        {
            "name": "CMsgGCToGCUpdateSessionStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "user_sessions",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_sessions",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "in_logon_surge",
                    "id": 3
                }
            ]
        },
        {
            "name": "CWorkshop_PopulateItemDescriptions_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "ItemDescriptionsLanguageBlock",
                    "name": "languages",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "SingleItemDescription",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gameitemid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "item_description",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "ItemDescriptionsLanguageBlock",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "language",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "SingleItemDescription",
                            "name": "descriptions",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CWorkshop_GetContributors_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gameitemid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CWorkshop_GetContributors_Response",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "contributors",
                    "id": 1
                }
            ]
        },
        {
            "name": "CWorkshop_SetItemPaymentRules_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gameitemid",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "WorkshopItemPaymentRule",
                    "name": "associated_workshop_files",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "PartnerItemPaymentRule",
                    "name": "partner_accounts",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "WorkshopItemPaymentRule",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "workshop_file_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "revenue_percentage",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "rule_description",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "PartnerItemPaymentRule",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "revenue_percentage",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "rule_description",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CWorkshop_SetItemPaymentRules_Response",
            "fields": []
        },
        {
            "name": "CBroadcast_PostGameDataFrame_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "broadcast_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "frame_data",
                    "id": 4
                }
            ]
        },
        {
            "name": "CSODOTAGameAccountClient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "wins",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "losses",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "xp",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "initial_skill",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leaver_count",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "secondary_leaver_count",
                    "id": 58
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "low_priority_until_date",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prevent_text_chat_until_date",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prevent_voice_until_date",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_abandoned_game_date",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_secondary_abandoned_game_date",
                    "id": 59
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leaver_penalty_count",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "completed_game_streak",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "teaching",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leadership",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "friendly",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "forgiving",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_disabled_until_date",
                    "id": 38
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_disabled_count",
                    "id": 39
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "showcase_hero_id",
                    "id": 40
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_disabled_until_date",
                    "id": 41
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_disabled_count",
                    "id": 42
                },
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "partner_account_type",
                    "id": 44,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "partner_account_state",
                    "id": 45
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "shutdownlawterminatetimestamp",
                    "id": 47
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "low_priority_games_remaining",
                    "id": 48
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "competitive_rank",
                    "id": 49
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "calibration_games_remaining",
                    "id": 51
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "solo_competitive_rank",
                    "id": 52
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "solo_calibration_games_remaining",
                    "id": 54
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "competitive_1v1_rank",
                    "id": 63
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "competitive_1v1_calibration_games_remaining",
                    "id": 64
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "recruitment_level",
                    "id": 55
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_new_notifications",
                    "id": 56
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_league_admin",
                    "id": 57
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "casual_games_played",
                    "id": 60
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "solo_competitive_games_played",
                    "id": 61
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "party_competitive_games_played",
                    "id": 62
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "casual_1v1_games_played",
                    "id": 65
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "competitive_team_games_played",
                    "id": 66
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "curr_all_hero_challenge_id",
                    "id": 67
                }
            ]
        },
        {
            "name": "CSODOTAPartyMember",
            "fields": [
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "partner_type",
                    "id": 1,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_coach",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSODOTAParty",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "leader_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "member_ids",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_modes",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "State",
                    "name": "state",
                    "id": 6,
                    "options": {
                        "default": "UI"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effective_started_matchmaking_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "raw_started_matchmaking_time",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attempt_start_time",
                    "id": 33
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attempt_num",
                    "id": 34
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchgroups",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "low_priority_account_id",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "MatchType",
                    "name": "match_type",
                    "id": 21,
                    "options": {
                        "default": "MATCH_TYPE_CASUAL"
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 22,
                    "options": {
                        "default": "BOT_DIFFICULTY_PASSIVE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_disabled_until_date",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_disabled_account_id",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchmaking_max_range_minutes",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchlanguages",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "map_preference",
                    "id": 38
                },
                {
                    "rule": "repeated",
                    "type": "CSODOTAPartyMember",
                    "name": "members",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "open_guild_id",
                    "id": 30
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "common_guilds",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "low_priority_games_remaining",
                    "id": 35
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "min_level",
                    "id": 36
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_level",
                    "id": 37
                },
                {
                    "rule": "repeated",
                    "type": "EIngameEvent",
                    "name": "active_ingame_events",
                    "id": 39
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "open_for_join_requests",
                    "id": 40
                },
                {
                    "rule": "repeated",
                    "type": "CSODOTAPartyInvite",
                    "name": "sent_invites",
                    "id": 41
                },
                {
                    "rule": "repeated",
                    "type": "CSODOTAPartyInvite",
                    "name": "recv_invites",
                    "id": 42
                }
            ],
            "enums": [
                {
                    "name": "State",
                    "values": [
                        {
                            "name": "UI",
                            "id": 0
                        },
                        {
                            "name": "FINDING_MATCH",
                            "id": 1
                        },
                        {
                            "name": "IN_MATCH",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSODOTAPartyInvite",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "group_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sender_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sender_name",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "PartyMember",
                    "name": "members",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority_status",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "as_coach",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "invite_gid",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "engine",
                    "id": 9
                }
            ],
            "messages": [
                {
                    "name": "PartyMember",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "is_coach",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSODOTALobbyInvite",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "group_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "sender_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sender_name",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "LobbyMember",
                    "name": "members",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "invite_gid",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_crc",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "custom_game_timestamp",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "LobbyMember",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAClientHardwareSpecs",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "logical_processors",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "cpu_cycles_per_second",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "total_physical_memory",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_64_bit_os",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "upload_measurement",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "prefer_not_host",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTASaveGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "save_time",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "players",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "SaveInstance",
                    "name": "save_instances",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "DOTA_GC_TEAM",
                            "name": "team",
                            "id": 1,
                            "options": {
                                "default": "DOTA_GC_TEAM_GOOD_GUYS"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "hero",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "SaveInstance",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team1_score",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team2_score",
                            "id": 4
                        },
                        {
                            "rule": "repeated",
                            "type": "PlayerPositions",
                            "name": "player_positions",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "save_id",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "save_time",
                            "id": 7
                        }
                    ],
                    "messages": [
                        {
                            "name": "PlayerPositions",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "x",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "y",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgLeaverState",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lobby_state",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameState",
                    "name": "game_state",
                    "id": 2,
                    "options": {
                        "default": "DOTA_GAMERULES_STATE_INIT"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "leaver_detected",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "first_blood_happened",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "discard_match_results",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "mass_disconnect",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTALobbyMember",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GC_TEAM",
                    "name": "team",
                    "id": 3,
                    "options": {
                        "default": "DOTA_GC_TEAM_GOOD_GUYS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "meta_level",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "meta_xp",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "meta_xp_awarded",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "DOTALeaverStatus_t",
                    "name": "leaver_status",
                    "id": 16,
                    "options": {
                        "default": "DOTA_LEAVER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leaver_actions",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_def_index",
                    "id": 18
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "disabled_hero_id",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "partner_account_type",
                    "id": 21,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "enabled_hero_id",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GC_TEAM",
                    "name": "coach_team",
                    "id": 23,
                    "options": {
                        "default": "DOTA_GC_TEAM_GOOD_GUYS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "nexon_pc_bang_no",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "nexon_pc_bang_name",
                    "id": 25
                },
                {
                    "rule": "repeated",
                    "type": "CDOTALobbyMemberXPBonus",
                    "name": "xp_bonuses",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "rank_change",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "cameraman",
                    "id": 30
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "custom_game_product_ids",
                    "id": 31
                }
            ],
            "messages": [
                {
                    "name": "CDOTALobbyMemberXPBonus",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "xp_bonus",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "source_key",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CLobbyTeamDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_tag",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_base_logo",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_banner_logo",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "team_complete",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "guild_name",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "guild_tag",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "guild_logo",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "guild_base_logo",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "guild_banner_logo",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rank",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "rank_change",
                    "id": 16
                }
            ]
        },
        {
            "name": "CLobbyTimedRewardDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_supply_crate",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_timed_drop",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "origin",
                    "id": 6
                }
            ]
        },
        {
            "name": "CLobbyBroadcastChannelInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "language_code",
                    "id": 4
                }
            ]
        },
        {
            "name": "CSODOTALobby",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CDOTALobbyMember",
                    "name": "members",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CDOTALobbyMember",
                    "name": "left_members",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "leader_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_id",
                    "id": 6,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "pending_invites",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "State",
                    "name": "state",
                    "id": 4,
                    "options": {
                        "default": "UI"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "connect",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "LobbyType",
                    "name": "lobby_type",
                    "id": 12,
                    "options": {
                        "default": "INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_cheats",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "fill_with_bots",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "intro_mode",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_name",
                    "id": 16
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyTeamDetails",
                    "name": "team_details",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tutorial_lesson",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 21,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameState",
                    "name": "game_state",
                    "id": 22,
                    "options": {
                        "default": "DOTA_GAMERULES_STATE_INIT"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_spectators",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchgroup",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "DOTA_CM_PICK",
                    "name": "cm_pick",
                    "id": 28,
                    "options": {
                        "default": "DOTA_CM_RANDOM"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_spectating",
                    "id": 31,
                    "options": {
                        "default": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 36,
                    "options": {
                        "default": "BOT_DIFFICULTY_HARD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTAGameVersion",
                    "name": "game_version",
                    "id": 37,
                    "options": {
                        "default": "GAME_VERSION_CURRENT"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyTimedRewardDetails",
                    "name": "timed_reward_details",
                    "id": 38
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pass_key",
                    "id": 39
                },
                {
                    "rule": "repeated",
                    "type": "DOTABotDifficulty",
                    "name": "bot_slot_difficulty",
                    "id": 41
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 42
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "penalty_level_radiant",
                    "id": 43,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "penalty_level_dire",
                    "id": 44,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "load_game_id",
                    "id": 45
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_type",
                    "id": 46
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_series_wins",
                    "id": 47
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_series_wins",
                    "id": 48
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "loot_generated",
                    "id": 49
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "loot_awarded",
                    "id": 50
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allchat",
                    "id": 51,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "LobbyDotaTVDelay",
                    "name": "dota_tv_delay",
                    "id": 53,
                    "options": {
                        "default": "LobbyDotaTV_10"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_game_mode",
                    "id": 54
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_map_name",
                    "id": 55
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_difficulty",
                    "id": 56
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "lan",
                    "id": 57
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyBroadcastChannelInfo",
                    "name": "broadcast_channel_info",
                    "id": 58
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_leaver_accountid",
                    "id": 59
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_id",
                    "id": 60
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority",
                    "id": 61
                },
                {
                    "rule": "repeated",
                    "type": "CExtraMsg",
                    "name": "extra_messages",
                    "id": 62
                },
                {
                    "rule": "optional",
                    "type": "CDOTASaveGame",
                    "name": "save_game",
                    "id": 63
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "first_blood_happened",
                    "id": 65
                },
                {
                    "rule": "optional",
                    "type": "EMatchOutcome",
                    "name": "match_outcome",
                    "id": 70,
                    "options": {
                        "default": "k_EMatchOutcome_Unknown"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "mass_disconnect",
                    "id": 67
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 68
                },
                {
                    "rule": "repeated",
                    "type": "EIngameEvent",
                    "name": "active_ingame_events",
                    "id": 69
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_min_players",
                    "id": 71
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_max_players",
                    "id": 72
                },
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "partner_type",
                    "id": 73,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lan_host_ping_to_server_region",
                    "id": 74
                },
                {
                    "rule": "optional",
                    "type": "DOTALobbyVisibility",
                    "name": "visibility",
                    "id": 75,
                    "options": {
                        "default": "DOTALobbyVisibility_Public"
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_crc",
                    "id": 76
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "custom_game_auto_created_lobby",
                    "id": 77
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "custom_game_timestamp",
                    "id": 80
                }
            ],
            "messages": [
                {
                    "name": "CExtraMsg",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "contents",
                            "id": 2
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "State",
                    "values": [
                        {
                            "name": "UI",
                            "id": 0
                        },
                        {
                            "name": "READYUP",
                            "id": 4
                        },
                        {
                            "name": "SERVERSETUP",
                            "id": 1
                        },
                        {
                            "name": "RUN",
                            "id": 2
                        },
                        {
                            "name": "POSTGAME",
                            "id": 3
                        },
                        {
                            "name": "NOTREADY",
                            "id": 5
                        },
                        {
                            "name": "SERVERASSIGN",
                            "id": 6
                        }
                    ]
                },
                {
                    "name": "LobbyType",
                    "values": [
                        {
                            "name": "INVALID",
                            "id": -1
                        },
                        {
                            "name": "CASUAL_MATCH",
                            "id": 0
                        },
                        {
                            "name": "PRACTICE",
                            "id": 1
                        },
                        {
                            "name": "TOURNAMENT",
                            "id": 2
                        },
                        {
                            "name": "COOP_BOT_MATCH",
                            "id": 4
                        },
                        {
                            "name": "LEGACY_TEAM_MATCH",
                            "id": 5
                        },
                        {
                            "name": "LEGACY_SOLO_QUEUE_MATCH",
                            "id": 6
                        },
                        {
                            "name": "COMPETITIVE_MATCH",
                            "id": 7
                        },
                        {
                            "name": "CASUAL_1V1_MATCH",
                            "id": 8
                        },
                        {
                            "name": "WEEKEND_TOURNEY",
                            "id": 9
                        },
                        {
                            "name": "LOCAL_BOT_MATCH",
                            "id": 10
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgLobbyEventPoints",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "AccountPoints",
                    "name": "account_points",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "AccountPoints",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "normal_points",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "premium_points",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "owned",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "favorite_team",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "favorite_team_level",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "points_held",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "premium_points_held",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "favorite_team_foil_level",
                            "id": 9
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGenericResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTABroadcastNotification",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAPCBangTimedReward",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "itemdef",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pcbangname",
                    "id": 3
                }
            ]
        },
        {
            "name": "CAttribute_String",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "value",
                    "id": 1
                }
            ]
        },
        {
            "name": "CAttribute_ItemDynamicRecipeComponent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_quality",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_flags",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "attributes_string",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_count",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "items_fulfilled",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_rarity",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "lootlist",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "fulfilled_item_id",
                    "id": 9
                }
            ]
        },
        {
            "name": "CProtoItemHeroStatue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "status_effect_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sequence_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cycle",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "wearable",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "inscription",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "style",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_drop",
                    "id": 8
                }
            ]
        },
        {
            "name": "CProtoItemTeamShowcase",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "status_effect_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sequence_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cycle",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "wearable",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "inscription",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "style",
                    "id": 7
                }
            ]
        },
        {
            "name": "CProtoItemSocket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attr_def_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "required_type",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "required_hero",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gem_def_index",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "not_tradable",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "required_item_slot",
                    "id": 7
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Empty",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Effect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effect",
                    "id": 2
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Color",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "red",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "green",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "blue",
                    "id": 4
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Strange",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "strange_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "strange_value",
                    "id": 3
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Spectator",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "games_viewed",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "corporation_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CProtoItemSocket_AssetModifier",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "asset_modifier",
                    "id": 2
                }
            ]
        },
        {
            "name": "CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "asset_modifier",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "anim_modifier",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_effect",
                    "id": 4
                }
            ]
        },
        {
            "name": "CProtoItemSocket_Autograph",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "autograph",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "autograph_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CProtoItemSocket_StaticVisuals",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CProtoItemSocket",
                    "name": "socket",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMatchPlayerAbilityUpgrade",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMatchAdditionalUnitInventory",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "unit_name",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "items",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMatchHeroSelectEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_pick",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAProcessFantasyScheduledEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timestamp",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "season",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reference_data",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAHasItemQuery",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAHasItemResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_item",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAHasItemDefsQuery",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "itemdef_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAHasItemDefsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_items",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAConsumeFantasyTicket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAConsumeFantasyTicketFailure",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCToGCFantasySetMatchLeague",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CSODOTAMapLocationState",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "location_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "completed",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgNexonPartnerUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "messagetype",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timeremaining",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "terminate",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgMakeOffering",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestOfferings",
            "fields": []
        },
        {
            "name": "CMsgRequestOfferingsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "NewYearsOffering",
                    "name": "offerings",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "completed",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "NewYearsOffering",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "def_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgLeagueAdminList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPerfectWorldUserLookupRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "user_name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPerfectWorldUserLookupResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResultCode",
                    "name": "result_code",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS_ACCOUNT_FOUND"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "EResultCode",
                    "values": [
                        {
                            "name": "SUCCESS_ACCOUNT_FOUND",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNKNOWN",
                            "id": 1
                        },
                        {
                            "name": "ERROR_USER_NAME_WRONG_FORMAT",
                            "id": 2
                        },
                        {
                            "name": "ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND",
                            "id": 3
                        },
                        {
                            "name": "ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CCompendiumTimestampedData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gpm",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "xpm",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "kills",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deaths",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "item_purchases",
                    "id": 6
                }
            ]
        },
        {
            "name": "CCompendiumGameTimeline",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CCompendiumTimestampedData",
                    "name": "data",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "tags",
                    "id": 2
                }
            ]
        },
        {
            "name": "CCompendiumGameList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CCompendiumGameTimeline",
                    "name": "games",
                    "id": 1
                }
            ]
        },
        {
            "name": "CAdditionalEquipSlot",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "class_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTARedeemItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "currency_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "purchase_def",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTARedeemItemResponse",
            "fields": []
        },
        {
            "name": "CMsgDOTACombatLogEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTA_COMBATLOG_TYPES",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "DOTA_COMBATLOG_DAMAGE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_source_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attacker_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "damage_source_name",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "inflictor_name",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_attacker_illusion",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_attacker_hero",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_target_illusion",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_target_hero",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_visible_radiant",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_visible_dire",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "health",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "timestamp",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "stun_duration",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "slow_duration",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_ability_toggle_on",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_ability_toggle_off",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_level",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "location_x",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "location_y",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gold_reason",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "timestamp_raw",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "modifier_duration",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "xp_reason",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_hits",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attacker_team",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_team",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "obs_wards_placed",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assist_player0",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assist_player1",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assist_player2",
                    "id": 33
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assist_player3",
                    "id": 34
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "stack_count",
                    "id": 35
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "hidden_modifier",
                    "id": 36
                }
            ]
        },
        {
            "name": "CMsgDOTAProfileCard",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "background_def_index",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "Slot",
                    "name": "slots",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Slot",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "slot_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "Trophy",
                            "name": "trophy",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "Stat",
                            "name": "stat",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "Item",
                            "name": "item",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "Hero",
                            "name": "hero",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "Emoticon",
                            "name": "emoticon",
                            "id": 6
                        }
                    ],
                    "messages": [
                        {
                            "name": "Trophy",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "trophy_id",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "trophy_score",
                                    "id": 2
                                }
                            ]
                        },
                        {
                            "name": "Stat",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "EStatID",
                                    "name": "stat_id",
                                    "id": 1,
                                    "options": {
                                        "default": "k_eStat_SoloRank"
                                    }
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "stat_score",
                                    "id": 2
                                }
                            ]
                        },
                        {
                            "name": "Item",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "bytes",
                                    "name": "serialized_item",
                                    "id": 1
                                }
                            ]
                        },
                        {
                            "name": "Hero",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_id",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_wins",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_losses",
                                    "id": 3
                                }
                            ]
                        },
                        {
                            "name": "Emoticon",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "emoticon_id",
                                    "id": 1
                                }
                            ]
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EStatID",
                    "values": [
                        {
                            "name": "k_eStat_SoloRank",
                            "id": 1
                        },
                        {
                            "name": "k_eStat_PartyRank",
                            "id": 2
                        },
                        {
                            "name": "k_eStat_Wins",
                            "id": 3
                        },
                        {
                            "name": "k_eStat_Commends",
                            "id": 4
                        },
                        {
                            "name": "k_eStat_GamesPlayed",
                            "id": 5
                        },
                        {
                            "name": "k_eStat_FirstMatchDate",
                            "id": 6
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToClientNewBloomTimingUpdated",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_active",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "next_transition_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bonus_amount",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "standby_duration",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "transition_time",
                    "id": 5
                }
            ]
        },
        {
            "name": "CSODOTAPlayerChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_id",
                    "id": 3,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "challenge_type",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "int_param_0",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "int_param_1",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "created_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "completed",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sequence_id",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "challenge_tier",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 11
                }
            ],
            "enums": [
                {
                    "name": "EFlags",
                    "values": [
                        {
                            "name": "eFlag_InstantRerollUncompleted",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCRerollPlayerChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sequence_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCRerollPlayerChallengeResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "eResult_Success"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "eResult_Success",
                            "id": 0
                        },
                        {
                            "name": "eResult_Dropped",
                            "id": 1
                        },
                        {
                            "name": "eResult_NotFound",
                            "id": 2
                        },
                        {
                            "name": "eResult_CantReroll",
                            "id": 3
                        },
                        {
                            "name": "eResult_ServerError",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCTopCustomGamesList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "top_custom_games",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTARealtimeGameStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "MatchDetails",
                    "name": "match",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "TeamDetails",
                    "name": "teams",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "BuildingDetails",
                    "name": "buildings",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "GraphData",
                    "name": "graph_data",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "delta_frame",
                    "id": 5
                }
            ],
            "messages": [
                {
                    "name": "TeamDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_number",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_name",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "team_logo",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "score",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "PlayerDetails",
                            "name": "players",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "only_team",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "cheers",
                            "id": 8
                        }
                    ]
                },
                {
                    "name": "ItemDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "time",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "sold",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "stackcount",
                            "id": 5
                        }
                    ]
                },
                {
                    "name": "AbilityDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "level",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "HeroToHeroStats",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "victimid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "kills",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "assists",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "AbilityList",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "PlayerDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "accountid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "playerid",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "heroid",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "healthpoints",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "maxhealthpoints",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "healthregenrate",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "manapoints",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "maxmanapoints",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "manaregenrate",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "base_strength",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "base_agility",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "base_intelligence",
                            "id": 14
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "base_armor",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "base_movespeed",
                            "id": 16
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "base_damage",
                            "id": 17
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "strength",
                            "id": 18
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "agility",
                            "id": 19
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "intelligence",
                            "id": 20
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "armor",
                            "id": 21
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "movespeed",
                            "id": 22
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "damage",
                            "id": 23
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_damage",
                            "id": 24
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tower_damage",
                            "id": 25
                        },
                        {
                            "rule": "repeated",
                            "type": "AbilityDetails",
                            "name": "abilities",
                            "id": 26
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "level",
                            "id": 27
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "kill_count",
                            "id": 28
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "death_count",
                            "id": 29
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "assists_count",
                            "id": 30
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "denies_count",
                            "id": 31
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lh_count",
                            "id": 32
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_healing",
                            "id": 33
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold_per_min",
                            "id": 34
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "xp_per_min",
                            "id": 35
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "net_gold",
                            "id": 36
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold",
                            "id": 37
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "x",
                            "id": 38
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "y",
                            "id": 39
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "respawn_time",
                            "id": 40
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "ultimate_cooldown",
                            "id": 41
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "has_buyback",
                            "id": 42
                        },
                        {
                            "rule": "repeated",
                            "type": "ItemDetails",
                            "name": "items",
                            "id": 43
                        },
                        {
                            "rule": "repeated",
                            "type": "ItemDetails",
                            "name": "stashitems",
                            "id": 44
                        },
                        {
                            "rule": "repeated",
                            "type": "ItemDetails",
                            "name": "itemshoppinglist",
                            "id": 45
                        },
                        {
                            "rule": "repeated",
                            "type": "AbilityList",
                            "name": "levelpoints",
                            "id": 46
                        },
                        {
                            "rule": "repeated",
                            "type": "HeroToHeroStats",
                            "name": "hero_to_hero_stats",
                            "id": 47
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "has_ultimate",
                            "id": 48
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "has_ultimate_mana",
                            "id": 49
                        }
                    ]
                },
                {
                    "name": "BuildingDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "heading",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lane",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tier",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "x",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "y",
                            "id": 8
                        }
                    ]
                },
                {
                    "name": "KillDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "death_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "killer_player_id",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "BroadcasterDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "selected_hero",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "selected_graph",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "PickBanDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "MatchDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "server_steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "matchid",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "time_of_day",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "is_nightstalker_night",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "game_time",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "teamid_radiant",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "teamid_dire",
                            "id": 9
                        },
                        {
                            "rule": "repeated",
                            "type": "PickBanDetails",
                            "name": "picks",
                            "id": 10
                        },
                        {
                            "rule": "repeated",
                            "type": "PickBanDetails",
                            "name": "bans",
                            "id": 11
                        },
                        {
                            "rule": "repeated",
                            "type": "KillDetails",
                            "name": "kills",
                            "id": 12
                        },
                        {
                            "rule": "repeated",
                            "type": "BroadcasterDetails",
                            "name": "broadcasters",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_mode",
                            "id": 14
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "league_id",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "single_team",
                            "id": 16
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "cheers_peak",
                            "id": 17
                        }
                    ]
                },
                {
                    "name": "GraphData",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_gold",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_xp",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_kill",
                            "id": 3
                        },
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_tower",
                            "id": 4
                        },
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_rax",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "TeamLocationStats",
                            "name": "team_loc_stats",
                            "id": 6
                        }
                    ],
                    "messages": [
                        {
                            "name": "LocationStats",
                            "fields": [
                                {
                                    "rule": "repeated",
                                    "type": "int32",
                                    "name": "stats",
                                    "id": 1
                                }
                            ]
                        },
                        {
                            "name": "TeamLocationStats",
                            "fields": [
                                {
                                    "rule": "repeated",
                                    "type": "LocationStats",
                                    "name": "loc_stats",
                                    "id": 1
                                }
                            ]
                        }
                    ],
                    "enums": [
                        {
                            "name": "eStat",
                            "values": [
                                {
                                    "name": "CreepGoldEarned",
                                    "id": 0
                                },
                                {
                                    "name": "KillGoldEarned",
                                    "id": 1
                                },
                                {
                                    "name": "DeathAndBuybackGoldLost",
                                    "id": 2
                                },
                                {
                                    "name": "XPEarned",
                                    "id": 3
                                }
                            ]
                        },
                        {
                            "name": "eLocation",
                            "values": [
                                {
                                    "name": "BotLane",
                                    "id": 0
                                },
                                {
                                    "name": "MidLane",
                                    "id": 1
                                },
                                {
                                    "name": "TopLane",
                                    "id": 2
                                },
                                {
                                    "name": "Jungle",
                                    "id": 3
                                },
                                {
                                    "name": "Ancients",
                                    "id": 4
                                },
                                {
                                    "name": "Other",
                                    "id": 5
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARealtimeGameStatsTerse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "MatchDetails",
                    "name": "match",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "TeamDetails",
                    "name": "teams",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "BuildingDetails",
                    "name": "buildings",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "GraphData",
                    "name": "graph_data",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "delta_frame",
                    "id": 5
                }
            ],
            "messages": [
                {
                    "name": "TeamDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_number",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_name",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "team_logo",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "score",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "PlayerDetails",
                            "name": "players",
                            "id": 6
                        }
                    ]
                },
                {
                    "name": "PlayerDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "accountid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "playerid",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "heroid",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "level",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "kill_count",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "death_count",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "assists_count",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "denies_count",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lh_count",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "x",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "y",
                            "id": 14
                        }
                    ]
                },
                {
                    "name": "BuildingDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "heading",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lane",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tier",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "x",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "y",
                            "id": 7
                        }
                    ]
                },
                {
                    "name": "MatchDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "server_steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "matchid",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "game_time",
                            "id": 4
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "steam_broadcaster_account_ids",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_mode",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "league_id",
                            "id": 8
                        }
                    ]
                },
                {
                    "name": "GraphData",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "int32",
                            "name": "graph_gold",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgStartFindingMatch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchgroups",
                    "id": 2,
                    "options": {
                        "default": 4294967295
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_modes",
                    "id": 4,
                    "options": {
                        "default": 4294967295
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 5,
                    "options": {
                        "default": "BOT_DIFFICULTY_HARD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "MatchType",
                    "name": "match_type",
                    "id": 6,
                    "options": {
                        "default": "MATCH_TYPE_CASUAL"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matchlanguages",
                    "id": 7,
                    "options": {
                        "default": 4294967295
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "map_preference",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "MatchLanguages",
                    "name": "game_language_enum",
                    "id": 10,
                    "options": {
                        "default": "MATCH_LANGUAGE_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_language_name",
                    "id": 11
                }
            ]
        },
        {
            "name": "CMsgStopFindingMatch",
            "fields": []
        },
        {
            "name": "CMsgReadyUp",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTALobbyReadyState",
                    "name": "state",
                    "id": 1,
                    "options": {
                        "default": "DOTALobbyReadyState_UNDECLARED"
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "ready_up_key",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CDOTAClientHardwareSpecs",
                    "name": "hardware_specs",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgReadyUpStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "accepted_ids",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "declined_ids",
                    "id": 3
                }
            ]
        },
        {
            "name": "CSourceTVGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_public_addr",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_private_addr",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_port",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "good_players",
                    "id": 14
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "bad_players",
                    "id": 15
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "other_players",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_name",
                    "id": 7
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyTeamDetails",
                    "name": "team_details",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_spectators",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tower_state",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "tv_broadcast_time",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "game_time",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steamid",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 21,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lobby_type",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "average_rank",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_kills",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_kills",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "barracks_state",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "group_id",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "engine",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "broadcast_delay",
                    "id": 32
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSourceTVGameSmall",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "activate_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deactivate_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "server_steam_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lobby_type",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "game_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "delay",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spectators",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "average_mmr",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "engine",
                    "id": 12
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "hero_ids",
                    "id": 13
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steam_ids",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name_radiant",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name_dire",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "sort_score",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "last_update_time",
                    "id": 18
                }
            ]
        },
        {
            "name": "CMsgSourceTVGamesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CSourceTVGame",
                    "name": "games",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_total_games",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgFindSourceTVGames",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_games",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "heroid",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "team_game",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgClientToGCFindTopSourceTVGames",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_game",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_list_index",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "lobby_ids",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgGCToClientFindTopSourceTVGamesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_game",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_games",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_list_index",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "CSourceTVGameSmall",
                    "name": "game_list",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "specific_games",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgClientToGCTopLeagueMatchesRequest",
            "fields": []
        },
        {
            "name": "CMsgClientToGCTopFriendMatchesRequest",
            "fields": []
        },
        {
            "name": "CMsgClientToGCTopPubMatchesRequest",
            "fields": []
        },
        {
            "name": "CMsgGCToClientTopMatchesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Type",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "LEAGUES"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAMatch",
                    "name": "matches",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Type",
                    "values": [
                        {
                            "name": "LEAGUES",
                            "id": 1
                        },
                        {
                            "name": "FRIENDS",
                            "id": 2
                        },
                        {
                            "name": "PUBS",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCFindTopMatches",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_game",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "friend_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "friend_list",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "league_list",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgGCToClientFindTopLeagueMatchesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_game",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "match_ids",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAMatch",
                    "name": "matches",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSpectateFriendGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSpectateFriendGameResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steamid",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgAbandonCurrentGame",
            "fields": []
        },
        {
            "name": "CMsgClientSuspended",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_end",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbySetDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_name",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyTeamDetails",
                    "name": "team_details",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "DOTA_CM_PICK",
                    "name": "cm_pick",
                    "id": 6,
                    "options": {
                        "default": "DOTA_CM_RANDOM"
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 9,
                    "options": {
                        "default": "BOT_DIFFICULTY_MEDIUM"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_cheats",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "fill_with_bots",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "intro_mode",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_spectating",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "DOTAGameVersion",
                    "name": "game_version",
                    "id": 14,
                    "options": {
                        "default": "GAME_VERSION_CURRENT"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pass_key",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "penalty_level_radiant",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "penalty_level_dire",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "load_game_id",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_type",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_series_wins",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_series_wins",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allchat",
                    "id": 23,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "LobbyDotaTVDelay",
                    "name": "dota_tv_delay",
                    "id": 24,
                    "options": {
                        "default": "LobbyDotaTV_120"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "lan",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_game_mode",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_map_name",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_difficulty",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_min_players",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "custom_max_players",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lan_host_ping_to_server_region",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "DOTALobbyVisibility",
                    "name": "visibility",
                    "id": 33,
                    "options": {
                        "default": "DOTALobbyVisibility_Public"
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_crc",
                    "id": 34
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "custom_game_timestamp",
                    "id": 37
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyCreate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_game",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pass_key",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgPracticeLobbySetDetails",
                    "name": "lobby_details",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "SaveGame",
                    "name": "save_game",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "SaveGame",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "data",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "version",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "signature",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbySetTeamSlot",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTA_GC_TEAM",
                    "name": "team",
                    "id": 1,
                    "options": {
                        "default": "DOTA_GC_TEAM_GOOD_GUYS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 3,
                    "options": {
                        "default": "BOT_DIFFICULTY_PASSIVE"
                    }
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbySetCoach",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTA_GC_TEAM",
                    "name": "team",
                    "id": 1,
                    "options": {
                        "default": "DOTA_GC_TEAM_GOOD_GUYS"
                    }
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyJoinBroadcastChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "preferred_description",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "preferred_country_code",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "preferred_language_code",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyCloseBroadcastChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus",
            "fields": []
        },
        {
            "name": "CMsgPracticeLobbyKick",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyKickFromTeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyLeave",
            "fields": []
        },
        {
            "name": "CMsgPracticeLobbyLaunch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgApplyTeamToPracticeLobby",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClearPracticeLobbyTeam",
            "fields": []
        },
        {
            "name": "CMsgPracticeLobbyList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_games",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pass_key",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "region",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 4,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyListResponseEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyMember",
                    "name": "members",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "requires_pass_key",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leader_account_id",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "guild_logo",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_game_mode",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 12,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "friend_present",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "players",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_map_name",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_player_count",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lan_host_ping_to_server_region",
                    "id": 18
                }
            ],
            "messages": [
                {
                    "name": "CLobbyMember",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "player_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyListResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_games",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgPracticeLobbyListResponseEntry",
                    "name": "lobbies",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgLobbyList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 1,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 2,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                }
            ]
        },
        {
            "name": "CMsgLobbyListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgPracticeLobbyListResponseEntry",
                    "name": "lobbies",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyJoin",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "pass_key",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_crc",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "custom_game_timestamp",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgPracticeLobbyJoinResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTAJoinLobbyResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "DOTA_JOIN_RESULT_SUCCESS"
                    }
                }
            ]
        },
        {
            "name": "CMsgFriendPracticeLobbyListRequest",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "friends",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgFriendPracticeLobbyListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgPracticeLobbyListResponseEntry",
                    "name": "lobbies",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGuildmatePracticeLobbyListRequest",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "guilds",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGuildmatePracticeLobbyListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgPracticeLobbyListResponseEntry",
                    "name": "lobbies",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomGameModesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomGameModesResponseEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lobby_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_count",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomGameModesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgJoinableCustomGameModesResponseEntry",
                    "name": "game_modes",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomLobbiesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomLobbiesResponseEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "lobby_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "member_count",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leader_account_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "leader_name",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_map_name",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_player_count",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lan_host_ping_to_server_region",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_pass_key",
                    "id": 11
                }
            ]
        },
        {
            "name": "CMsgJoinableCustomLobbiesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgJoinableCustomLobbiesResponseEntry",
                    "name": "lobbies",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgQuickJoinCustomLobby",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPracticeLobbySetDetails",
                    "name": "create_lobby_details",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_any_map",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "RegionPing",
                    "name": "region_pings",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "RegionPing",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "server_region",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "ping",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "region_code",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgQuickJoinCustomLobbyResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTAJoinLobbyResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "DOTA_JOIN_RESULT_SUCCESS"
                    }
                }
            ]
        },
        {
            "name": "CMsgBotGameCreate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "difficulty",
                    "id": 3,
                    "options": {
                        "default": "BOT_DIFFICULTY_PASSIVE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GC_TEAM",
                    "name": "team",
                    "id": 4,
                    "options": {
                        "default": "DOTA_GC_TEAM_GOOD_GUYS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgCustomGameCreate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "difficulty",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_mode",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "map",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgEventGameCreate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "search_key",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "difficulty",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "game_mode",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "map",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgRequestInternationalTicket",
            "fields": []
        },
        {
            "name": "CMsgBalancedShuffleLobby",
            "fields": []
        },
        {
            "name": "CMsgInitialQuestionnaireResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "initial_skill",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTATournament",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Team",
                    "name": "teams",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Game",
                    "name": "games",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "gid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "ETournamentType",
                    "name": "tournament_type",
                    "id": 5,
                    "options": {
                        "default": "k_ETournamentType_Unknown"
                    }
                },
                {
                    "rule": "optional",
                    "type": "ETournamentTemplate",
                    "name": "tournament_template",
                    "id": 6,
                    "options": {
                        "default": "k_ETournamentTemplate_None"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "ETournamentState",
                    "name": "state",
                    "id": 9,
                    "options": {
                        "default": "k_ETournamentState_Unknown"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Node",
                    "name": "nodes",
                    "id": 10
                }
            ],
            "messages": [
                {
                    "name": "Team",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_abbrev",
                            "id": 3
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "players",
                            "id": 4,
                            "options": {
                                "packed": true
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "seed",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "team_logo",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country_code",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "node_or_state",
                            "id": 8
                        }
                    ]
                },
                {
                    "name": "Game",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "good_team_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "bad_team_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "good_team_seed",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "bad_team_seed",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "lobby_id",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "match_id",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "game_name",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "live_stream",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "message",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "results_final",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "ETournamentGameState",
                            "name": "state",
                            "id": 14,
                            "options": {
                                "default": "k_ETournamentGameState_Unknown"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "node_id",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "start_time",
                            "id": 16
                        }
                    ]
                },
                {
                    "name": "Node",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "node_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_seed_a",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_seed_b",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "winner_node",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "loser_node",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_type",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "ETournamentNodeState",
                            "name": "node_state",
                            "id": 8,
                            "options": {
                                "default": "k_ETournamentNodeState_Unknown"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_id",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "start_time",
                            "id": 16
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATournamentRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "client_tournament_gid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTATournamentResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTATournament",
                    "name": "tournament",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAClearTournamentGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAMatch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "good_guys_win",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "duration",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "startTime",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "players",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "tower_status",
                    "id": 8
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "barracks_status",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cluster",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_time",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "replay_salt",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_ip",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_port",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lobby_type",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "human_players",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "average_skill",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "game_balance",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_team_id",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_team_id",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "radiant_team_name",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "dire_team_name",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "radiant_team_logo",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "dire_team_logo",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_team_complete",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_team_complete",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "positive_votes",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "negative_votes",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 31,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CMatchHeroSelectEvent",
                    "name": "picks_bans",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_seq_num",
                    "id": 33
                },
                {
                    "rule": "optional",
                    "type": "ReplayState",
                    "name": "replay_state",
                    "id": 34,
                    "options": {
                        "default": "REPLAY_AVAILABLE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_guild_id",
                    "id": 35
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_guild_id",
                    "id": 36
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "radiant_team_tag",
                    "id": 37
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "dire_team_tag",
                    "id": 38
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_id",
                    "id": 39
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_type",
                    "id": 40
                },
                {
                    "rule": "repeated",
                    "type": "BroadcasterChannel",
                    "name": "broadcaster_channels",
                    "id": 43
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "engine",
                    "id": 44
                },
                {
                    "rule": "optional",
                    "type": "CustomGameData",
                    "name": "custom_game_data",
                    "id": 45
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_slot",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_0",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_1",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_2",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_3",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_4",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_5",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "expected_team_contribution",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "scaled_metric",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "previous_rank",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "rank_change",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "solo_rank",
                            "id": 49
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "kills",
                            "id": 14
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "deaths",
                            "id": 15
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "assists",
                            "id": 16
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "leaver_status",
                            "id": 17
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold",
                            "id": 18
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "last_hits",
                            "id": 19
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "denies",
                            "id": 20
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold_per_min",
                            "id": 21
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "XP_per_min",
                            "id": 22
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold_spent",
                            "id": 23
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_damage",
                            "id": 24
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tower_damage",
                            "id": 25
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_healing",
                            "id": 26
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "level",
                            "id": 27
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_last_seen",
                            "id": 28
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "player_name",
                            "id": 29
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "support_ability_value",
                            "id": 30
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "feeding_detected",
                            "id": 32
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "search_rank",
                            "id": 34
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "search_rank_uncertainty",
                            "id": 35
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "rank_uncertainty_change",
                            "id": 36
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_play_count",
                            "id": 37
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "party_id",
                            "id": 38
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "scaled_kills",
                            "id": 39
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "scaled_deaths",
                            "id": 40
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "scaled_assists",
                            "id": 41
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "claimed_farm_gold",
                            "id": 42
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "support_gold",
                            "id": 43
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "claimed_denies",
                            "id": 44
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "claimed_misses",
                            "id": 45
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "misses",
                            "id": 46
                        },
                        {
                            "rule": "repeated",
                            "type": "CMatchPlayerAbilityUpgrade",
                            "name": "ability_upgrades",
                            "id": 47
                        },
                        {
                            "rule": "repeated",
                            "type": "CMatchAdditionalUnitInventory",
                            "name": "additional_units_inventory",
                            "id": 48
                        },
                        {
                            "rule": "optional",
                            "type": "CustomGameData",
                            "name": "custom_game_data",
                            "id": 50
                        }
                    ],
                    "messages": [
                        {
                            "name": "CustomGameData",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "dota_team",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "bool",
                                    "name": "winner",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "BroadcasterInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "BroadcasterChannel",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country_code",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "description",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "BroadcasterInfo",
                            "name": "broadcaster_infos",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "language_code",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "CustomGameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "custom_game_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "map_name",
                            "id": 2
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "ReplayState",
                    "values": [
                        {
                            "name": "REPLAY_AVAILABLE",
                            "id": 0
                        },
                        {
                            "name": "REPLAY_NOT_RECORDED",
                            "id": 1
                        },
                        {
                            "name": "REPLAY_EXPIRED",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAPlayerMatchHistory",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "match_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAMatchHistoryFilter",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "match_ids",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "newest_match_id_at_last_query",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_last_query",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTARequestMatches",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_mode",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "date_min",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "date_max",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matches_requested",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "start_at_match_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "min_players",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "request_id",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_games_only",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "SkillLevel",
                    "name": "skill",
                    "id": 17,
                    "options": {
                        "default": "Any"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 20
                }
            ],
            "enums": [
                {
                    "name": "SkillLevel",
                    "values": [
                        {
                            "name": "Any",
                            "id": 0
                        },
                        {
                            "name": "Normal",
                            "id": 1
                        },
                        {
                            "name": "High",
                            "id": 2
                        },
                        {
                            "name": "VeryHigh",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARequestMatchesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAMatch",
                    "name": "matches",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Series",
                    "name": "series",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "request_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_results",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "results_remaining",
                    "id": 5
                }
            ],
            "messages": [
                {
                    "name": "Series",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "CMsgDOTAMatch",
                            "name": "matches",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_type",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAPopup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "PopupID",
                    "name": "id",
                    "id": 1,
                    "options": {
                        "default": "KICKED_FROM_LOBBY"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "custom_text",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "int_data",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "popup_data",
                    "id": 4
                }
            ],
            "enums": [
                {
                    "name": "PopupID",
                    "values": [
                        {
                            "name": "KICKED_FROM_LOBBY",
                            "id": 0
                        },
                        {
                            "name": "KICKED_FROM_PARTY",
                            "id": 1
                        },
                        {
                            "name": "KICKED_FROM_TEAM",
                            "id": 2
                        },
                        {
                            "name": "TEAM_WAS_DISBANDED",
                            "id": 3
                        },
                        {
                            "name": "TEAM_MATCHMAKE_ALREADY_MATCH",
                            "id": 4
                        },
                        {
                            "name": "TEAM_MATCHMAKE_ALREADY_FINDING",
                            "id": 5
                        },
                        {
                            "name": "TEAM_MATCHMAKE_FULL",
                            "id": 6
                        },
                        {
                            "name": "TEAM_MATCHMAKE_FAIL_ADD",
                            "id": 7
                        },
                        {
                            "name": "TEAM_MATCHMAKE_FAIL_ADD_CURRENT",
                            "id": 8
                        },
                        {
                            "name": "TEAM_MATCHMAKE_FAILED_TEAM_MEMBER",
                            "id": 9
                        },
                        {
                            "name": "TEAM_MATCHMAKE_ALREADY_GAME",
                            "id": 10
                        },
                        {
                            "name": "TEAM_MATCHMAKE_FAIL_GET_PARTY",
                            "id": 11
                        },
                        {
                            "name": "MATCHMAKING_DISABLED",
                            "id": 12
                        },
                        {
                            "name": "INVITE_DENIED",
                            "id": 13
                        },
                        {
                            "name": "PARTY_FULL",
                            "id": 14
                        },
                        {
                            "name": "MADE_ADMIN",
                            "id": 15
                        },
                        {
                            "name": "NEED_TO_PURCHASE",
                            "id": 16
                        },
                        {
                            "name": "SIGNON_MESSAGE",
                            "id": 17
                        },
                        {
                            "name": "GUILD_KICKED",
                            "id": 18
                        },
                        {
                            "name": "MATCHMAKING_REGION_OFFLINE",
                            "id": 19
                        },
                        {
                            "name": "TOO_MANY_MATCHGROUPS",
                            "id": 20
                        },
                        {
                            "name": "TOURNAMENT_GAME_NOT_FOUND",
                            "id": 21
                        },
                        {
                            "name": "TOURNAMENT_GAME_HAS_LOBBY_ID",
                            "id": 22
                        },
                        {
                            "name": "TOURNAMENT_GAME_HAS_MATCH_ID",
                            "id": 23
                        },
                        {
                            "name": "TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM",
                            "id": 24
                        },
                        {
                            "name": "TOURNAMENT_GAME_HAS_NO_DIRE_TEAM",
                            "id": 25
                        },
                        {
                            "name": "TOURNAMENT_GAME_SQL_UPDATE_FAILED",
                            "id": 26
                        },
                        {
                            "name": "NOT_LEAGUE_ADMIN",
                            "id": 27
                        },
                        {
                            "name": "PARTY_NOT_VALID_TO_MM",
                            "id": 28
                        },
                        {
                            "name": "PARTY_NOT_VALID_TO_MM_COACHCOUNT",
                            "id": 29
                        },
                        {
                            "name": "PARTY_MEMBER_IN_ANOTHER_GAME",
                            "id": 30
                        },
                        {
                            "name": "PARTY_MEMBER_IN_LOW_PRIORITY",
                            "id": 31
                        },
                        {
                            "name": "CLIENT_OUT_OF_DATE",
                            "id": 32
                        },
                        {
                            "name": "COMPETITIVE_MM_NO_COACHES",
                            "id": 33
                        },
                        {
                            "name": "COMPETITIVE_MM_NO_LOW_PRIORITY",
                            "id": 34
                        },
                        {
                            "name": "COMPETITIVE_MM_NOT_UNLOCKED",
                            "id": 35
                        },
                        {
                            "name": "COMPETITIVE_MM_GAME_MODE_NOT_ALLOWED",
                            "id": 36
                        },
                        {
                            "name": "GAME_MODE_NOT_UNLOCKED",
                            "id": 37
                        },
                        {
                            "name": "SAVE_GAME_CORRUPT",
                            "id": 38
                        },
                        {
                            "name": "INSUFFICIENT_INGOTS",
                            "id": 39
                        },
                        {
                            "name": "COMPETITIVE_MM_NO_4STACKS",
                            "id": 40
                        },
                        {
                            "name": "COMPETITIVE_MM_PARTY_MMR_SPREAD_TOO_LARGE",
                            "id": 41
                        },
                        {
                            "name": "COMPETITIVE_MM_NOT_ENOUGH_SKILL_DATA_PLAY_MORE_CASUAL",
                            "id": 42
                        },
                        {
                            "name": "COMPETITIVE_MM_NOT_ENOUGH_SKILL_DATA_IN_PARTY",
                            "id": 43
                        },
                        {
                            "name": "PARTY_LEADER_JOINED_LOBBY",
                            "id": 44
                        },
                        {
                            "name": "MM_1V1_NO_PARTIES",
                            "id": 45
                        },
                        {
                            "name": "MM_1V1_NO_LOW_PRIORITY",
                            "id": 46
                        },
                        {
                            "name": "WEEKEND_TOURNEY_REGISTRATION_NOT_OPEN",
                            "id": 47
                        },
                        {
                            "name": "WEEKEND_TOURNEY_UNMATCHED",
                            "id": 48
                        },
                        {
                            "name": "POST_MATCH_SURVEY",
                            "id": 49
                        },
                        {
                            "name": "TROPHY_AWARDED",
                            "id": 50
                        },
                        {
                            "name": "TROPHY_LEVEL_UP",
                            "id": 51
                        },
                        {
                            "name": "ALL_HERO_CHALLENGE_PROGRESS",
                            "id": 52
                        },
                        {
                            "name": "NEED_INITIAL_SKILL",
                            "id": 53
                        },
                        {
                            "name": "NEED_INITIAL_SKILL_IN_PARTY",
                            "id": 54
                        },
                        {
                            "name": "TARGET_ENGINE_MISMATCH",
                            "id": 55
                        },
                        {
                            "name": "VAC_NOT_VERIFIED",
                            "id": 56
                        },
                        {
                            "name": "KICKED_FROM_QUEUE_EVENT_STARTING",
                            "id": 57
                        },
                        {
                            "name": "KICKED_FROM_QUEUE_EVENT_ENDING",
                            "id": 58
                        },
                        {
                            "name": "EVENT_NO_LOW_PRIORITY",
                            "id": 59
                        },
                        {
                            "name": "MM_LOW_PRI_ONLY_CASUAL_AR",
                            "id": 60
                        },
                        {
                            "name": "CNY2015_ONCE_PER_ROUND",
                            "id": 61
                        },
                        {
                            "name": "LOBBY_FULL",
                            "id": 62
                        },
                        {
                            "name": "TI2015_POINTS_EARNED",
                            "id": 63
                        },
                        {
                            "name": "CUSTOM_GAME_INCORRECT_VERSION",
                            "id": 64
                        },
                        {
                            "name": "COMPETITIVE_MM_MMR_TOO_HIGH_S2",
                            "id": 65
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamMemberSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "team_ids",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "profile_team_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTATeamAdminSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "team_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTATeamMember",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_joined",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTATeam",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTATeamMember",
                    "name": "members",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tag",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "admin_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_created",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "disbanded",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "wins",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "losses",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rank",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "calibration_games_remaining",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "sponsor_logo",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fullgamesplayed",
                    "id": 17
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "leagues",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gamesplayed",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gamesplayedwithcurrentroster",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "teammatchmakinggamesplayed",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lastplayedgametime",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lastrenametime",
                    "id": 23
                }
            ]
        },
        {
            "name": "CMsgDOTACreateTeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tag",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "sponsor_logo",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgDOTACreateTeamResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Result",
                    "name": "results",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_remaining",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "required_level",
                    "id": 4
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "INVALID",
                            "id": -1
                        },
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "NAME_EMPTY",
                            "id": 1
                        },
                        {
                            "name": "NAME_BAD_CHARACTERS",
                            "id": 2
                        },
                        {
                            "name": "NAME_TAKEN",
                            "id": 3
                        },
                        {
                            "name": "NAME_TOO_LONG",
                            "id": 4
                        },
                        {
                            "name": "TAG_EMPTY",
                            "id": 5
                        },
                        {
                            "name": "TAG_BAD_CHARACTERS",
                            "id": 6
                        },
                        {
                            "name": "TAG_TAKEN",
                            "id": 7
                        },
                        {
                            "name": "TAG_TOO_LONG",
                            "id": 8
                        },
                        {
                            "name": "CREATOR_BUSY",
                            "id": 9
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 10
                        },
                        {
                            "name": "CREATOR_TEAM_LIMIT_REACHED",
                            "id": 11
                        },
                        {
                            "name": "NO_LOGO",
                            "id": 12
                        },
                        {
                            "name": "CREATOR_TEAM_CREATION_COOLDOWN",
                            "id": 13
                        },
                        {
                            "name": "LOGO_UPLOAD_FAILED",
                            "id": 14
                        },
                        {
                            "name": "NAME_CHANGED_TOO_RECENTLY",
                            "id": 15
                        },
                        {
                            "name": "CREATOR_INSUFFICIENT_LEVEL",
                            "id": 16
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAEditTeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tag",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "sponsor_logo",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgDOTAEditTeamLogo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "sponsor_logo",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAEditTeamLogoResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Result",
                    "name": "results",
                    "id": 1
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "INVALID",
                            "id": -1
                        },
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "CREATOR_BUSY",
                            "id": 9
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 10
                        },
                        {
                            "name": "NO_LOGO",
                            "id": 12
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAEditTeamDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAEditTeamDetailsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Result",
                    "name": "results",
                    "id": 1
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "INVALID",
                            "id": -1
                        },
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "CREATOR_BUSY",
                            "id": 9
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 10
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTADisbandTeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTADisbandTeamResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "FAILURE",
                            "id": 1
                        },
                        {
                            "name": "FAILURE_NOT_EMPTY",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARequestTeamData",
            "fields": []
        },
        {
            "name": "CMsgDOTARequestTeamDataResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTATeamData",
                    "name": "data",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "FAILURE",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "on_team",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "profile_team",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTATeam",
                    "name": "team",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTATeamProfileRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTATeamMemberProfileRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTATeamIDByNameRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTATeamIDByNameResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTATeamProfileResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTATeam",
                    "name": "team",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAProTeamListRequest",
            "fields": []
        },
        {
            "name": "CMsgDOTAProTeamListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "TeamEntry",
                    "name": "teams",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "TeamEntry",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "tag",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_created",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "logo",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country_code",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "member_count",
                            "id": 6
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_InviterToGC",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_GCImmediateResponseToInviter",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "invitee_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "required_level",
                    "id": 3
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "MEMBER_LIMIT",
                            "id": 1
                        },
                        {
                            "name": "INVITEE_NOT_AVAILABLE",
                            "id": 2
                        },
                        {
                            "name": "INVITEE_BUSY",
                            "id": 3
                        },
                        {
                            "name": "INVITEE_ALREADY_ON_THE_TEAM",
                            "id": 4
                        },
                        {
                            "name": "INVITEE_ALREADY_ON_TOO_MANY_TEAMS",
                            "id": 5
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 6
                        },
                        {
                            "name": "INVITEE_INSUFFICIENT_LEVEL",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_GCRequestToInvitee",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "inviter_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_tag",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_InviteeResponseToGC",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "JOIN"
                    }
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "JOIN",
                            "id": 0
                        },
                        {
                            "name": "REJECT",
                            "id": 1
                        },
                        {
                            "name": "TIMEOUT",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_GCResponseToInviter",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "JOINED"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "invitee_name",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "JOINED",
                            "id": 0
                        },
                        {
                            "name": "REJECTION",
                            "id": 1
                        },
                        {
                            "name": "TIMEOUT",
                            "id": 2
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamInvite_GCResponseToInvitee",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "FAILURE",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATeamOnProfile",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "enabled",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAKickTeamMember",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAKickTeamMemberResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "FAILURE",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTATransferTeamAdmin",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "new_admin_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTATransferTeamAdminResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "invitee_name",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "NOT_ADMIN",
                            "id": 1
                        },
                        {
                            "name": "ON_OTHER_TEAM",
                            "id": 2
                        },
                        {
                            "name": "ADMIN_OF_OTHER_TEAM",
                            "id": 3
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTALeaveTeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTALeaveTeamResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "FAILURE",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTABetaParticipation",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "access_rights",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAJoinChatChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "channel_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTAChatChannelType_t",
                    "name": "channel_type",
                    "id": 4,
                    "options": {
                        "default": "DOTAChannelType_Regional"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTALeaveChatChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "channel_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAClientIgnoredUser",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ignored_account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAChatMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "channel_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timestamp",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "suggest_invite_account_id",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "suggest_invite_name",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_draft_owner_account_id",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_draft_player_account_id",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "suggest_invite_to_lobby",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_points",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 13,
                    "options": {
                        "default": -1
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAChatMember",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona_name",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAJoinChatChannelResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "response",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "channel_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_members",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAChatMember",
                    "name": "members",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAChatChannelFullUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAChatMember",
                    "name": "members",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAOtherJoinedChatChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAOtherLeftChatChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAChatChannelMemberUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "left_steam_ids",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "JoinedMember",
                    "name": "joined_members",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "JoinedMember",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "persona_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARequestChatChannelList",
            "fields": []
        },
        {
            "name": "CMsgDOTARequestChatChannelListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "ChatChannel",
                    "name": "channels",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "ChatChannel",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "channel_name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_members",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "DOTAChatChannelType_t",
                            "name": "channel_type",
                            "id": 3,
                            "options": {
                                "default": "DOTAChannelType_Regional"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAChatGetUserList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAChatGetUserListResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Member",
                    "name": "members",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Member",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "persona_name",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAChatGetMemberCount",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "channel_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTAChatChannelType_t",
                    "name": "channel_type",
                    "id": 2,
                    "options": {
                        "default": "DOTAChannelType_Regional"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAChatGetMemberCountResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "channel_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTAChatChannelType_t",
                    "name": "channel_type",
                    "id": 2,
                    "options": {
                        "default": "DOTAChannelType_Regional"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "member_count",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tag",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_created",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_disbanded",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 8
                },
                {
                    "rule": "repeated",
                    "type": "Member",
                    "name": "members",
                    "id": 9
                },
                {
                    "rule": "repeated",
                    "type": "Invitation",
                    "name": "invitations",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "incremental",
                    "id": 12
                }
            ],
            "messages": [
                {
                    "name": "Member",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_joined",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "role",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "Invitation",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_sent",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id_sender",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildAuditSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Entry",
                    "name": "entries",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Entry",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "event_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "action",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id_requestor",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id_target",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "reference_data_a",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "reference_data_b",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAAccountGuildMembershipsSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Membership",
                    "name": "memberships",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "Invitation",
                    "name": "invitations",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Membership",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "guild_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "role",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "Invitation",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "guild_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_sent",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id_sender",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildCreateRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "tag",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildCreateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "EError",
                    "name": "errors",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "EError",
                    "values": [
                        {
                            "name": "UNSPECIFIED",
                            "id": 0
                        },
                        {
                            "name": "NAME_EMPTY",
                            "id": 1
                        },
                        {
                            "name": "NAME_BAD_CHARACTERS",
                            "id": 2
                        },
                        {
                            "name": "NAME_TOO_LONG",
                            "id": 3
                        },
                        {
                            "name": "NAME_TAKEN",
                            "id": 4
                        },
                        {
                            "name": "TAG_EMPTY",
                            "id": 5
                        },
                        {
                            "name": "TAG_BAD_CHARACTERS",
                            "id": 6
                        },
                        {
                            "name": "TAG_TOO_LONG",
                            "id": 7
                        },
                        {
                            "name": "ACCOUNT_TOO_MANY_GUILDS",
                            "id": 8
                        },
                        {
                            "name": "LOGO_UPLOAD_FAILED",
                            "id": 9
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildSetAccountRoleRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_role",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildSetAccountRoleResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_NO_OTHER_LEADER",
                            "id": 3
                        },
                        {
                            "name": "ERROR_ACCOUNT_TOO_MANY_GUILDS",
                            "id": 4
                        },
                        {
                            "name": "ERROR_GUILD_TOO_MANY_MEMBERS",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildInviteAccountRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildInviteAccountResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_ACCOUNT_ALREADY_INVITED",
                            "id": 3
                        },
                        {
                            "name": "ERROR_ACCOUNT_ALREADY_IN_GUILD",
                            "id": 4
                        },
                        {
                            "name": "ERROR_ACCOUNT_TOO_MANY_INVITES",
                            "id": 5
                        },
                        {
                            "name": "ERROR_GUILD_TOO_MANY_INVITES",
                            "id": 6
                        },
                        {
                            "name": "ERROR_ACCOUNT_TOO_MANY_GUILDS",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildCancelInviteRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildCancelInviteResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildUpdateDetailsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "base_logo",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "banner_logo",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildUpdateDetailsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGCToGCUpdateOpenGuildPartyRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "member_account_ids",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAGCToGCUpdateOpenGuildPartyResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "maintain_association",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAGCToGCDestroyOpenGuildPartyRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGCToGCDestroyOpenGuildPartyResponse",
            "fields": []
        },
        {
            "name": "CMsgDOTAPartySetOpenGuildRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAPartySetOpenGuildResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAJoinOpenGuildPartyRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "party_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAJoinOpenGuildPartyResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildOpenPartyRefresh",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "OpenParty",
                    "name": "open_parties",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "OpenParty",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "party_id",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "member_account_ids",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_created",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "description",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARequestGuildData",
            "fields": []
        },
        {
            "name": "CMsgDOTAGuildInviteData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "invited_to_guild",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "guild_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "guild_tag",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "inviter",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "inviter_name",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "member_count",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildUpdateMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildEditLogoRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGuildEditLogoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "guild_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 2,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "NO_PERMISSION",
                            "id": 1
                        },
                        {
                            "name": "LOGO_UPLOAD_FAILED",
                            "id": 2
                        },
                        {
                            "name": "UNSPECIFIED_ERROR",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAReportsRemainingRequest",
            "fields": []
        },
        {
            "name": "CMsgDOTAReportsRemainingResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_positive_reports_remaining",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_negative_reports_remaining",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_positive_reports_total",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_negative_reports_total",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTASubmitPlayerReport",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "report_flags",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "comment",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTASubmitPlayerReportResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "report_flags",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAReportCountsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAReportCountsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leadership_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "teaching_count",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "friendly_count",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "forgiving_count",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAKickedFromMatchmakingQueue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "MatchType",
                    "name": "match_type",
                    "id": 1,
                    "options": {
                        "default": "MATCH_TYPE_CASUAL"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTARequestSaveGames",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTARequestSaveGamesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CDOTASaveGame",
                    "name": "save_games",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgWatchGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steamid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "watch_server_steamid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgCancelWatchGame",
            "fields": []
        },
        {
            "name": "CMsgWatchGameResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "WatchGameResult",
                    "name": "watch_game_result",
                    "id": 1,
                    "options": {
                        "default": "PENDING"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_public_addr",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_private_addr",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_port",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "game_server_steamid",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "watch_server_steamid",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "watch_tv_unique_secret_code",
                    "id": 7
                }
            ],
            "enums": [
                {
                    "name": "WatchGameResult",
                    "values": [
                        {
                            "name": "PENDING",
                            "id": 0
                        },
                        {
                            "name": "READY",
                            "id": 1
                        },
                        {
                            "name": "GAMESERVERNOTFOUND",
                            "id": 2
                        },
                        {
                            "name": "UNAVAILABLE",
                            "id": 3
                        },
                        {
                            "name": "CANCELLED",
                            "id": 4
                        },
                        {
                            "name": "INCOMPATIBLEVERSION",
                            "id": 5
                        },
                        {
                            "name": "MISSINGLEAGUESUBSCRIPTION",
                            "id": 6
                        },
                        {
                            "name": "LOBBYNOTFOUND",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgPartyLeaderWatchGamePrompt",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "game_server_steamid",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgGCMatchDetailsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCMatchDetailsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTAMatch",
                    "name": "match",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTAMatchVote",
                    "name": "vote",
                    "id": 3,
                    "options": {
                        "default": "DOTAMatchVote_INVALID"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAProfileRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "request_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "ESourceEngine",
                    "name": "engine",
                    "id": 3,
                    "options": {
                        "default": "k_ESE_Source1"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAProfileResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CSODOTAGameAccountClient",
                    "name": "game_account_client",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAMatch",
                    "name": "latest_matches",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "PlayedHero",
                    "name": "heroes",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "player_name",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_tag",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_logo",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "ShowcaseHero",
                    "name": "showcase_hero",
                    "id": 9
                },
                {
                    "rule": "repeated",
                    "type": "LeaguePass",
                    "name": "league_passes",
                    "id": 10
                },
                {
                    "rule": "repeated",
                    "type": "EventTicket",
                    "name": "event_tickets",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "has_passport",
                    "id": 13
                },
                {
                    "rule": "repeated",
                    "type": "FeaturedItem",
                    "name": "featured_items",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "abandon_percent",
                    "id": 15
                }
            ],
            "messages": [
                {
                    "name": "PlayedHero",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "wins",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "ShowcaseHero",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "bytes",
                            "name": "object_data",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "LeaguePass",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "league_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_def",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "EventTicket",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "event_id",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "FeaturedItem",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "object_data",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "slot_index",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCSteamProfileRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCSteamProfileRequestResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAClearNotifySuccessfulReport",
            "fields": []
        },
        {
            "name": "CMsgDOTAWelcome",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_admin",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_broadcaster",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "store_item_hash",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timeplayedconsecutively",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_3rd_party_match_history",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "PartnerAccountType",
                    "name": "partner_account_type",
                    "id": 8,
                    "options": {
                        "default": "PARTNER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "banned_word_list_word_id",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "partner_account_state",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_time_played",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_ip_address",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "shutdownlawterminateminutes",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "banned_word_list_version",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "profile_private",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "currency",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bang_no",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "should_request_player_origin",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "compendium_unlocks",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gc_socache_file_version",
                    "id": 22
                },
                {
                    "rule": "repeated",
                    "type": "LocalizationDigest",
                    "name": "localization_digests",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_perfect_world_test_account",
                    "id": 24
                },
                {
                    "rule": "repeated",
                    "type": "EIngameEvent",
                    "name": "active_events",
                    "id": 25
                },
                {
                    "rule": "repeated",
                    "type": "CExtraMsg",
                    "name": "extra_messages",
                    "id": 26
                }
            ],
            "messages": [
                {
                    "name": "LocalizationDigest",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "context",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgSHA1Digest",
                            "name": "english_language_file_sha1",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgSHA1Digest",
                            "name": "client_language_file_sha1",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "CExtraMsg",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "contents",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CSODOTAGameHeroFavorites",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 2,
                    "options": {
                        "(key_field)": true
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAHeroFavoritesAdd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAHeroFavoritesRemove",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSetShowcaseHero",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "showcase_hero_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSetFeaturedItems",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "featured_item_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFeaturedItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "featured_item_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "bytes",
                    "name": "object_data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgRequestLeagueInfo",
            "fields": []
        },
        {
            "name": "CLeague",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "live",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "lastgametime",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_pool_usd",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "compendium_is_public",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "content_version",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgResponseLeagueInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CLeague",
                    "name": "leagues",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAMatchVotes",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "PlayerVote",
                    "name": "votes",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PlayerVote",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "vote",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgCastMatchVote",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTAMatchVote",
                    "name": "vote",
                    "id": 2,
                    "options": {
                        "default": "DOTAMatchVote_INVALID"
                    }
                }
            ]
        },
        {
            "name": "CMsgRetrieveMatchVote",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "incremental",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgMatchVoteResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "DOTAMatchVote",
                    "name": "vote",
                    "id": 2,
                    "options": {
                        "default": "DOTAMatchVote_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "positive_votes",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "negative_votes",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAHallOfFame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "week",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "FeaturedPlayer",
                    "name": "featured_players",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "FeaturedFarmer",
                    "name": "featured_farmer",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "FeaturedPlayer",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "average_scaled_metric",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_games",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "FeaturedFarmer",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold_per_min",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "match_id",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAHallOfFameRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "week",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAHallOfFameResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgDOTAHallOfFame",
                    "name": "hall_of_fame",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 2,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAHalloweenHighScoreRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "round",
                    "id": 1,
                    "options": {
                        "default": -1
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAHalloweenHighScoreResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "score",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTAMatch",
                    "name": "match",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "round",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAStorePromoPagesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version_seen",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAStorePromoPagesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "PromoPage",
                    "name": "pages",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "PromoPage",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "promo_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "title",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "url",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgLeagueScheduleBlockTeamInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgLeagueScheduleBlock",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "block_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "finals",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "comment",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "CMsgLeagueScheduleBlockTeamInfo",
                    "name": "teams",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDOTALeague",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgLeagueScheduleBlock",
                    "name": "schedule",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTALeagueScheduleRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTALeagueScheduleResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgDOTALeague",
                    "name": "league",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 2,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTALeagueScheduleEdit",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgLeagueScheduleBlock",
                    "name": "schedule",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "delete_block",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTALeagueScheduleEditResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgDOTALeague",
                    "name": "league",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 2,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTALeaguesInMonthRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "month",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "year",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tier",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTALeaguesInMonthResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "month",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "year",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTALeague",
                    "name": "leagues",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgSockAddrList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed32",
                    "name": "ip",
                    "id": 1,
                    "options": {
                        "packed": true
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "port",
                    "id": 2,
                    "options": {
                        "packed": true
                    }
                }
            ]
        },
        {
            "name": "CMsgMatchmakingGroupServerSample",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgSockAddrList",
                    "name": "servers_by_group",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "servers_to_ping",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reply_odds",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reply_detailed_odds",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgClientGameserverPings",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "average_ping_by_group",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "PingDetail",
                    "name": "ping_details",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PingDetail",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "ip",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "port",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "ping",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAMatchmakingStatsRequest",
            "fields": []
        },
        {
            "name": "CMsgDOTAMatchmakingStatsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "searching_players_by_group",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "searching_players_by_group_source2",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "disabled_groups",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "disabled_groups_source2",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "CMsgMatchmakingGroupServerSample",
                    "name": "gameserver_sample",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgMatchmakingGroupServerSample",
                    "name": "gameserver_sample_source2",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "maintenance_alerts",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTASetMatchHistoryAccess",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_3rd_party_match_history",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTASetMatchHistoryAccessResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTANotifyAccountFlagsChange",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "accountid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_flags",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTASetProfilePrivacy",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "profile_private",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTASetProfilePrivacyResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgUpgradeLeagueItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgUpgradeLeagueItemResponse",
            "fields": []
        },
        {
            "name": "CMsgGCWatchDownloadedReplay",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTA_WatchReplayType",
                    "name": "watch_type",
                    "id": 2,
                    "options": {
                        "default": "DOTA_WATCH_REPLAY_NORMAL"
                    }
                }
            ]
        },
        {
            "name": "CMsgSetMapLocationState",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "location_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "completed",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSetMapLocationStateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgResetMapLocations",
            "fields": []
        },
        {
            "name": "CMsgResetMapLocationsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                }
            ]
        },
        {
            "name": "CMsgRefreshPartnerAccountLink",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "partner_type",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientsRejoinChatChannels",
            "fields": []
        },
        {
            "name": "CMsgDOTASendFriendRecruits",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "recruits",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFriendRecruitsRequest",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFriendRecruitsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "FriendRecruitStatus",
                    "name": "recruits",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "FriendRecruitStatus",
                    "name": "recruiters",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "FriendRecruitStatus",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "status",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "levels_earned",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "bonus",
                            "id": 4
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFriendRecruitInviteAcceptDecline",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "accepted",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAPassportVoteTeamGuess",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "winner_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "runnerup_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAPassportVoteGenericSelection",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTA_2013PassportSelectionIndices",
                    "name": "selection_index",
                    "id": 1,
                    "options": {
                        "default": "PP13_SEL_ALLSTAR_PLAYER_0"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "selection",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAPassportStampedPlayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "stamp_level",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAPassportPlayerCardChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "challenge_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAPassportVote",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAPassportVoteTeamGuess",
                    "name": "team_votes",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAPassportVoteGenericSelection",
                    "name": "generic_selections",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAPassportStampedPlayer",
                    "name": "stamped_players",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAPassportPlayerCardChallenge",
                    "name": "player_card_challenges",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgPassportDataRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPassportDataResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 2,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTATournament",
                    "name": "international",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "east_qualifiers_predict_end_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "west_qualifiers_predict_end_time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "allstar_match_end_time",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTAPassportVote",
                    "name": "league_guesses",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "east_qualifiers_winner_team_id",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "east_qualifiers_runner_up_team_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "west_qualifiers_winner_team_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "west_qualifiers_runner_up_team_id",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "passports_bought",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "original_purchaser_id",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_team_count",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_teamexpiration",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_teams_will_lock_at",
                    "id": 18
                }
            ]
        },
        {
            "name": "CMsgHeroPickStatsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matches_since_time",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgHeroPickStatPlayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "win",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gpm",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "kills",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deaths",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assists",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgHeroPickStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_picks",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_wins",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_picks",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_wins",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "CMsgHeroPickStatPlayer",
                    "name": "player_pick",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgRequestLeaguePrizePool",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestLeaguePrizePoolResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_pool",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCGetHeroStandings",
            "fields": []
        },
        {
            "name": "CMsgGCGetHeroStandingsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Hero",
                    "name": "standings",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Hero",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "wins",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "losses",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReservationsRequest",
            "fields": []
        },
        {
            "name": "CMsgGCItemEditorReservation",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReservationsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgGCItemEditorReservation",
                    "name": "reservations",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReserveItemDef",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "username",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReserveItemDefResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "username",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReleaseReservation",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "username",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorReleaseReservationResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "released",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorRequestLeagueInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCItemEditorLeagueInfoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "league_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "league_desc",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "league_url",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "revenue_url",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tier",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "location",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgDOTARewardTutorialPrizes",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "location_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tracking_only",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTALastHitChallengeHighScorePost",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "high_score",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTALastHitChallengeHighScoreRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTALastHitChallengeHighScoreResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "score",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgFlipLobbyTeams",
            "fields": []
        },
        {
            "name": "CMsgPresentedClientTerminateDlg",
            "fields": []
        },
        {
            "name": "CMsgGCLobbyUpdateBroadcastChannelInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "language_code",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTARedeemEventPrize",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTARedeemEventPrizeResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "ResultCode",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "Success"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "remaining_points",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "remaining_premium_points",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 4
                }
            ],
            "enums": [
                {
                    "name": "ResultCode",
                    "values": [
                        {
                            "name": "Success",
                            "id": 0
                        },
                        {
                            "name": "ServerError",
                            "id": 1
                        },
                        {
                            "name": "InsufficientPoints",
                            "id": 2
                        },
                        {
                            "name": "PointsHeld",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAGetEventPoints",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGetEventPointsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_points",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_premium_points",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "points",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "premium_points",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "Action",
                    "name": "completed_actions",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "owned",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "Action",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "action_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "times_completed",
                            "id": 2,
                            "options": {
                                "default": 1
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTALiveLeagueGameUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "live_league_games",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTACompendiumSelection",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "selection_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "selection",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTACompendiumSelectionResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "eresult",
                    "id": 1,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTACompendiumSelection",
                    "name": "extra_selections",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTACompendiumData",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTACompendiumSelection",
                    "name": "selections",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTACompendiumDataRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTACompendiumDataResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 3,
                    "options": {
                        "default": 2
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTACompendiumData",
                    "name": "compendium_data",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAGetPlayerMatchHistory",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "start_at_match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "matches_requested",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "request_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "ESourceEngine",
                    "name": "engine",
                    "id": 6,
                    "options": {
                        "default": "k_ESE_Source1"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "include_practice_matches",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgDOTAGetPlayerMatchHistoryResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Match",
                    "name": "matches",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "request_id",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Match",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "match_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "start_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "winner",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_mode",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "rank_change",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "previous_rank",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lobby_type",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "solo_rank",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "abandon",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "duration",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "engine",
                            "id": 12
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAStartDailyHeroChallenge",
            "fields": []
        },
        {
            "name": "CMsgGCNotificationsRequest",
            "fields": []
        },
        {
            "name": "CMsgGCNotificationsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Notification",
                    "name": "notifications",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Notification",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "reference_a",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "reference_b",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "reference_c",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "message",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "unread",
                            "id": 8
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCNotificationsMarkReadRequest",
            "fields": []
        },
        {
            "name": "CMsgClientToGCMarkNotificationListRead",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "notification_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCLeagueAdminState",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "leagues",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "PrivateLeagueKeys",
                    "name": "keys",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PrivateLeagueKeys",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "leagueid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "privatekey",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCPlayerInfoRequest",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCPlayerInfoSubmit",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "country_code",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_role",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sponsor",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgGCPlayerInfoSubmitResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_INFO_LOCKED",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSerializedSOCache",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "file_version",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Cache",
                    "name": "caches",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gc_socache_file_version",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "TypeCache",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "bytes",
                            "name": "objects",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "service_id",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "Cache",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "id",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "Version",
                            "name": "versions",
                            "id": 3
                        },
                        {
                            "rule": "repeated",
                            "type": "TypeCache",
                            "name": "type_caches",
                            "id": 4
                        }
                    ],
                    "messages": [
                        {
                            "name": "Version",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "service",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint64",
                                    "name": "version",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgRequestWeekendTourneySchedule",
            "fields": []
        },
        {
            "name": "CMsgWeekendTourneySchedule",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Division",
                    "name": "divisions",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Division",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "division_code",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_window_open",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_window_close",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientProvideSurveyResult",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Response",
                    "name": "responses",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "survey_key",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Response",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "question_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "survey_value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAEmoticonAccessSDO",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "unlocked_emoticons",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCEmoticonDataRequest",
            "fields": []
        },
        {
            "name": "CMsgGCToClientEmoticonData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgDOTAEmoticonAccessSDO",
                    "name": "emoticon_access",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCTrackDialogResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dialog_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToClientTournamentItemDrop",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_type",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCSetAdditionalEquips",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CAdditionalEquipSlot",
                    "name": "equips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCSetAdditionalEquipsResponse",
            "fields": []
        },
        {
            "name": "CMsgClientToGCGetAdditionalEquips",
            "fields": []
        },
        {
            "name": "CMsgClientToGCGetAdditionalEquipsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CAdditionalEquipSlot",
                    "name": "equips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetAllHeroProgress",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetAllHeroProgressResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "curr_hero_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "laps_completed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "curr_hero_games",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "curr_lap_time_started",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "curr_lap_games",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "best_lap_games",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "best_lap_time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lap_heroes_completed",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "lap_heroes_remaining",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "next_hero_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prev_hero_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prev_hero_games",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "prev_avg_tries",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "curr_avg_tries",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "next_avg_tries",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "full_lap_avg_tries",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "curr_lap_avg_tries",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "profile_name",
                    "id": 19
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetTrophyList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetTrophyListResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Trophy",
                    "name": "trophies",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "profile_name",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Trophy",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "trophy_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "trophy_score",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToClientTrophyAwarded",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "trophy_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "trophy_score",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "trophy_old_score",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetProfileCard",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCSetProfileCardSlots",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CardSlot",
                    "name": "slots",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "CardSlot",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "slot_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "EProfileCardSlotType",
                            "name": "slot_type",
                            "id": 2,
                            "options": {
                                "default": "k_EProfileCardSlotType_Empty"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "slot_value",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCGetProfileCardStats",
            "fields": []
        },
        {
            "name": "CMsgClientToGCCreateHeroStatue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "source_item",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sequence_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cycle",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "wearables",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "inscription",
                    "id": 7
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "styles",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "reforger_item",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tournament_drop",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgClientToGCCreateTeamShowcase",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "source_item",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sequence_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cycle",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "wearables",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "inscription",
                    "id": 7
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "styles",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgGCToClientHeroStatueCreateResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "resulting_item",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToClientTeamShowcaseCreateResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "resulting_item",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCRecordCompendiumStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "view_duration_s",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "videos_viewed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "page_turns",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "links_followed",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgGCToClientEventStatusChanged",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "EIngameEvent",
                    "name": "active_events",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCExchangeItemsForOffering",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "recycle_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCExchangeItemsForOfferingResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResponse",
                    "name": "response",
                    "id": 1,
                    "options": {
                        "default": "eResponse_Success"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResponse",
                    "values": [
                        {
                            "name": "eResponse_Success",
                            "id": 0
                        },
                        {
                            "name": "eResponse_OfferingDisabled",
                            "id": 1
                        },
                        {
                            "name": "eResponse_InvalidItems",
                            "id": 2
                        },
                        {
                            "name": "eResponse_InternalError",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCPlayerStatsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToClientPlayerStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "float",
                    "name": "player_stats",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_count",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mean_gpm",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mean_xppm",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mean_lasthits",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rampages",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "triple_kills",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_claimed",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_given",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "couriers_killed",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "aegises_snatched",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cheeses_eaten",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "creeps_stacked",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fight_score",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "farm_score",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "support_score",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "push_score",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "versatility_score",
                    "id": 19
                }
            ]
        },
        {
            "name": "CMsgClientToGCCustomGamePlayerCountRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToClientCustomGamePlayerCountResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "player_count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "spectator_count",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgClientToGCCustomGamesFriendsPlayedRequest",
            "fields": []
        },
        {
            "name": "CMsgGCToClientCustomGamesFriendsPlayedResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CustomGame",
                    "name": "games",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "CustomGame",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "custom_game_id",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "account_ids",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCSocialFeedPostCommentRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "comment",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToClientSocialFeedPostCommentResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCSocialFeedPostMessageRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_timestamp",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCToClientSocialFeedPostMessageResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCFriendsPlayedCustomGameRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToClientFriendsPlayedCustomGameResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCFeaturedHeroesRequest",
            "fields": []
        },
        {
            "name": "CMsgGCToClientFeaturedHeroesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Category",
                    "name": "categories",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "DataField",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "EFeaturedHeroDataType",
                            "name": "data_type",
                            "id": 1,
                            "options": {
                                "default": "k_EFeaturedHeroDataType_HeroID"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "uint32_value",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "uint64_value",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "string_value",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "float_value",
                            "id": 5
                        }
                    ]
                },
                {
                    "name": "FeaturedHero",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "DataField",
                            "name": "data_fields",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "Category",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "category_weight",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "EFeaturedHeroTextField",
                            "name": "text_fields",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "FeaturedHero",
                            "name": "featured_heroes",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClientToGCSocialMatchPostCommentRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "comment",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToClientSocialMatchPostCommentResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCSocialMatchDetailsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "pagination_timestamp",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToClientSocialMatchDetailsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Comment",
                    "name": "comments",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Comment",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "persona_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "comment",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAPartyMemberSetCoach",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "wants_coach",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTASetGroupLeader",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "new_leader_steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTACancelGroupInvites",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "invited_steamids",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "invited_groupids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTASetGroupOpenStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "open",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAGroupMergeInvite",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "other_group_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAGroupMergeResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "initiator_group_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "accept",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGroupMergeReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EDOTAGroupMergeResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "k_EDOTAGroupMergeResult_OK"
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTAPartyRichPresence",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "party_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CSODOTAParty.State",
                    "name": "party_state",
                    "id": 2,
                    "options": {
                        "default": "UI"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "open",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "Member",
                    "name": "members",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Member",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "coach",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTALobbyRichPresence",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CSODOTALobby.State",
                    "name": "lobby_state",
                    "id": 2,
                    "options": {
                        "default": "UI"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "password",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameMode",
                    "name": "game_mode",
                    "id": 4,
                    "options": {
                        "default": "DOTA_GAMEMODE_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "member_count",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_member_count",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_id",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgDOTACustomGameListenServerStartedLoading",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "custom_game_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "lobby_members",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_time",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTACustomGameClientFinishedLoading",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "loading_duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "result_code",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "result_string",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "signon_states",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "comment",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgGCPlayerInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "PlayerInfo",
                    "name": "player_infos",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "PlayerInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "country_code",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "fantasy_role",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_id",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_name",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "team_tag",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "sponsor",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "is_locked",
                            "id": 9
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTACreateFantasyLeagueRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "league_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "league_logo",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "Fantasy_Selection_Mode",
                    "name": "selection_mode",
                    "id": 3,
                    "options": {
                        "default": "FANTASY_SELECTION_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_count",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTACreateFantasyLeagueResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_TOO_MANY_LEAGUES",
                            "id": 2
                        },
                        {
                            "name": "ERROR_INVALID_TEAM_COUNT",
                            "id": 3
                        },
                        {
                            "name": "ERROR_CREATION_DISABLED",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgFantasyLeagueScoring",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "level",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "kills",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "deaths",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "assists",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "last_hits",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "denies",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "gpm",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "xppm",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "stuns",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "healing",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "tower_kills",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "roshan_kills",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "multiplier_premium",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "multiplier_professional",
                    "id": 14
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "commissioner_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "fantasy_league_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "Fantasy_Selection_Mode",
                    "name": "selection_mode",
                    "id": 4,
                    "options": {
                        "default": "FANTASY_SELECTION_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_count",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgFantasyLeagueScoring",
                    "name": "scoring",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "draft_time",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "draft_pick_time",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "season_start",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "season_length",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "veto_votes",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "acquisitions",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_1",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_2",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_3",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_4",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_5",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bench_slots",
                    "id": 24
                },
                {
                    "rule": "repeated",
                    "type": "OwnerInfo",
                    "name": "owner_info",
                    "id": 25
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "players",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_zone",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "season",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "password",
                    "id": 29
                }
            ],
            "messages": [
                {
                    "name": "OwnerInfo",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "left_league",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "player_account_id",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueEditInfoRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTAFantasyLeagueInfo",
                    "name": "edit_info",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueEditInfoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueFindRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "password",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueFindResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "fantasy_league_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "commissioner_name",
                    "id": 3
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_LEAGUE_NOT_FOUND",
                            "id": 1
                        },
                        {
                            "name": "ERROR_BAD_PASSWORD",
                            "id": 2
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 3
                        },
                        {
                            "name": "ERROR_FULL",
                            "id": 4
                        },
                        {
                            "name": "ERROR_ALREADY_MEMBER",
                            "id": 5
                        },
                        {
                            "name": "ERROR_LEAGUE_LOCKED",
                            "id": 6
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueInfoRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueInfoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_BAD_LEAGUE_ID",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueMatchupsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueMatchupsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "WeeklyMatchups",
                    "name": "weekly_matchups",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Matchup",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id_1",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id_2",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score_1",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score_2",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "WeeklyMatchups",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "Matchup",
                            "name": "matchup",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "start_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "end_time",
                            "id": 3
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_BAD_LEAGUE_ID",
                            "id": 2
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAEditFantasyTeamRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_logo",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAEditFantasyTeamResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_INVALID_TEAM_INFO",
                            "id": 2
                        },
                        {
                            "name": "ERROR_NAME_ALREADY_TAKEN",
                            "id": 3
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamInfoResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAFantasyTeamInfo",
                    "name": "results",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_team_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "team_logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "wins",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "losses",
                    "id": 7
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "current_roster",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamScoreRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_team_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "filter_match_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_start_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_end_time",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "include_bench",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamScoreResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fantasy_team_score",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgPlayerScore",
                    "name": "fantasy_player_score",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "CMsgPlayerScore",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score",
                            "id": 2
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_OWNER_NOT_IN_LEAGUE",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamStandingsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_start_time",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_end_time",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "filter_match_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "filter_last_match",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "filter_in_hall",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamStandingsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "CMsgTeamScore",
                    "name": "team_scores",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "CMsgTeamScore",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "fantasy_league_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "fantasy_team_index",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "fantasy_team_logo",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "owner_name",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "fantasy_team_name",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score_against",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "wins",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "losses",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "streak",
                            "id": 11
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerScoreRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_start_time",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_end_time",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "filter_match_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "filter_last_match",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerScoreResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_account_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "player_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "score",
                    "id": 5
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerStandingsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "role",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_start_time",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "filter_end_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "filter_match_id",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "filter_last_match",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerStandingsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "role",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgPlayerScore",
                    "name": "player_scores",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CMsgPlayerScore",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "player_name",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score",
                            "id": 3
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerInfoRequest",
            "fields": []
        },
        {
            "name": "CMsgDOTAFantasyPlayerInfoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgGCPlayerInfo",
                    "name": "msg",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueCreateRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "season_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "fantasy_league_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "password",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "ticket_item_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueCreateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 1
                        },
                        {
                            "name": "ERROR_BAD_SEASON_ID",
                            "id": 2
                        },
                        {
                            "name": "ERROR_BAD_LEAGUE_NAME",
                            "id": 3
                        },
                        {
                            "name": "ERROR_BAD_TEAM_NAME",
                            "id": 4
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 5
                        },
                        {
                            "name": "ERROR_FAILED_LOGO_UPLOAD",
                            "id": 6
                        },
                        {
                            "name": "ERROR_NO_TICKET",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamCreateRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "password",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "team_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "logo",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "ticket_item_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamCreateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_team_index",
                    "id": 2
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 1
                        },
                        {
                            "name": "ERROR_FAILED_LOGO_UPLOAD",
                            "id": 2
                        },
                        {
                            "name": "ERROR_BAD_FANTASY_LEAGUE_ID",
                            "id": 3
                        },
                        {
                            "name": "ERROR_BAD_NAME",
                            "id": 4
                        },
                        {
                            "name": "ERROR_FULL",
                            "id": 5
                        },
                        {
                            "name": "ERROR_ALREADY_MEMBER",
                            "id": 6
                        },
                        {
                            "name": "ERROR_BAD_PASSWORD",
                            "id": 7
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 8
                        },
                        {
                            "name": "ERROR_NO_TICKET",
                            "id": 9
                        },
                        {
                            "name": "ERROR_LEAGUE_LOCKED",
                            "id": 10
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueEditInvitesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "password",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "InviteChange",
                    "name": "invite_change",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "InviteChange",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "invited",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueEditInvitesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueDraftStatusRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueDraftStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "draft_order",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "current_pick",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_remaining",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "pending_resume",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "completed",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "available_players",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueDraftPlayerRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_account_id",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeagueDraftPlayerResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_INVALID_FANTASY_LEAGUE",
                            "id": 2
                        },
                        {
                            "name": "ERROR_FANTASY_LEAGUE_NOT_DRAFTING",
                            "id": 3
                        },
                        {
                            "name": "ERROR_OWNER_NOT_IN_LEAGUE",
                            "id": 4
                        },
                        {
                            "name": "ERROR_NOT_OWNERS_TURN",
                            "id": 5
                        },
                        {
                            "name": "ERROR_PLAYER_INVALID",
                            "id": 6
                        },
                        {
                            "name": "ERROR_PLAYER_UNAVAILABLE",
                            "id": 7
                        },
                        {
                            "name": "ERROR_PLAYER_NO_VALID_SLOTS",
                            "id": 8
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterSwapRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timestamp",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_1",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot_2",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterSwapResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_OWNER_NOT_IN_LEAGUE",
                            "id": 2
                        },
                        {
                            "name": "ERROR_SLOTS_INVALID",
                            "id": 3
                        },
                        {
                            "name": "ERROR_SLOT_LOCKED",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterAddDropRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "add_account_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "drop_account_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterAddDropResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_OWNER_NOT_IN_LEAGUE",
                            "id": 2
                        },
                        {
                            "name": "ERROR_PLAYER_NOT_AVAILABLE",
                            "id": 3
                        },
                        {
                            "name": "ERROR_PLAYER_NOT_ON_TEAM",
                            "id": 4
                        },
                        {
                            "name": "ERROR_TRADE_ALREADY_PENDING",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamTradesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamTradesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Trade",
                    "name": "trades",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Trade",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id_1",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owner_account_id_2",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_account_id_1",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "player_account_id_2",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "status",
                            "id": 6
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamTradeCancelRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index_1",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id_2",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index_2",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamTradeCancelResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_NO_TRADE",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timestamp",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyTeamRosterResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "player_account_ids",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "bool",
                    "name": "player_locked",
                    "id": 3
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_OWNER_NOT_IN_LEAGUE",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerHisoricalStatsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerHisoricalStatsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "PlayerStats",
                    "name": "stats",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PlayerScoreAccumulator",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "matches",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "levels",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "kills",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "deaths",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "assists",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "last_hits",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "denies",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "gpm",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "xppm",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "stuns",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "healing",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "tower_kills",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "roshan_kills",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "score",
                            "id": 14
                        }
                    ]
                },
                {
                    "name": "PlayerStats",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "weeks",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "PlayerScoreAccumulator",
                            "name": "stats_premium",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "PlayerScoreAccumulator",
                            "name": "stats_professional",
                            "id": 5
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyMessageAdd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyMessagesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_message",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "end_message",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyMessagesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Message",
                    "name": "messages",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "num_total_messages",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Message",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "message_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "message",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "author_account_id",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time",
                            "id": 4
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyRemoveOwner",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "owner_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyRemoveOwnerResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NO_PERMISSION",
                            "id": 2
                        },
                        {
                            "name": "ERROR_LEAGUE_LOCKED",
                            "id": 3
                        },
                        {
                            "name": "ERROR_NOT_A_MEMBER",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyScheduledMatchesRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyScheduledMatchesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "ScheduledMatchDays",
                    "name": "scheduled_match_days",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "ScheduledMatchDays",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "team_ids",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "league_ids",
                            "id": 3
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeaveLeagueRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_team_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyLeaveLeagueResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NOT_MEMBER",
                            "id": 2
                        },
                        {
                            "name": "ERROR_LEAGUE_NOT_FOUND",
                            "id": 3
                        },
                        {
                            "name": "ERROR_DRAFT_ACTIVE",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerScoreDetailsRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fantasy_league_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_time",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "end_time",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerScoreDetailsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EResult",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SUCCESS"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "PlayerMatchData",
                    "name": "data",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PlayerMatchData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "match_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_num",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "series_type",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "league_tier",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "league_id",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "opposing_team_id",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "opposing_team_logo",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "opposing_team_name",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgFantasyLeagueScoring",
                            "name": "stats",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "owned_by",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "benched",
                            "id": 12
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "EResult",
                    "values": [
                        {
                            "name": "SUCCESS",
                            "id": 0
                        },
                        {
                            "name": "ERROR_UNSPECIFIED",
                            "id": 1
                        },
                        {
                            "name": "ERROR_NOT_MEMBER",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgApplyAutograph",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "autograph_item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgAdjustItemEquippedState",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "new_class",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "new_slot",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "style_index",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgEconPlayerStrangeCountAdjustment",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CStrangeCountAdjustment",
                    "name": "strange_count_adjustments",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "CStrangeCountAdjustment",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "event_type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "adjustment",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgRequestItemPurgatory_FinalizePurchase",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestItemPurgatory_FinalizePurchaseResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestItemPurgatory_RefundPurchase",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestItemPurgatory_RefundPurchaseResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgCraftingResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCRequestStoreSalesData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "currency",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCRequestStoreSalesDataResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Price",
                    "name": "sale_price",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "expiration_time",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Price",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_def",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "price",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCRequestStoreSalesDataUpToDateResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "expiration_time",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCPingRequest",
            "fields": []
        },
        {
            "name": "CMsgGCToGCPingResponse",
            "fields": []
        },
        {
            "name": "CMsgGCToGCGetUserSessionServer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCGetUserSessionServerResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steam_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCGetUserServerMembers",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "max_spectators",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCGetUserServerMembersResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "member_account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgLookupMultipleAccountNames",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "accountids",
                    "id": 1,
                    "options": {
                        "packed": true
                    }
                }
            ]
        },
        {
            "name": "CMsgLookupMultipleAccountNamesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Account",
                    "name": "accounts",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Account",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "accountid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "persona",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToGCGetUserPCBangNo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToGCGetUserPCBangNoResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "pc_bang_no",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestCrateItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "crate_item_def",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRequestCrateItemsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "crate_item_def",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "item_defs",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCCanUseDropRateBonus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "drop_rate_bonus",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "booster_type",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "exclusive_item_def",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_equal_rate",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSQLAddDropRateBonus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "drop_rate_bonus",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "booster_type",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_duration",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "end_time_stamp",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgSQLUpgradeBattleBooster",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "bonus_to_add",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "booster_type",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGCToGCRefreshSOCache",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "reload",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCCheckAccountTradeStatus",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "initiator",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCCheckAccountTradeStatusResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "can_trade",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "error_code",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToGCGrantAccountRolledItems",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Item",
                    "name": "items",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "audit_action",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "audit_data",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Item",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_def",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "string",
                            "name": "loot_lists",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "ignore_limit",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "origin",
                            "id": 4
                        },
                        {
                            "rule": "repeated",
                            "type": "DynamicAttribute",
                            "name": "dynamic_attributes",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "AdditionalAuditEntry",
                            "name": "additional_audit_entries",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "inventory_token",
                            "id": 7
                        }
                    ],
                    "messages": [
                        {
                            "name": "DynamicAttribute",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "string",
                                    "name": "name",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "value_uint32",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "value_float",
                                    "id": 3
                                }
                            ]
                        },
                        {
                            "name": "AdditionalAuditEntry",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "owner_account_id",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "audit_action",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "audit_data",
                                    "id": 3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToGCGrantSelfMadeItemToAccount",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "item_def_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "accountid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgUseItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "target_steam_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "gift__potential_targets",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "duel__class_lock",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "initiator_steam_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "itempack__ack_immediately",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgServerUseItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "initiator_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgUseItem",
                    "name": "use_item_msg",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCPartnerBalanceRequest",
            "fields": []
        },
        {
            "name": "CMsgGCPartnerBalanceResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EGCPartnerRequestResponse",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "k_EPartnerRequestOK"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCPartnerRechargeRedirectURLRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "def_index",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCPartnerRechargeRedirectURLResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EGCPartnerRequestResponse",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "k_EPartnerRequestOK"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCEconSQLWorkItemEmbeddedRollbackData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "deleted_item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgCraftStatue",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "heroid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "sequencename",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cycle",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "description",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "pedestal_itemdef",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "toolid",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgRedeemCode",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "code",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgRedeemCodeResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "response",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDevNewItemRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "item_def_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "loot_list_name",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "attr_def_name",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "attr_value",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDevNewItemRequestResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCAddGiftItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCWrapAndDeliverGift",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "give_to_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "gift_message",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgClientToGCWrapAndDeliverGiftResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EGCMsgResponse",
                    "name": "response",
                    "id": 1,
                    "options": {
                        "default": "k_EGCMsgResponseOK"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gifting_charge_uses",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "gifting_charge_max",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gifting_uses",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "gifting_max",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gifting_window_hours",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "EGCMsgInitiateTradeResponse",
                    "name": "trade_restriction",
                    "id": 7,
                    "options": {
                        "default": "k_EGCMsgInitiateTradeResponse_Accepted"
                    }
                }
            ]
        },
        {
            "name": "CMsgClientToGCUnwrapGift",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToClientBundleUnpacked",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "bundle_item_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToClientStoreTransactionCompleted",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "txn_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "item_ids",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgClientToGCEquipItems",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgAdjustItemEquippedState",
                    "name": "equips",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClientToGCEquipItemsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "so_cache_version_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSpawnLootGreevil",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "rare",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDismissLootGreevil",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "killed",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "rare",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDismissLootGreevilResponse",
            "fields": []
        },
        {
            "name": "CMsgPoorNetworkConditions",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EPoorNetworkConditionsType",
                    "name": "detection_type",
                    "id": 1,
                    "options": {
                        "default": "k_EPoorNetworkConditions_None"
                    }
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "players",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "ENetworkDisconnectionReason",
                            "name": "disconnect_reason",
                            "id": 2,
                            "options": {
                                "default": "NETWORK_DISCONNECT_INVALID"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_bad_intervals",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "peak_loss_pct",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGameserverCrash",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "lobby_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameState",
                    "name": "game_state",
                    "id": 3,
                    "options": {
                        "default": "DOTA_GAMERULES_STATE_INIT"
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "sentinel_save_time",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "custom_game_id",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_steam_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_public_ip_addr",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_port",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_cluster",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "pid",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "engine",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgConnectedPlayers",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "connected_players",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "disconnected_players",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "DOTA_GameState",
                    "name": "game_state",
                    "id": 2,
                    "options": {
                        "default": "DOTA_GAMERULES_STATE_INIT"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tower_state",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "first_blood_happened",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "legacy_mass_disconnect",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoorNetworkConditions",
                    "name": "poor_network_conditions",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "SendReason",
                    "name": "send_reason",
                    "id": 8,
                    "options": {
                        "default": "INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_kills",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_kills",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "barracks_state",
                    "id": 13
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "steam_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgLeaverState",
                            "name": "leaver_state",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "ENetworkDisconnectionReason",
                            "name": "disconnect_reason",
                            "id": 4,
                            "options": {
                                "default": "NETWORK_DISCONNECT_INVALID"
                            }
                        }
                    ]
                }
            ],
            "enums": [
                {
                    "name": "SendReason",
                    "values": [
                        {
                            "name": "INVALID",
                            "id": 0
                        },
                        {
                            "name": "HEARTBEAT",
                            "id": 1
                        },
                        {
                            "name": "GAME_STATE",
                            "id": 2
                        },
                        {
                            "name": "FIRST_BLOOD",
                            "id": 3
                        },
                        {
                            "name": "PLAYER_CONNECTED",
                            "id": 4
                        },
                        {
                            "name": "PLAYER_HERO",
                            "id": 5
                        },
                        {
                            "name": "PLAYER_DISCONNECTED_CONSEQUENCES",
                            "id": 6
                        },
                        {
                            "name": "PLAYER_DISCONNECTED_NOCONSEQUENCES",
                            "id": 7
                        },
                        {
                            "name": "TOWER_STATE",
                            "id": 9
                        },
                        {
                            "name": "GAMESTATE_TIMEOUT",
                            "id": 10
                        },
                        {
                            "name": "MASS_DISCONNECT",
                            "id": 11
                        },
                        {
                            "name": "BARRACKS_STATE",
                            "id": 12
                        },
                        {
                            "name": "KILLS",
                            "id": 13
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGameServerInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_public_ip_addr",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_private_ip_addr",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_port",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_tv_port",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_steamdatagram_port",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "server_key",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "server_hibernation",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "ServerType",
                    "name": "server_type",
                    "id": 7,
                    "options": {
                        "default": "UNSPECIFIED"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_region",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "server_loadavg",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "server_tv_broadcast_time",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "server_game_time",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "server_relay_connected_steam_id",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "relay_slots_max",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "relays_connected",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "relay_clients_connected",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "relayed_game_server_steam_id",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "parent_relay_count",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "tv_secret_code",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_version",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_cluster",
                    "id": 20
                }
            ],
            "enums": [
                {
                    "name": "ServerType",
                    "values": [
                        {
                            "name": "UNSPECIFIED",
                            "id": 0
                        },
                        {
                            "name": "GAME",
                            "id": 1
                        },
                        {
                            "name": "PROXY",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgLeaverDetected",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTALeaverStatus_t",
                    "name": "leaver_status",
                    "id": 2,
                    "options": {
                        "default": "DOTA_LEAVER_NONE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgLeaverState",
                    "name": "leaver_state",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_cluster",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "ENetworkDisconnectionReason",
                    "name": "disconnect_reason",
                    "id": 6,
                    "options": {
                        "default": "NETWORK_DISCONNECT_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoorNetworkConditions",
                    "name": "poor_network_conditions",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgLeaverDetectedResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyPlayerStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "match_completed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "kills",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deaths",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assists",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_hits",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "denies",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "gpm",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "xppm",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "stuns",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "healing",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tower_kills",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "roshan_kills",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_id",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "delay",
                    "id": 18
                }
            ]
        },
        {
            "name": "CMsgDOTAFantasyMatch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_time",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "series_type",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_1",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_2",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgServerToGCRealtimeStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgDOTARealtimeGameStatsTerse",
                    "name": "delayed",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgDOTARealtimeGameStats",
                    "name": "current",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToServerRealtimeStatsStartStop",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "delayed",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "current",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGameMatchSignOut",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1,
                    "options": {
                        "(key_field)": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "good_guys_win",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "date",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "num_players",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "CTeam",
                    "name": "teams",
                    "id": 6
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "tower_status",
                    "id": 8
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "barracks_status",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cluster",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "server_addr",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_time",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "game_balance",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_score",
                    "id": 14
                },
                {
                    "rule": "repeated",
                    "type": "CMatchHeroSelectEvent",
                    "name": "picks_bans",
                    "id": 15
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAFantasyPlayerStats",
                    "name": "fantasy_stats",
                    "id": 16
                },
                {
                    "rule": "repeated",
                    "type": "CMsgEconPlayerStrangeCountAdjustment",
                    "name": "player_strange_count_adjustments",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "automatic_surrender",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_version",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "legacy_mass_disconnect",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoorNetworkConditions",
                    "name": "poor_network_conditions",
                    "id": 35
                },
                {
                    "rule": "repeated",
                    "type": "CAdditionalSignoutMsg",
                    "name": "additional_msgs",
                    "id": 20
                },
                {
                    "rule": "repeated",
                    "type": "CSocialFeedMatchEvent",
                    "name": "social_feed_events",
                    "id": 36
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "average_networth_delta",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "networth_delta_min10",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "networth_delta_min20",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "maximum_losing_networth_lead",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "average_experience_delta",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "experience_delta_min10",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "experience_delta_min20",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "bonus_gold_winner_min10",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "bonus_gold_winner_min20",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bonus_gold_winner_total",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "bonus_gold_loser_min10",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "bonus_gold_loser_min20",
                    "id": 33
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bonus_gold_loser_total",
                    "id": 34
                },
                {
                    "rule": "optional",
                    "type": "CCustomGameData",
                    "name": "custom_game_data",
                    "id": 37
                }
            ],
            "messages": [
                {
                    "name": "CTeam",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "CPlayer",
                            "name": "players",
                            "id": 1
                        }
                    ],
                    "messages": [
                        {
                            "name": "CPlayer",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "fixed64",
                                    "name": "steam_id",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_id",
                                    "id": 3
                                },
                                {
                                    "rule": "repeated",
                                    "type": "uint32",
                                    "name": "items",
                                    "id": 4
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "gold",
                                    "id": 5
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "kills",
                                    "id": 6
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "deaths",
                                    "id": 7
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "assists",
                                    "id": 8
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "leaver_status",
                                    "id": 9
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "last_hits",
                                    "id": 10
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "denies",
                                    "id": 11
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "gold_per_min",
                                    "id": 12
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "xp_per_minute",
                                    "id": 13
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "gold_spent",
                                    "id": 14
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "level",
                                    "id": 15
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_damage",
                                    "id": 16
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "tower_damage",
                                    "id": 17
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_healing",
                                    "id": 18
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "time_last_seen",
                                    "id": 19
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "support_ability_value",
                                    "id": 20
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint64",
                                    "name": "party_id",
                                    "id": 21
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "scaled_kills",
                                    "id": 24
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "scaled_deaths",
                                    "id": 25
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "scaled_assists",
                                    "id": 26
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "claimed_farm_gold",
                                    "id": 27
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "support_gold",
                                    "id": 28
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "claimed_denies",
                                    "id": 29
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "claimed_misses",
                                    "id": 30
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "misses",
                                    "id": 31
                                },
                                {
                                    "rule": "repeated",
                                    "type": "CMatchPlayerAbilityUpgrade",
                                    "name": "ability_upgrades",
                                    "id": 32
                                },
                                {
                                    "rule": "repeated",
                                    "type": "CMatchAdditionalUnitInventory",
                                    "name": "additional_units_inventory",
                                    "id": 33
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "net_worth",
                                    "id": 34
                                },
                                {
                                    "rule": "optional",
                                    "type": "CCustomGameData",
                                    "name": "custom_game_data",
                                    "id": 35
                                }
                            ],
                            "messages": [
                                {
                                    "name": "CCustomGameData",
                                    "fields": [
                                        {
                                            "rule": "optional",
                                            "type": "uint32",
                                            "name": "dota_team",
                                            "id": 1
                                        },
                                        {
                                            "rule": "optional",
                                            "type": "bool",
                                            "name": "winner",
                                            "id": 2
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "CAdditionalSignoutMsg",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "contents",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "CSocialFeedMatchEvent",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "timestamp",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "event_type",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "game_time",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "replay_time",
                            "id": 5
                        }
                    ]
                },
                {
                    "name": "CCustomGameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "publish_timestamp",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSignOutDraftInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radiant_captain_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dire_captain_account_id",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMatchHeroSelectEvent",
                    "name": "picks_bans",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgSignOutBotInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "allow_cheats",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "DOTABotDifficulty",
                    "name": "bot_difficulty",
                    "id": 2,
                    "options": {
                        "default": "BOT_DIFFICULTY_PASSIVE"
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "created_lobby",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgBotSlotDifficulty",
                    "name": "bot_slot_difficulties",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CMsgBotSlotDifficulty",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "slot",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "DOTABotDifficulty",
                            "name": "bot_difficulty",
                            "id": 2,
                            "options": {
                                "default": "BOT_DIFFICULTY_PASSIVE"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSignOutPlayerStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rank",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rampages",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "triple_kills",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_claimed",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "first_blood_given",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "couriers_killed",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "aegises_snatched",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cheeses_eaten",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "creeps_stacked",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fight_score",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "farm_score",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "support_score",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "push_score",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "kills",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "deaths",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "assists",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_hits",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "denies",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "gpm",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "xppm",
                    "id": 23
                }
            ]
        },
        {
            "name": "CMsgSignOutCommunicationSummary",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "PlayerCommunication",
                    "name": "players",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "PlayerCommunication",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "pings",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "max_pings_per_interval",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "teammate_pings",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "max_teammate_pings_per_interval",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_chat_messages",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "all_chat_messages",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "chat_wheel_messages",
                            "id": 8
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "pauses",
                            "id": 9
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "unpauses",
                            "id": 10
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "lines_drawn",
                            "id": 11
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "voice_chat_seconds",
                            "id": 12
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "chat_mutes",
                            "id": 13
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "voice_mutes",
                            "id": 14
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGameMatchSignoutResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "replay_salt",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CLobbyTimedRewardDetails",
                    "name": "timed_reward_details",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CDOTALobbyMember",
                    "name": "xp_reward_details",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "leagueid",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "CAdditionalSignoutMsg",
                    "name": "additional_msgs",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "CAdditionalSignoutMsg",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bytes",
                            "name": "contents",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGameMatchSignOutPermissionRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "server_version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "local_attempt",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_attempt",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_waited",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGameMatchSignOutPermissionResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "permission_granted",
                    "id": 1,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "abandon_signout",
                    "id": 2,
                    "options": {
                        "default": false
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "retry_delay_seconds",
                    "id": 3,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CMsgGameChatLog",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CChatLine",
                    "name": "lines",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "CChatLine",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "team_only",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "text",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "game_time",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTALiveScoreboardUpdate",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tournament_game_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hltv_delay",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "Team",
                    "name": "team_good",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "Team",
                    "name": "team_bad",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "roshan_respawn_timer",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 9
                }
            ],
            "messages": [
                {
                    "name": "Team",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "Player",
                            "name": "players",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "score",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "tower_state",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "barracks_state",
                            "id": 4
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "hero_picks",
                            "id": 5
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "hero_bans",
                            "id": 6
                        }
                    ],
                    "messages": [
                        {
                            "name": "Player",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "player_slot",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "string",
                                    "name": "player_name",
                                    "id": 2
                                },
                                {
                                    "rule": "optional",
                                    "type": "string",
                                    "name": "hero_name",
                                    "id": 3
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "hero_id",
                                    "id": 4
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "kills",
                                    "id": 5
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "deaths",
                                    "id": 6
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "assists",
                                    "id": 7
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "last_hits",
                                    "id": 8
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "denies",
                                    "id": 9
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "gold",
                                    "id": 10
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "level",
                                    "id": 11
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "gold_per_min",
                                    "id": 12
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "xp_per_min",
                                    "id": 13
                                },
                                {
                                    "rule": "optional",
                                    "type": "DOTAUltimateState",
                                    "name": "ultimate_state",
                                    "id": 14,
                                    "options": {
                                        "default": "k_EDOTAUltimateStateNotLearned"
                                    }
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "ultimate_cooldown",
                                    "id": 15
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item0",
                                    "id": 16
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item1",
                                    "id": 17
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item2",
                                    "id": 18
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item3",
                                    "id": 19
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item4",
                                    "id": 20
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "item5",
                                    "id": 21
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "respawn_timer",
                                    "id": 22
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "account_id",
                                    "id": 23
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "position_x",
                                    "id": 24
                                },
                                {
                                    "rule": "optional",
                                    "type": "float",
                                    "name": "position_y",
                                    "id": 25
                                },
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "net_worth",
                                    "id": 26
                                },
                                {
                                    "rule": "repeated",
                                    "type": "HeroAbility",
                                    "name": "abilities",
                                    "id": 27
                                }
                            ],
                            "messages": [
                                {
                                    "name": "HeroAbility",
                                    "fields": [
                                        {
                                            "rule": "optional",
                                            "type": "uint32",
                                            "name": "ability_id",
                                            "id": 1
                                        },
                                        {
                                            "rule": "optional",
                                            "type": "uint32",
                                            "name": "ability_level",
                                            "id": 2
                                        }
                                    ]
                                }
                            ],
                            "enums": [
                                {
                                    "name": "DOTAUltimateState",
                                    "values": [
                                        {
                                            "name": "k_EDOTAUltimateStateNotLearned",
                                            "id": 0
                                        },
                                        {
                                            "name": "k_EDOTAUltimateStateCooldown",
                                            "id": 1
                                        },
                                        {
                                            "name": "k_EDOTAUltimateStateNeedsMana",
                                            "id": 2
                                        },
                                        {
                                            "name": "k_EDOTAUltimateStateReady",
                                            "id": 3
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTARequestPlayerResources",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTARequestPlayerResourcesResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steam_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rank",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "prevent_text_chat",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "prevent_voice_chat",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgDOTARequestBatchPlayerResources",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1,
                    "options": {
                        "packed": true
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "rank_types",
                    "id": 4,
                    "options": {
                        "packed": true
                    }
                }
            ]
        },
        {
            "name": "CMsgDOTARequestBatchPlayerResourcesResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Result",
                    "name": "results",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "Result",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "prevent_text_chat",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "prevent_voice_chat",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "rank",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "rank_calibrated",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "low_priority",
                            "id": 6
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAPlayerFailedToConnect",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "failed_loaders",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "abandoned_loaders",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToRelayConnect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_public_addr",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_private_addr",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "source_tv_port",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "game_server_steam_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "parent_count",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "tv_unique_secret_code",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "source_tv_steamid",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgGCGCToLANServerRelayConnect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "relay_steamid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCToRelayConnectResponse",
            "fields": []
        },
        {
            "name": "CMsgGCBanStatusRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGCBanStatusResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "low_priority",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "text_chat_banned",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "voice_chat_banned",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTournamentItemEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "killer_account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "victim_account_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTA_TournamentEvents",
                    "name": "event_type",
                    "id": 3,
                    "options": {
                        "default": "TE_FIRST_BLOOD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tv_delay",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "dota_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "replay_time",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "loot_list",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_team",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "multi_kill_count",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "winner_score",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "loser_score",
                    "id": 11
                },
                {
                    "rule": "repeated",
                    "type": "CProtoItemHeroStatue",
                    "name": "hero_statues",
                    "id": 12
                }
            ]
        },
        {
            "name": "CMsgTournamentItemEventResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "DOTA_TournamentEvents",
                    "name": "event_type",
                    "id": 1,
                    "options": {
                        "default": "TE_FIRST_BLOOD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "viewers_granted",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgTeamFanfare",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgResponseTeamFanfare",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fanfare_goodguys",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fanfare_badguys",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGameServerUploadSaveGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "game_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "save_game_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "lobby_id",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "uint64",
                    "name": "player_steam_ids",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgGameServerSaveGameResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "Result",
                    "name": "result",
                    "id": 1,
                    "options": {
                        "default": "SaveSuccessful"
                    }
                }
            ],
            "enums": [
                {
                    "name": "Result",
                    "values": [
                        {
                            "name": "SaveSuccessful",
                            "id": 0
                        },
                        {
                            "name": "SessionNotFound",
                            "id": 1
                        },
                        {
                            "name": "DatabaseError",
                            "id": 2
                        },
                        {
                            "name": "TooBig",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGameServerGetLoadGame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "save_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgGameServerGetLoadGameResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "save_game_data",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAGenerateDiretidePrizeList",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_list",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "highest_roshan_level",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTAGenerateDiretidePrizeListResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "item_defs",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "steam_ids",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_list",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDOTARewardDiretidePrizes",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_list",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTADiretidePrizesRewardedResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_list",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDOTAAwardEventPoints",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "AwardPoints",
                    "name": "award_points",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AwardPoints",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "points",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "premium_points",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "trade_ban_time",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerToGCSignoutAwardAdditionalDrops",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "AdditionalDrops",
                    "name": "drops",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "AdditionalDrops",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "loot_list",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "player_account_ids",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "no_trade",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "randomize_reward",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAUpdateTI4HeroQuest",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "players",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "match_start_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "hero_id",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgDOTAFrostivusTimeElapsed",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "User",
                    "name": "users",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "User",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "time_elapsed_s",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToServerPingRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "request_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "request_time",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgGCToServerPingResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "request_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "request_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cluster",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCToServerConsoleCommand",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "console_command",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerGetEventPoints",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgServerGetEventPointsResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Points",
                    "name": "points",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "Points",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "points_total",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "owned",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerGrantSurveyPermission",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Survey",
                    "name": "surveys",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Survey",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "question_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "expire_time",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "survey_key",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "extra_data",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "extra_data_32",
                            "id": 6
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerGrantSurveyPermissionResponse",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "result",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerToGCMatchConnectionStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "region_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "league_id",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "Player",
                    "name": "players",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cluster_id",
                    "id": 5
                }
            ],
            "messages": [
                {
                    "name": "Player",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "ip",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "avg_ping_ms",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "packet_loss",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "ping_deviation",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "full_resends",
                            "id": 7
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerGCUpdateSpectatorCount",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "spectator_count",
                    "id": 1
                }
            ]
        },
        {
            "name": "CSerializedCombatLog",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "version",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "Dictionary",
                    "name": "dictionary",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgDOTACombatLogEntry",
                    "name": "entries",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Dictionary",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "DictString",
                            "name": "strings",
                            "id": 1
                        }
                    ],
                    "messages": [
                        {
                            "name": "DictString",
                            "fields": [
                                {
                                    "rule": "required",
                                    "type": "uint32",
                                    "name": "id",
                                    "id": 1
                                },
                                {
                                    "rule": "required",
                                    "type": "string",
                                    "name": "value",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerToGCGetAdditionalEquips",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerToGCGetAdditionalEquipsResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CUserEquips",
                    "name": "equips",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "CUserEquips",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "CAdditionalEquipSlot",
                            "name": "equips",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerToGCGetProfileCard",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerToGCGetProfileCardResponse",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgDOTAProfileCard",
                    "name": "cards",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerToGCVictoryPredictions",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Record",
                    "name": "records",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Record",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "item_id",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "uint64",
                            "name": "item_ids",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSuspiciousActivity",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "ESuspiciousActivity",
                    "name": "activity",
                    "id": 2,
                    "options": {
                        "default": "k_ESuspiciousActivity_VAC_MultipleInstances"
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "intdata1",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "intdata2",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgServerToGCRequestStatus",
            "fields": []
        },
        {
            "name": "CMsgServerToGCRequestStatus_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "response",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSignOutAssassinMiniGameInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "winning_players",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "losing_players",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "fixed64",
                    "name": "arcana_owners",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "assassin_won",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_hero_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "contract_completed",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "contract_complete_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "pa_is_radiant",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgServerToGCGetIngameEventData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EIngameEvent",
                    "name": "event",
                    "id": 1,
                    "options": {
                        "default": "k_EIngameEvent_OraclePA"
                    }
                }
            ]
        },
        {
            "name": "CMsgGCToServerIngameEventDataOraclePA",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "target_hero_ids",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgServerToGCKillSummaries",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ingameevent_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "KillSummary",
                    "name": "summaries",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "KillSummary",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "killer_hero_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "victim_hero_id",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "kill_count",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGCToServerPredictionResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "correct",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "Prediction",
                    "name": "predictions",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Prediction",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_def",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_correct",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_fails",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "EResult",
                            "name": "result",
                            "id": 4,
                            "options": {
                                "default": "k_eResult_ItemGranted"
                            }
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "granted_item_defs",
                            "id": 6
                        }
                    ],
                    "enums": [
                        {
                            "name": "EResult",
                            "values": [
                                {
                                    "name": "k_eResult_ItemGranted",
                                    "id": 1
                                },
                                {
                                    "name": "k_eResult_Destroyed",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerToGCLockCharmTrading",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "item_id",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgDOTACNY2015EventPointUsage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "PointUsage",
                    "name": "winning_team_usage",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "PointUsage",
                    "name": "losing_team_usage",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PointUsage",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "path",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "path_level",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "ability_points_spent",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSignOutUpdatePlayerChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "Challenge",
                    "name": "completed",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "Challenge",
                    "name": "rerolled",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Challenge",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "event_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "sequence_id",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgServerToGCRerollPlayerChallenge",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgClientToGCRerollPlayerChallenge",
                    "name": "reroll_msg",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgServerToGCHoldEventPoints",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "HoldRequest",
                    "name": "holds",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "hold_key",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hold_until",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "HoldRequest",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "account_id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "points_held",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "premium_held",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSignOutReleaseEventPointHolds",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "account_ids",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "hold_key",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGCToServerUpdateBroadcastCheers",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "time_stamp",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_1_cheers",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team_2_cheers",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAModifierBuffTableEntry",
            "fields": [
                {
                    "rule": "required",
                    "type": "DOTA_MODIFIER_ENTRY_TYPE",
                    "name": "entry_type",
                    "id": 1,
                    "options": {
                        "default": "DOTA_MODIFIER_ENTRY_TYPE_ACTIVE"
                    }
                },
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "parent",
                    "id": 2
                },
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "index",
                    "id": 3
                },
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "serial_num",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "modifier_class",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ability_level",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "stack_count",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "creation_time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 9,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "caster",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ability",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "armor",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fade_time",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "subtle",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "channel_time",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "v_start",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "v_end",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "portal_loop_appear",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "portal_loop_disappear",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "hero_loop_appear",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "hero_loop_disappear",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "movement_speed",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "aura",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "activity",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "damage",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "range",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "dd_modifier_index",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "dd_ability_index",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "illusion_label",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "active",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "lua_name",
                    "id": 31
                }
            ]
        },
        {
            "name": "CDOTALuaModifierEntry",
            "fields": [
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "modifier_type",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "string",
                    "name": "modifier_filename",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_AIDebugLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_Ping",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SwapVerify",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ChatEvent",
            "fields": [
                {
                    "rule": "required",
                    "type": "DOTA_CHAT_MESSAGE",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "CHAT_MESSAGE_INVALID"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_1",
                    "id": 3,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_2",
                    "id": 4,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_3",
                    "id": 5,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_4",
                    "id": 6,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_5",
                    "id": 7,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "sint32",
                    "name": "playerid_6",
                    "id": 8,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value2",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "value3",
                    "id": 10
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CombatLogShowDeath",
            "fields": []
        },
        {
            "name": "CDOTAUserMsg_BotChat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "format",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "target",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CombatHeroPositions",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector2D",
                    "name": "world_pos",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "health",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_MiniKillCamInfo",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Attacker",
                    "name": "attackers",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Attacker",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "attacker",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "total_damage",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "Ability",
                            "name": "abilities",
                            "id": 3
                        }
                    ],
                    "messages": [
                        {
                            "name": "Ability",
                            "fields": [
                                {
                                    "rule": "optional",
                                    "type": "uint32",
                                    "name": "ability",
                                    "id": 1
                                },
                                {
                                    "rule": "optional",
                                    "type": "int32",
                                    "name": "damage",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_GlobalLightColor",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_GlobalLightDirection",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "direction",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_LocationPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_LocationPing",
                    "name": "location_ping",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ItemAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_ItemAlert",
                    "name": "item_alert",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_EnemyItemAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_player_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "rune_type",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ModifierAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "class_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "stack_count",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_debuff",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_entindex",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_HPManaAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "target_entindex",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_GlyphAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "negative",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_WillPurchaseAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gold_remaining",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_BuyBackStateAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_QuickBuyAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "gold_required",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CourierKilledAlert",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gold_value",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_handle",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "timestamp",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_MinimapEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "event_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_handle",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "x",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "y",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "duration",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_MapLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_MapLine",
                    "name": "mapline",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_MinimapDebugPoint",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "location",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "size",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "index",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CreateLinearProjectile",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector2D",
                    "name": "velocity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "latency",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entindex",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "particle_index",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "handle",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector2D",
                    "name": "acceleration",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "max_speed",
                    "id": 8
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_DestroyLinearProjectile",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "handle",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_DodgeTrackingProjectiles",
            "fields": [
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "entindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "attacks_only",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SpectatorPlayerClick",
            "fields": [
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "entindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "order_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "target_index",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SpectatorPlayerUnitOrders",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "order_type",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "int32",
                    "name": "units",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "target_index",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ability_index",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "position",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "queue",
                    "id": 7
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_NevermoreRequiem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_handle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "lines",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_InvalidCommand",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_HudError",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "order_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SharedCooldown",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cooldown",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "name_index",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SetNextAutobuyItem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_HalloweenDrops",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "item_defs",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "player_ids",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "prize_list",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_PredictionResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "correct",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "Prediction",
                    "name": "predictions",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "Prediction",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "item_def",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_correct",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "num_fails",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "EResult",
                            "name": "result",
                            "id": 4,
                            "options": {
                                "default": "k_eResult_ItemGranted"
                            }
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "granted_item_defs",
                            "id": 6
                        }
                    ],
                    "enums": [
                        {
                            "name": "EResult",
                            "values": [
                                {
                                    "name": "k_eResult_ItemGranted",
                                    "id": 1
                                },
                                {
                                    "name": "k_eResult_Destroyed",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAResponseQuerySerialized",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "Fact",
                    "name": "facts",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Fact",
                    "fields": [
                        {
                            "rule": "required",
                            "type": "int32",
                            "name": "key",
                            "id": 1
                        },
                        {
                            "rule": "required",
                            "type": "ValueType",
                            "name": "valtype",
                            "id": 2,
                            "options": {
                                "default": "NUMERIC"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "val_numeric",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "val_string",
                            "id": 4
                        }
                    ],
                    "enums": [
                        {
                            "name": "ValueType",
                            "values": [
                                {
                                    "name": "NUMERIC",
                                    "id": 1
                                },
                                {
                                    "name": "STRING",
                                    "id": 2
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTASpeechMatchOnClient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "concept",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "recipient_type",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CDOTAResponseQuerySerialized",
                    "name": "responsequery",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "sfixed32",
                    "name": "randomseed",
                    "id": 4,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_UnitEvent",
            "fields": [
                {
                    "rule": "required",
                    "type": "EDotaEntityMessages",
                    "name": "msg_type",
                    "id": 1,
                    "options": {
                        "default": "DOTA_UNIT_SPEECH"
                    }
                },
                {
                    "rule": "required",
                    "type": "int32",
                    "name": "entity_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "Speech",
                    "name": "speech",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "SpeechMute",
                    "name": "speech_mute",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "AddGesture",
                    "name": "add_gesture",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "RemoveGesture",
                    "name": "remove_gesture",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "BloodImpact",
                    "name": "blood_impact",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "FadeGesture",
                    "name": "fade_gesture",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "CDOTASpeechMatchOnClient",
                    "name": "speech_match_on_client",
                    "id": 9
                }
            ],
            "messages": [
                {
                    "name": "Speech",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "concept",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "response",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "recipient_type",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "level",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "muteable",
                            "id": 5,
                            "options": {
                                "default": false
                            }
                        }
                    ]
                },
                {
                    "name": "SpeechMute",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "delay",
                            "id": 1,
                            "options": {
                                "default": 0.5
                            }
                        }
                    ]
                },
                {
                    "name": "AddGesture",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "activity",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "slot",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "fade_in",
                            "id": 3,
                            "options": {
                                "default": 0
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "fade_out",
                            "id": 4,
                            "options": {
                                "default": 0.1
                            }
                        }
                    ]
                },
                {
                    "name": "RemoveGesture",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "activity",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "BloodImpact",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "scale",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "x_normal",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "y_normal",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "FadeGesture",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "activity",
                            "id": 1
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ItemPurchased",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "item_index",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ItemFound",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "quality",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "rarity",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "method",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "itemdef",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ParticleManager",
            "fields": [
                {
                    "rule": "required",
                    "type": "DOTA_PARTICLE_MESSAGE",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "DOTA_PARTICLE_MANAGER_EVENT_CREATE"
                    }
                },
                {
                    "rule": "required",
                    "type": "uint32",
                    "name": "index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "ReleaseParticleIndex",
                    "name": "release_particle_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CreateParticle",
                    "name": "create_particle",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "DestroyParticle",
                    "name": "destroy_particle",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "DestroyParticleInvolving",
                    "name": "destroy_particle_involving",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticle",
                    "name": "update_particle",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleFwd",
                    "name": "update_particle_fwd",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleOrient",
                    "name": "update_particle_orient",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleFallback",
                    "name": "update_particle_fallback",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleOffset",
                    "name": "update_particle_offset",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleEnt",
                    "name": "update_particle_ent",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleShouldDraw",
                    "name": "update_particle_should_draw",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleSetFrozen",
                    "name": "update_particle_set_frozen",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "ChangeControlPointAttachment",
                    "name": "change_control_point_attachment",
                    "id": 16
                }
            ],
            "messages": [
                {
                    "name": "ReleaseParticleIndex",
                    "fields": []
                },
                {
                    "name": "CreateParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "particle_name_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attach_type",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle_for_modifiers",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "DestroyParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "destroy_immediately",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "DestroyParticleInvolving",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "destroy_immediately",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "UpdateParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "position",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleFwd",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "forward",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleOrient",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "forward",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "right",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "up",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "UpdateParticleFallback",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "position",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleOffset",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "origin_offset",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleEnt",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attach_type",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "fallback_position",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "include_wearables",
                            "id": 6
                        }
                    ]
                },
                {
                    "name": "UpdateParticleSetFrozen",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "set_frozen",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "UpdateParticleShouldDraw",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "should_draw",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "ChangeControlPointAttachment",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment_old",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment_new",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_OverheadEvent",
            "fields": [
                {
                    "rule": "required",
                    "type": "DOTA_OVERHEAD_ALERT",
                    "name": "message_type",
                    "id": 1,
                    "options": {
                        "default": "OVERHEAD_ALERT_GOLD"
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "value",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "target_player_entindex",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "target_entindex",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "source_player_entindex",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TutorialTipInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "progress",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TutorialFinish",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "heading",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "emblem",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "body",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "success",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TutorialMinimapPosition",
            "fields": []
        },
        {
            "name": "CDOTAUserMsg_SendGenericToolTip",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "title",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entindex",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "close",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_WorldLine",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_WorldLine",
                    "name": "worldline",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ChatWheel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EDOTAChatWheelMessage",
                    "name": "chat_message",
                    "id": 1,
                    "options": {
                        "default": "k_EDOTA_CW_Ok"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "param_hero_id",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ReceivedXmasGift",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "item_name",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "inventory_slot",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ShowSurvey",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "survey_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "match_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "response_style",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "teammate_hero_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "teammate_name",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "teammate_account_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_UpdateSharedContent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "slot_type",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TutorialRequestExp",
            "fields": []
        },
        {
            "name": "CDOTAUserMsg_TutorialFade",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "tgt_alpha",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TutorialPingMinimap",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "pos_x",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "pos_y",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "pos_z",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity_index",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_GamerulesStateChanged",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "state",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_AddQuestLogEntry",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "npc_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "npc_dialog",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SendStatPopup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_SendStatPopup",
                    "name": "statpopup",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SendRoshanPopup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "reclaimed",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "gametime",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SendFinalGold",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "reliable_gold",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "unreliable_gold",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CustomMsg",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "value",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CoachHUDPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CDOTAMsg_CoachHUDPing",
                    "name": "hud_ping",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ClientLoadGridNav",
            "fields": []
        },
        {
            "name": "CDOTAUserMsg_TE_Projectile",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hSource",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hTarget",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "moveSpeed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sourceAttachment",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int64",
                    "name": "particleSystemHandle",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "dodgeable",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isAttack",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isEvaded",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "expireTime",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "maximpacttime",
                    "id": 10
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TE_ProjectileLoc",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "vSourceLoc",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hTarget",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "moveSpeed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int64",
                    "name": "particleSystemHandle",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "dodgeable",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isAttack",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isEvaded",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "expireTime",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "vTargetLoc",
                    "id": 10
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TE_DotaBloodImpact",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "xnormal",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "ynormal",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_AbilityPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "DOTA_ABILITY_PING_TYPE",
                    "name": "type",
                    "id": 3,
                    "options": {
                        "default": "ABILITY_PING_READY"
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "cooldown_seconds",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "passive",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "mana_needed",
                    "id": 7
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TE_UnitAnimation",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "sequenceVariant",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "playbackrate",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "castpoint",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "type",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "activity",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_TE_UnitAnimationEnd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "entity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "snap",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ShowGenericPopup",
            "fields": [
                {
                    "rule": "required",
                    "type": "string",
                    "name": "header",
                    "id": 1
                },
                {
                    "rule": "required",
                    "type": "string",
                    "name": "body",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param1",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param2",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "tint_screen",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "show_no_other_dialogs",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_VoteStart",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "title",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "choice_count",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "choices",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_VoteUpdate",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "int32",
                    "name": "choice_counts",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_VoteEnd",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "selected_choice",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_BoosterStatePlayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "bonus",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "event_bonus",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "bonus_item_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "event_bonus_item_id",
                    "id": 5
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_BoosterState",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_BoosterStatePlayer",
                    "name": "boosted_players",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_PlayerMMR",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "sint32",
                    "name": "mmr",
                    "id": 1,
                    "options": {
                        "packed": true
                    }
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_AbilitySteal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_level",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsHeroLookup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "hero_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "hero_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "persona",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsHeroPositionInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "average_position",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "PositionPair",
                    "name": "position_details",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "PositionPair",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "DOTA_POSITION_CATEGORY",
                            "name": "position_category",
                            "id": 1,
                            "options": {
                                "default": "DOTA_POSITION_NONE"
                            }
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "position_count",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsHeroMinuteDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "last_hits",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_kills",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hero_damage",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tower_damage",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CDOTAUserMsg_StatsHeroPositionInfo",
                    "name": "position_info",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_xp",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "net_worth",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "harvested_creep_gold",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "claimed_farm",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "wards_placed",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "runes_collected",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tps_used",
                    "id": 12
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "mana_spent",
                    "id": 13
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "damage_absorbed",
                    "id": 14
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "damage_done",
                    "id": 15
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsTeamMinuteDetails",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsHeroMinuteDetails",
                    "name": "player_stats",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "tower_kills",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "barrack_kills",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "available_lane_creep_gold",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance_kill_value",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance_tower_value",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance_barracks_value",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance_gold_value",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "balance_xp_value",
                    "id": 9
                },
                {
                    "rule": "repeated",
                    "type": "LocationPerformance",
                    "name": "lane_performance",
                    "id": 10
                }
            ],
            "messages": [
                {
                    "name": "LocationPerformance",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "location_category",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "stat_type",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "value",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsPlayerKillShare",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "kill_share_percent",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "player_loc_x",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "player_loc_y",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "health_percent",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mana_percent",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsKillDetails",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "victim_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsPlayerKillShare",
                    "name": "kill_shares",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "damage_to_kill",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effective_health",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "death_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "killer_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_StatsMatchDetails",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsHeroLookup",
                    "name": "hero_lookup",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsTeamMinuteDetails",
                    "name": "radiant_stats",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsTeamMinuteDetails",
                    "name": "dire_stats",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsKillDetails",
                    "name": "radiant_kills",
                    "id": 4
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsKillDetails",
                    "name": "dire_kills",
                    "id": 5
                },
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_StatsFightDetails",
                    "name": "fight_details",
                    "id": 6
                }
            ],
            "messages": [
                {
                    "name": "CDOTAUserMsg_StatsFightTeamDetails",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "participants",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "uint32",
                            "name": "deaths",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "gold_delta",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "xp_delta",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "CDOTAUserMsg_StatsFightDetails",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "start_time",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "end_time",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CDOTAUserMsg_StatsFightTeamDetails",
                            "name": "radiant_fight_details",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "CDOTAUserMsg_StatsFightTeamDetails",
                            "name": "dire_fight_details",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_MiniTaunt",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "taunting_player_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_SpeechBubble",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "destroy_all",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CustomHeaderMessage",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "value",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgHeroAbilityStat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "EHeroStatType",
                    "name": "stat_type",
                    "id": 1,
                    "options": {
                        "default": "k_EHeroStatType_None"
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "int_value",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "float_value",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgCombatAnalyzerPlayerStat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "account_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgHeroAbilityStat",
                    "name": "hero_ability_stats",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgCombatAnalyzerStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "match_id",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgCombatAnalyzerPlayerStat",
                    "name": "player_stats",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_BeastChat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "team",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "format",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "target",
                    "id": 4
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CustomHudElement_Create",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "element_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "layout_filename",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CustomHudElement_Modify",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "element_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "modify_visible",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 3
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CustomHudElement_Destroy",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "element_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CompendiumStatePlayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "level",
                    "id": 2
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_CompendiumState",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CDOTAUserMsg_CompendiumStatePlayer",
                    "name": "compendium_players",
                    "id": 1
                }
            ]
        },
        {
            "name": "CDOTAUserMsg_ProjectionAbility",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ability_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "caster_ent_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "caster_team",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "channel_end",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "track_caster_only",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "end_time",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgVDebugGameSessionIDEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "clientid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "gamesessionid",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgPlaceDecalEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "saxis",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "decalmaterialindex",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "width",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "height",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "depth",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entityhandleindex",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "skeletoninstancehash",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "boneindex",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "translucenthit",
                    "id": 13
                }
            ]
        },
        {
            "name": "CMsgClearWorldDecalsEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flagstoclear",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClearEntityDecalsEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flagstoclear",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgClearDecalsForSkeletonInstanceEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flagstoclear",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entityhandleindex",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "skeletoninstancehash",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgSource1LegacyGameEventList",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "descriptor_t",
                    "name": "descriptors",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "key_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "descriptor_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "eventid",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 2
                        },
                        {
                            "rule": "repeated",
                            "type": "key_t",
                            "name": "keys",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSource1LegacyListenEvents",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "playerslot",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "eventarraybits",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSource1LegacyGameEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "event_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "eventid",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "key_t",
                    "name": "keys",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "key_t",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "type",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "val_string",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "float",
                            "name": "val_float",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_long",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_short",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "val_byte",
                            "id": 6
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "val_bool",
                            "id": 7
                        },
                        {
                            "rule": "optional",
                            "type": "uint64",
                            "name": "val_uint64",
                            "id": 8
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSosStartSoundEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "soundevent_guid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "soundevent_hash",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "source_entity_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "seed",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "packed_params",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSosStopSoundEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "soundevent_guid",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSosStopSoundEventHash",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "soundevent_hash",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "source_entity_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSosSetSoundEventParams",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "soundevent_guid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "packed_params",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSosSetLibraryStackFields",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "stack_hash",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "packed_fields",
                    "id": 5
                }
            ]
        },
        {
            "name": "NetMessageSplitscreenUserChanged",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "slot",
                    "id": 1
                }
            ]
        },
        {
            "name": "NetMessageConnectionClosed",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reason",
                    "id": 1
                }
            ]
        },
        {
            "name": "NetMessageConnectionCrashed",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reason",
                    "id": 1
                }
            ]
        },
        {
            "name": "NetMessagePacketStart",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "incoming_sequence",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "outgoing_acknowledged",
                    "id": 2
                }
            ]
        },
        {
            "name": "NetMessagePacketEnd",
            "fields": []
        },
        {
            "name": "CMsgBeginFrame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "frame_paint_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "surface_width",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "surface_height",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "render_target",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "ui_scale_factor",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "empty_frame",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "clear_gpu_resources_before_frame",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgEndFrame",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "mouse_cursor_texture_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mouse_cursor_hotspot_x",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "mouse_cursor_hotspot_y",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgClearBackbuffer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "clear_color_rgba",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDeleteTexture",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "texture_pointer",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDeletePanel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "context_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgDeleteParticleSystem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "panel_handle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "brush_index",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgPoint",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "z",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgMatrix4x4",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m00",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m01",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m02",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m03",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m10",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m11",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m12",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m13",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m20",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m21",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m22",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m23",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m30",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m31",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m32",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "m33",
                    "id": 16
                }
            ]
        },
        {
            "name": "CRadiusData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CCornerRadius",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CCornerRadius",
                    "name": "top_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CCornerRadius",
                    "name": "bottom_right",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CCornerRadius",
                    "name": "bottom_left",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CCornerRadius",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "horizontal",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "vertical",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CBorderData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CBorderSide",
                    "name": "top",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CBorderSide",
                    "name": "right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CBorderSide",
                    "name": "bottom",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CBorderSide",
                    "name": "left",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "CBorderSide",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "style",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "width",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "color",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CBoxShadowData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "inset",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "horizontal_offset",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "vertical_offset",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "blur_radius",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "spread_distance",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "fill",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "animating",
                    "id": 8
                }
            ]
        },
        {
            "name": "CTextShadowData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "horizontal_offset",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "vertical_offset",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "blur_radius",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "animating",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "strength",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgClipData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "top",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "right",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "bottom",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgPushCompositingLayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "layer_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "width",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "height",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_left_x",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_left_y",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_left_z",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_right_x",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_right_y",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_top_right_z",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_left_x",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_left_y",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_left_z",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_right_x",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_right_y",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "layer_quad_bottom_right_z",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m00",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m01",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m02",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m03",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m10",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m11",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m12",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m13",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m20",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m21",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m22",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m23",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m30",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m31",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m32",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transform_m33",
                    "id": 31
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "perspective_depth",
                    "id": 32
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "opacity",
                    "id": 33
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "composition_color",
                    "id": 34
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "saturation",
                    "id": 35
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "hue_shift",
                    "id": 36
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "brightness",
                    "id": 37
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "contrast",
                    "id": 38
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "opacity_mask_texture_id",
                    "id": 39
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "opacity_mask_opacity",
                    "id": 40
                },
                {
                    "rule": "optional",
                    "type": "CBorderData",
                    "name": "border",
                    "id": 41
                },
                {
                    "rule": "optional",
                    "type": "CRadiusData",
                    "name": "border_radius",
                    "id": 42
                },
                {
                    "rule": "optional",
                    "type": "CBoxShadowData",
                    "name": "box_shadow",
                    "id": 43
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "gaussianblur_passes",
                    "id": 44
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "gaussianblur_stddevhor",
                    "id": 45
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "gaussianblur_stddevver",
                    "id": 46
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "scale_2d_factors_x",
                    "id": 47
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "scale_2d_factors_y",
                    "id": 48
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "rotate_2d",
                    "id": 49
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needs_clear",
                    "id": 50
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needs_depth",
                    "id": 51
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needs_redraw_every_frame",
                    "id": 52
                },
                {
                    "rule": "optional",
                    "type": "CTextShadowData",
                    "name": "text_shadow",
                    "id": 53
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "mix_blend_mode",
                    "id": 54
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "occluded_left_edge",
                    "id": 55
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "occluded_top_edge",
                    "id": 56
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "occluded_right_edge",
                    "id": 57
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "occluded_bottom_edge",
                    "id": 58
                }
            ]
        },
        {
            "name": "CMsgPopCompositingLayer",
            "fields": []
        },
        {
            "name": "CMsgFreeCompositingLayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "layer_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgTransitionData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "start_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "delay_seconds",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "duration_seconds",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timing_func",
                    "id": 4,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_0",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_1",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_2",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_3",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgAnimationData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "start_time",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "delay_seconds",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "duration_seconds",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timing_func",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_0",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_1",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_2",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_3",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "direction",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "iteration",
                    "id": 10
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationFrameData",
                    "name": "frames",
                    "id": 11
                }
            ]
        },
        {
            "name": "CMsgAnimationFrameData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "percent",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "timing_func",
                    "id": 2,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_0",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_1",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_2",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "cubic_bezier_3",
                    "id": 6
                }
            ],
            "extensions": [
                1000,
                536870911
            ]
        },
        {
            "name": "CMsgPointWithTransition",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgPoint",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgPointWithTransition.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1012
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgColor",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgColor.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1001
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgColorStop",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_rgba",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgLinearGradient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "start_position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "end_position",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "CMsgColorStop",
                    "name": "color_stop",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgRadialGradient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "center_position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "offset_distance",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "radii",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgColorStop",
                    "name": "color_stop",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgParticle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "particle_position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_size",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_sharpness",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_rgba",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgParticleSystem",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "base_position",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "base_position_variance",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particle_size",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particle_size_variance",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particles_per_second",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particles_per_second_variance",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particle_lifespan_seconds",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "particle_lifespan_seconds_variance",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "particle_initial_velocity",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "particle_initial_velocity_variance",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "gravity_acceleration",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "gravity_acceleration_particle_variance",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_start_rgba",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_start_rgba_variance",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_end_rgba",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_end_rgba_variance",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "parent_panel_handle",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "parent_brush_index",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_sharpness",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_sharpness_variance",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_flicker",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "particle_flicker_variance",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "particle_velocity_min",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "particle_velocity_max",
                    "id": 24
                },
                {
                    "rule": "repeated",
                    "type": "CMsgParticle",
                    "name": "particles",
                    "id": 50
                }
            ]
        },
        {
            "name": "CMsgFillBrush",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "opacity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color_rgba",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgLinearGradient",
                    "name": "linear_gradient",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgRadialGradient",
                    "name": "radial_gradient",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgParticleSystem",
                    "name": "particle_system",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgFillBrushCollection",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgFillBrush",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "CMsgFillBrush",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "repeated",
                            "type": "CMsgFillBrush",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgFillBrushCollection.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1007
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgRenderFillBrushCollection",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CMsgFillBrush",
                    "name": "fill_brush",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgPanelPosition",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "scroll_offset",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "scroll_offset_target",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "scroll_transition_x",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "scroll_transition_y",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgPoint",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgPanelPosition.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1011
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgOpacity",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgOpacity.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1004
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgRotate2D",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgRotate2D.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1014
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgOpacityMaskData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "opacity_mask_texture_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "opacity_mask_opacity",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgOpacityMask",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgOpacityMaskData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgOpacityMaskData",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgOpacityMaskData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgOpacityMask.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1013
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgHueShift",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgHueShift.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1019
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSaturation",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgSaturation.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1005
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgBrightness",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgBrightness.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1020
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgContrast",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgContrast.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1021
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgGaussianValues",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "passes",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "stddev_hor",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "stddev_ver",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgGaussianBlur",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgGaussianValues",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgGaussianValues",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgGaussianValues",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgGaussianBlur.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1008
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsg3DTransformPerspective",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "double",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsg3DTransformPerspective.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1003
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsg3DTransformPerspectiveOrigin",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgPoint",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsg3DTransformPerspectiveOrigin.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1002
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgTransformOriginData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "x",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "y",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "x_is_percent",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "y_is_percent",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "is_parent_relative",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsg3DTransformOrigin",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgTransformOriginData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransformOriginData",
                    "name": "transition",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgTransformOriginData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsg3DTransformOrigin.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1015
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsg3DTransformMatrix",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgMatrix4x4",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgMatrix4x4",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgMatrix4x4",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsg3DTransformMatrix.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1000
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgBorderRadius",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CRadiusData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CRadiusData",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CRadiusData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgBorderRadius.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1006
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgBorder",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CBorderData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CBorderData",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CBorderData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgBorder.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1009
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgBoxShadow",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CBoxShadowData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CBoxShadowData",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CBoxShadowData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgBoxShadow.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1010
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgTextShadow",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CTextShadowData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CTextShadowData",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CTextShadowData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgTextShadow.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1017
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgClip",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgClipData",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgTransitionData",
                    "name": "transition_data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgClipData",
                    "name": "transition",
                    "id": 3
                },
                {
                    "rule": "repeated",
                    "type": "CMsgAnimationData",
                    "name": "animations",
                    "id": 4
                }
            ],
            "messages": [
                {
                    "name": "AnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgClipData",
                            "name": "data",
                            "id": 1
                        }
                    ]
                },
                {
                    "ref": "CMsgAnimationFrameData",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "CMsgClip.AnimationFrameData",
                            "name": "animation_frame_data",
                            "id": 1018
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgPushClipLayer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CRadiusData",
                    "name": "border_radius",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgPopClipLayer",
            "fields": []
        },
        {
            "name": "CMsgPushAAndTContext",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "context_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "width",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "height",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "chilren_have_3dtransforms",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "zindex",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgPanelPosition",
                    "name": "panel_position",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "CMsg3DTransformMatrix",
                    "name": "transform_matrix",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "CMsg3DTransformOrigin",
                    "name": "transform_origin",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "CMsg3DTransformPerspective",
                    "name": "transform_perspective",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "CMsg3DTransformPerspectiveOrigin",
                    "name": "transform_perspective_origin",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "CMsgOpacity",
                    "name": "opacity",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "CMsgColor",
                    "name": "wash_color",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "CMsgHueShift",
                    "name": "hue_shift",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "CMsgSaturation",
                    "name": "saturation",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "CMsgBrightness",
                    "name": "brightness",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "CMsgContrast",
                    "name": "contrast",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "CMsgOpacityMask",
                    "name": "opacity_mask",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "CMsgBorderRadius",
                    "name": "border_radius",
                    "id": 19
                },
                {
                    "rule": "optional",
                    "type": "CMsgGaussianBlur",
                    "name": "gaussian_blur",
                    "id": 20
                },
                {
                    "rule": "optional",
                    "type": "CMsgBorder",
                    "name": "border",
                    "id": 21
                },
                {
                    "rule": "optional",
                    "type": "CMsgBoxShadow",
                    "name": "box_shadow",
                    "id": 22
                },
                {
                    "rule": "optional",
                    "type": "CMsgPointWithTransition",
                    "name": "scale_2d_centered",
                    "id": 23
                },
                {
                    "rule": "optional",
                    "type": "CMsgRotate2D",
                    "name": "rotate_2d_centered",
                    "id": 24
                },
                {
                    "rule": "optional",
                    "type": "CMsgTextShadow",
                    "name": "text_shadow",
                    "id": 25
                },
                {
                    "rule": "optional",
                    "type": "CMsgClip",
                    "name": "clip",
                    "id": 26
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "suppress_clip_to_bounds",
                    "id": 27
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "needs_full_repaint",
                    "id": 28
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "wants_hit_test",
                    "id": 29
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "mix_blend_mode",
                    "id": 30
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "opaque_background",
                    "id": 31
                }
            ]
        },
        {
            "name": "CMsgPopAAndTContext",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "context_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgBeginPaintBackground",
            "fields": []
        },
        {
            "name": "CMsgEndPaintBackground",
            "fields": []
        },
        {
            "name": "CMsgBeginPaintLast",
            "fields": []
        },
        {
            "name": "CMsgEndPaintLast",
            "fields": []
        },
        {
            "name": "CMsgDrawFilledRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgFillBrushCollection",
                    "name": "fill_brush_collection",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "antialiasing",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgRenderFilledRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgRenderFillBrushCollection",
                    "name": "fill_brush_collection",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "antialiasing",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgDrawTexturedRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_top_left",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_bottom_right",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "texture_serial",
                    "id": 6,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_sample_mode",
                    "id": 7,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CMsgDrawDoubleBufferedRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_top_left",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_bottom_right",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgDrawYUV420DoubleBufferedRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_top_left",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_bottom_right",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgRenderTexturedRect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_top_left",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "texture_bottom_right",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "texture_serial",
                    "id": 6,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_sample_mode",
                    "id": 7,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CMsgLockTexture",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "texture_id",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "texture_serial",
                    "id": 2,
                    "options": {
                        "default": 0
                    }
                }
            ]
        },
        {
            "name": "CMsgTextInlineObject",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "width",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "height",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgTextFormat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "font_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "font_size",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "font_weight",
                    "id": 3,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "font_style",
                    "id": 4,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "underline",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "strikethrough",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgFillBrushCollection",
                    "name": "fill_brush_collection",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "letter_spacing",
                    "id": 8,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgTextInlineObject",
                    "name": "inline_object",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgTextRangeFormat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "end_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTextFormat",
                    "name": "format",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgRenderTextFormat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "font_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "double",
                    "name": "font_size",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "font_weight",
                    "id": 3,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "font_style",
                    "id": 4,
                    "options": {
                        "default": -1
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "underline",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "strikethrough",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgRenderFillBrushCollection",
                    "name": "fill_brush_collection",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "letter_spacing",
                    "id": 8,
                    "options": {
                        "default": 0
                    }
                },
                {
                    "rule": "optional",
                    "type": "CMsgTextInlineObject",
                    "name": "inline_object",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgRenderTextRangeFormat",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "end_index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgRenderTextFormat",
                    "name": "format",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgDrawTextRegion",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "wtext",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgTextFormat",
                    "name": "default_format",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "text_align",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "line_height",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "wrapping",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "ellipsis",
                    "id": 9
                },
                {
                    "rule": "repeated",
                    "type": "CMsgTextRangeFormat",
                    "name": "range_formats",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgRenderTextRegion",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "wtext",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgRenderTextFormat",
                    "name": "default_format",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "text_align",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "line_height",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "wrapping",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "ellipsis",
                    "id": 9
                },
                {
                    "rule": "repeated",
                    "type": "CMsgRenderTextRangeFormat",
                    "name": "range_formats",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "CTextShadowData",
                    "name": "text_shadow",
                    "id": 11
                }
            ]
        },
        {
            "name": "CMsgRequestRenderCallback",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "callback_obj",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "top_left_padding",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgPoint",
                    "name": "bottom_right_padding",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needs_redraw_every_frame",
                    "id": 6
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramRouterPingReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "fixed32",
                    "name": "latency_datacenter_ids",
                    "id": 2,
                    "options": {
                        "packed": true
                    }
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "latency_ping_ms",
                    "id": 3,
                    "options": {
                        "packed": true
                    }
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "your_public_ip",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "challenge",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_until_shutdown",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramGameserverPing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_session",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "client_steam_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "router_timestamp",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "router_gameserver_latency",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_number_router",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_number_e2e",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramGameServerAuthTicket",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "time_expiry",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "authorized_steam_id",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "authorized_public_ip",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "gameserver_steam_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "gameserver_net_id",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "signature",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "app_id",
                    "id": 7
                },
                {
                    "rule": "repeated",
                    "type": "ExtraField",
                    "name": "extra_fields",
                    "id": 8
                }
            ],
            "messages": [
                {
                    "name": "ExtraField",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "string_value",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "sint32",
                            "name": "int32_value",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "fixed32_value",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "fixed64_value",
                            "id": 5
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramGameserverSessionRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramGameServerAuthTicket",
                    "name": "ticket",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "challenge_time",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "challenge",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramGameserverSessionEstablished",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "gameserver_steam_id",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_until_shutdown",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramNoSession",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "your_public_ip",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "server_time",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "challenge",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_until_shutdown",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramDiagnostic",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "severity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramDataCenterState",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "DataCenter",
                    "name": "data_centers",
                    "id": 1
                }
            ],
            "messages": [
                {
                    "name": "Server",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "address",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "ping_ms",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "DataCenter",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "code",
                            "id": 1
                        },
                        {
                            "rule": "repeated",
                            "type": "Server",
                            "name": "server_sample",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramLinkInstantaneousStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "out_packets_per_sec_x10",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "out_bytes_per_sec",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "in_packets_per_sec_x10",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "in_bytes_per_sec",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ping_ms",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "packets_dropped_pct",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "packets_weird_sequence_pct",
                    "id": 7
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramLinkLifetimeStats",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_sent",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "kb_sent",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "kb_recv",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv_sequenced",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv_dropped",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv_out_of_order",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv_duplicate",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "packets_recv_lurch",
                    "id": 11
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramConnectionQuality",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramLinkInstantaneousStats",
                    "name": "instantaneous",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramLinkLifetimeStats",
                    "name": "lifetime",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramConnectionStatsClientToRouter",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramConnectionQuality",
                    "name": "c2r",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramConnectionQuality",
                    "name": "c2s",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_num_c2r",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_num_c2s",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramConnectionStatsRouterToClient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramConnectionQuality",
                    "name": "r2c",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramConnectionQuality",
                    "name": "s2c",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp_from_router",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp_from_server",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "router_gameserver_latency",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seconds_until_shutdown",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_num_r2c",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_num_s2c",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramConnectionStatsRouterToServer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgSteamDatagramConnectionQuality",
                    "name": "c2s",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_timestamp",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "router_timestamp",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "seq_num_c2s",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "client_steam_id",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "client_session_id",
                    "id": 8
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramClientPingSampleRequest",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramClientPingSampleReply",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "RoutingCluster",
                    "name": "routing_clusters",
                    "id": 2
                }
            ],
            "messages": [
                {
                    "name": "RoutingCluster",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed32",
                            "name": "id",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "front_ping_ms",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "e2e_ping_ms",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CMsgSteamDatagramClientSwitchedPrimary",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "client_cookie",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "from_ip",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "from_port",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "from_router_cluster",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "from_active_time",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "from_active_packets_recv",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "from_dropped_reason",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "gap_ms",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "RouterQuality",
                    "name": "from_quality_now",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "RouterQuality",
                    "name": "to_quality_now",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "RouterQuality",
                    "name": "from_quality_then",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "RouterQuality",
                    "name": "to_quality_then",
                    "id": 12
                }
            ],
            "messages": [
                {
                    "name": "RouterQuality",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "score",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "front_ping",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "back_ping",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "uint32",
                            "name": "seconds_until_down",
                            "id": 4
                        }
                    ]
                }
            ]
        },
        {
            "name": "CCloud_GetUploadServerInfo_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1,
                    "options": {
                        "(description)": "App ID to which a file will be uploaded to."
                    }
                }
            ]
        },
        {
            "name": "CCloud_GetUploadServerInfo_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "server_url",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCloud_GetFileDetails_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "ugcid",
                    "id": 1,
                    "options": {
                        "(description)": "ID of the Cloud file to get details for."
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 2,
                    "options": {
                        "(description)": "App ID the file belongs to."
                    }
                }
            ]
        },
        {
            "name": "CCloud_UserFile",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "ugcid",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "filename",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint64",
                    "name": "timestamp",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "file_size",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "url",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "steamid_creator",
                    "id": 7
                }
            ]
        },
        {
            "name": "CCloud_GetFileDetails_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CCloud_UserFile",
                    "name": "details",
                    "id": 1
                }
            ]
        },
        {
            "name": "CCloud_EnumerateUserFiles_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 1,
                    "options": {
                        "(description)": "App ID to enumerate the files of."
                    }
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "extended_details",
                    "id": 2,
                    "options": {
                        "(description)": "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 3,
                    "options": {
                        "(description)": "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."
                    }
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "start_index",
                    "id": 4,
                    "options": {
                        "(description)": "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."
                    }
                }
            ]
        },
        {
            "name": "CCloud_EnumerateUserFiles_Response",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "CCloud_UserFile",
                    "name": "files",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "total_files",
                    "id": 2
                }
            ]
        },
        {
            "name": "CCloud_Delete_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "filename",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "appid",
                    "id": 2,
                    "options": {
                        "(description)": "App ID the file belongs to."
                    }
                }
            ]
        },
        {
            "name": "CCloud_Delete_Response",
            "fields": []
        },
        {
            "name": "COAuthToken_ImplicitGrantNoPrompt_Request",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "clientid",
                    "id": 1,
                    "options": {
                        "(description)": "Client ID for which to count the number of issued tokens"
                    }
                }
            ]
        },
        {
            "name": "COAuthToken_ImplicitGrantNoPrompt_Response",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "access_token",
                    "id": 1,
                    "options": {
                        "(description)": "OAuth Token, granted on success"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "redirect_uri",
                    "id": 2,
                    "options": {
                        "(description)": "Redirection URI provided during client registration."
                    }
                }
            ]
        },
        {
            "name": "CMsgTEArmorRicochet",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "pos",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "dir",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgTEBaseBeam",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "modelindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "haloindex",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "startframe",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "framerate",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "life",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "width",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "endwidth",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "fadelength",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "amplitude",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "speed",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 12
                }
            ]
        },
        {
            "name": "CMsgTEBeamEntPoint",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgTEBaseBeam",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "startentity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "endentity",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "start",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "end",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgTEBeamEnts",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgTEBaseBeam",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "startentity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "endentity",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEBeamPoints",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgTEBaseBeam",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "start",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "end",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEBeamRing",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgTEBaseBeam",
                    "name": "base",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "startentity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "endentity",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEBreakModel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "size",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "velocity",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "randomization",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "modelindex",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgTEBSPDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "saxis",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entity",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "index",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgTEBubbles",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "mins",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "maxs",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "height",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "speed",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgTEBubbleTrail",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "mins",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "maxs",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "waterz",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "count",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "speed",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgTEDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "start",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entity",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hitbox",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "index",
                    "id": 5
                }
            ]
        },
        {
            "name": "CMsgEffectData",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "start",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "entity",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "otherentity",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "magnitude",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "radius",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "surfaceprop",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "effectindex",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "damagetype",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "material",
                    "id": 13
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hitbox",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 16
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "attachmentindex",
                    "id": 17
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effectname",
                    "id": 18
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "attachmentname",
                    "id": 19
                }
            ]
        },
        {
            "name": "CMsgTEEffectDispatch",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgEffectData",
                    "name": "effectdata",
                    "id": 1
                }
            ]
        },
        {
            "name": "CMsgTEEnergySplash",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "pos",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "dir",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "explosive",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEFizz",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entity",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "density",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "current",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEShatterSurface",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "force",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "forcepos",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "width",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "height",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "shardsize",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "surfacetype",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "frontcolor",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "backcolor",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgTEGlowSprite",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "life",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "brightness",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTEImpact",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "type",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEMuzzleFlash",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "type",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTEBloodStream",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "direction",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "amount",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTEExplosion",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "framerate",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "materialtype",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "radius",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "magnitude",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "affect_ragdolls",
                    "id": 9
                }
            ]
        },
        {
            "name": "CMsgTEDust",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "size",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "speed",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "direction",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTELargeFunnel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "reversed",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgTESparks",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "magnitude",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "length",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "direction",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTEPhysicsProp",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "velocity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "skin",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effects",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "fixed64",
                    "name": "modelindex",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "breakmodelsnottomake",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 10
                }
            ]
        },
        {
            "name": "CMsgTEPlayerDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "player",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entity",
                    "id": 3
                }
            ]
        },
        {
            "name": "CMsgTEProjectedDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angles",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "distance",
                    "id": 4
                }
            ]
        },
        {
            "name": "CMsgTESmoke",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "scale",
                    "id": 2
                }
            ]
        },
        {
            "name": "CMsgTEWorldDecal",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "index",
                    "id": 3
                }
            ]
        },
        {
            "name": "ChangeMapToolEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "mapname",
                    "id": 1
                }
            ]
        },
        {
            "name": "TraceRayServerToolEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "start",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "end",
                    "id": 2
                }
            ]
        },
        {
            "name": "ToolTraceRayResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "hit",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "impact",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "normal",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "distance",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fraction",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 6
                }
            ]
        },
        {
            "name": "SpawnEntityToolEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "entity_keyvalues",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "clientsideentity",
                    "id": 2
                }
            ]
        },
        {
            "name": "SpawnEntityToolEventResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 1
                }
            ]
        },
        {
            "name": "DestroyEntityToolEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 1
                }
            ]
        },
        {
            "name": "DestroyAllEntitiesToolEvent",
            "fields": []
        },
        {
            "name": "RestartMapToolEvent",
            "fields": []
        },
        {
            "name": "ToolEvent_GetEntityInfo",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "clientsideentity",
                    "id": 2
                }
            ]
        },
        {
            "name": "ToolEvent_GetEntityInfoResult",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "cppclass",
                    "id": 1,
                    "options": {
                        "default": "shithead"
                    }
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "classname",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "mins",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "maxs",
                    "id": 6
                }
            ]
        },
        {
            "name": "ToolEvent_GetEntityInputs",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "clientsideentity",
                    "id": 2
                }
            ]
        },
        {
            "name": "ToolEvent_GetEntityInputsResult",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "input_list",
                    "id": 1
                }
            ]
        },
        {
            "name": "ToolEvent_FireEntityInput",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ehandle",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "clientsideentity",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "input_name",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "input_param",
                    "id": 4
                }
            ]
        },
        {
            "name": "ToolEvent_SFMRecordingStateChanged",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isrecording",
                    "id": 1
                }
            ]
        },
        {
            "name": "ToolEvent_SFMToolActiveStateChanged",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "isactive",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageAchievementEvent",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "achievement",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageCloseCaption",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "hash",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "from_player",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ent_index",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageCloseCaptionDirect",
            "fields": [
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "hash",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "from_player",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ent_index",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageCloseCaptionPlaceholder",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "string",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "from_player",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "ent_index",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageCurrentTimescale",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "current",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageDesiredTimescale",
            "fields": [
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "desired",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "acceleration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "minblendrate",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "blenddeltamultiplier",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageFade",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "duration",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "hold_time",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "flags",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageShake",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "command",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "amplitude",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "frequency",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageShakeDir",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CUserMessageShake",
                    "name": "shake",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "direction",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMessageScreenTilt",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "command",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "ease_in_out",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "angle",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "time",
                    "id": 5
                }
            ]
        },
        {
            "name": "CUserMessageSayText",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "playerindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "chat",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageSayText2",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entityindex",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "chat",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "messagename",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param1",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param2",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param3",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "param4",
                    "id": 7
                }
            ]
        },
        {
            "name": "CUserMessageHudMsg",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "channel",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "x",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "y",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color1",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color2",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "effect",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fade_in_time",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fade_out_time",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "hold_time",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "fx_time",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 11
                }
            ]
        },
        {
            "name": "CUserMessageHudText",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageTextMsg",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "dest",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "param",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMessageGameTitle",
            "fields": []
        },
        {
            "name": "CUserMessageResetHUD",
            "fields": []
        },
        {
            "name": "CUserMessageSendAudio",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "soundname",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "stop",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMessageAudioParameter",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "parameter_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "name_hash_code",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "value",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageVoiceMask",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "gamerules_masks",
                    "id": 1
                },
                {
                    "rule": "repeated",
                    "type": "uint32",
                    "name": "ban_masks",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "mod_enable",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageRequestState",
            "fields": []
        },
        {
            "name": "CUserMessageHintText",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "message",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageKeyHintText",
            "fields": [
                {
                    "rule": "repeated",
                    "type": "string",
                    "name": "messages",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageVoiceSubtitle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "menu",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "item",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageVGUIMenu",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "show",
                    "id": 2
                },
                {
                    "rule": "repeated",
                    "type": "Keys",
                    "name": "keys",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Keys",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "name",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "value",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CUserMessageRumble",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "index",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "data",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "flags",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageTrain",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "position",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageSayTextChannel",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "player",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "channel",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 3
                }
            ]
        },
        {
            "name": "CUserMessageColoredText",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "color",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "text",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "reset",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "context_player_id",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "context_value",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "context_team_id",
                    "id": 6
                }
            ]
        },
        {
            "name": "CUserMessageItemPickup",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "itemname",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageAmmoDenied",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "ammo_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageCrosshairAngle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angcrosshair",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMessageShowMenu",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "validslots",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "displaytime",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "needmore",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "menustring",
                    "id": 4
                }
            ]
        },
        {
            "name": "CUserMessageCreditsMsg",
            "fields": [
                {
                    "rule": "optional",
                    "type": "eRollType",
                    "name": "rolltype",
                    "id": 1,
                    "options": {
                        "default": "ROLL_NONE"
                    }
                }
            ]
        },
        {
            "name": "CEntityMessagePlayJingle",
            "fields": []
        },
        {
            "name": "CEntityMessageScreenOverlay",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "start_effect",
                    "id": 1
                }
            ]
        },
        {
            "name": "CEntityMessageRemoveAllDecals",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "remove_decals",
                    "id": 1
                }
            ]
        },
        {
            "name": "CEntityMessagePropagateForce",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "impulse",
                    "id": 1
                }
            ]
        },
        {
            "name": "CEntityMessageDoSpark",
            "fields": [
                {
                    "rule": "optional",
                    "type": "CMsgVector",
                    "name": "origin",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "entityindex",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "radius",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "fixed32",
                    "name": "color",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "beams",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "thick",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 7
                }
            ]
        },
        {
            "name": "CEntityMessageFixAngle",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bool",
                    "name": "relative",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "CMsgQAngle",
                    "name": "angle",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMessageCameraTransition",
            "fields": [
                {
                    "rule": "optional",
                    "type": "uint32",
                    "name": "camera_type",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "float",
                    "name": "duration",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "Transition_DataDriven",
                    "name": "params_data_driven",
                    "id": 3
                }
            ],
            "messages": [
                {
                    "name": "Transition_DataDriven",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "string",
                            "name": "filename",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attach_ent_index",
                            "id": 2
                        }
                    ]
                }
            ]
        },
        {
            "name": "CUserMsg_ParticleManager",
            "fields": [
                {
                    "rule": "required",
                    "type": "PARTICLE_MESSAGE",
                    "name": "type",
                    "id": 1,
                    "options": {
                        "default": "GAME_PARTICLE_MANAGER_EVENT_CREATE"
                    }
                },
                {
                    "rule": "required",
                    "type": "uint32",
                    "name": "index",
                    "id": 2
                },
                {
                    "rule": "optional",
                    "type": "ReleaseParticleIndex",
                    "name": "release_particle_index",
                    "id": 3
                },
                {
                    "rule": "optional",
                    "type": "CreateParticle",
                    "name": "create_particle",
                    "id": 4
                },
                {
                    "rule": "optional",
                    "type": "DestroyParticle",
                    "name": "destroy_particle",
                    "id": 5
                },
                {
                    "rule": "optional",
                    "type": "DestroyParticleInvolving",
                    "name": "destroy_particle_involving",
                    "id": 6
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticle",
                    "name": "update_particle",
                    "id": 7
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleFwd",
                    "name": "update_particle_fwd",
                    "id": 8
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleOrient",
                    "name": "update_particle_orient",
                    "id": 9
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleFallback",
                    "name": "update_particle_fallback",
                    "id": 10
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleOffset",
                    "name": "update_particle_offset",
                    "id": 11
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleEnt",
                    "name": "update_particle_ent",
                    "id": 12
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleShouldDraw",
                    "name": "update_particle_should_draw",
                    "id": 14
                },
                {
                    "rule": "optional",
                    "type": "UpdateParticleSetFrozen",
                    "name": "update_particle_set_frozen",
                    "id": 15
                },
                {
                    "rule": "optional",
                    "type": "ChangeControlPointAttachment",
                    "name": "change_control_point_attachment",
                    "id": 16
                }
            ],
            "messages": [
                {
                    "name": "ReleaseParticleIndex",
                    "fields": []
                },
                {
                    "name": "CreateParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "fixed64",
                            "name": "particle_name_index",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attach_type",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "DestroyParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "destroy_immediately",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "DestroyParticleInvolving",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "destroy_immediately",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        }
                    ]
                },
                {
                    "name": "UpdateParticle",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "position",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleFwd",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "forward",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleOrient",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "forward",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "right",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "up",
                            "id": 4
                        }
                    ]
                },
                {
                    "name": "UpdateParticleFallback",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "position",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleOffset",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "origin_offset",
                            "id": 2
                        }
                    ]
                },
                {
                    "name": "UpdateParticleEnt",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "control_point",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attach_type",
                            "id": 3
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment",
                            "id": 4
                        },
                        {
                            "rule": "optional",
                            "type": "CMsgVector",
                            "name": "fallback_position",
                            "id": 5
                        },
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "include_wearables",
                            "id": 6
                        }
                    ]
                },
                {
                    "name": "UpdateParticleSetFrozen",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "set_frozen",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "UpdateParticleShouldDraw",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "bool",
                            "name": "should_draw",
                            "id": 1
                        }
                    ]
                },
                {
                    "name": "ChangeControlPointAttachment",
                    "fields": [
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment_old",
                            "id": 1
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "attachment_new",
                            "id": 2
                        },
                        {
                            "rule": "optional",
                            "type": "int32",
                            "name": "entity_handle",
                            "id": 3
                        }
                    ]
                }
            ]
        },
        {
            "name": "CUserMsg_HudError",
            "fields": [
                {
                    "rule": "optional",
                    "type": "int32",
                    "name": "order_id",
                    "id": 1
                }
            ]
        },
        {
            "name": "CUserMsg_CustomGameEvent_ClientToServer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "event_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMsg_CustomGameEvent_ServerToClient",
            "fields": [
                {
                    "rule": "optional",
                    "type": "string",
                    "name": "event_name",
                    "id": 1
                },
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 2
                }
            ]
        },
        {
            "name": "CUserMsg_TrackedControllerInput_ClientToServer",
            "fields": [
                {
                    "rule": "optional",
                    "type": "bytes",
                    "name": "data",
                    "id": 1
                }
            ]
        }
    ],
    "enums": [
        {
            "name": "GCProtoBufMsgSrc",
            "values": [
                {
                    "name": "GCProtoBufMsgSrc_Unspecified",
                    "id": 0
                },
                {
                    "name": "GCProtoBufMsgSrc_FromSystem",
                    "id": 1
                },
                {
                    "name": "GCProtoBufMsgSrc_FromSteamID",
                    "id": 2
                },
                {
                    "name": "GCProtoBufMsgSrc_FromGC",
                    "id": 3
                },
                {
                    "name": "GCProtoBufMsgSrc_ReplySystem",
                    "id": 4
                }
            ]
        },
        {
            "name": "EGCBaseMsg",
            "values": [
                {
                    "name": "k_EMsgGCSystemMessage",
                    "id": 4001
                },
                {
                    "name": "k_EMsgGCReplicateConVars",
                    "id": 4002
                },
                {
                    "name": "k_EMsgGCConVarUpdated",
                    "id": 4003
                },
                {
                    "name": "k_EMsgGCInviteToParty",
                    "id": 4501
                },
                {
                    "name": "k_EMsgGCInvitationCreated",
                    "id": 4502
                },
                {
                    "name": "k_EMsgGCPartyInviteResponse",
                    "id": 4503
                },
                {
                    "name": "k_EMsgGCKickFromParty",
                    "id": 4504
                },
                {
                    "name": "k_EMsgGCLeaveParty",
                    "id": 4505
                },
                {
                    "name": "k_EMsgGCServerAvailable",
                    "id": 4506
                },
                {
                    "name": "k_EMsgGCClientConnectToServer",
                    "id": 4507
                },
                {
                    "name": "k_EMsgGCGameServerInfo",
                    "id": 4508
                },
                {
                    "name": "k_EMsgGCError",
                    "id": 4509
                },
                {
                    "name": "k_EMsgGCReplay_UploadedToYouTube",
                    "id": 4510
                },
                {
                    "name": "k_EMsgGCLANServerAvailable",
                    "id": 4511
                },
                {
                    "name": "k_EMsgGCInviteToLobby",
                    "id": 4512
                },
                {
                    "name": "k_EMsgGCLobbyInviteResponse",
                    "id": 4513
                }
            ]
        },
        {
            "name": "EGCBaseProtoObjectTypes",
            "values": [
                {
                    "name": "k_EProtoObjectPartyInvite",
                    "id": 1001
                },
                {
                    "name": "k_EProtoObjectLobbyInvite",
                    "id": 1002
                }
            ]
        },
        {
            "name": "ECustomGameInstallStatus",
            "values": [
                {
                    "name": "k_ECustomGameInstallStatus_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ECustomGameInstallStatus_Ready",
                    "id": 1
                },
                {
                    "name": "k_ECustomGameInstallStatus_Busy",
                    "id": 2
                },
                {
                    "name": "k_ECustomGameInstallStatus_FailedGeneric",
                    "id": 101
                },
                {
                    "name": "k_ECustomGameInstallStatus_FailedInternalError",
                    "id": 102
                },
                {
                    "name": "k_ECustomGameInstallStatus_RequestedTimestampTooOld",
                    "id": 103
                },
                {
                    "name": "k_ECustomGameInstallStatus_RequestedTimestampTooNew",
                    "id": 104
                },
                {
                    "name": "k_ECustomGameInstallStatus_CRCMismatch",
                    "id": 105
                },
                {
                    "name": "k_ECustomGameInstallStatus_FailedSteam",
                    "id": 106
                },
                {
                    "name": "k_ECustomGameInstallStatus_FailedCanceled",
                    "id": 107
                }
            ]
        },
        {
            "name": "GC_BannedWordType",
            "values": [
                {
                    "name": "GC_BANNED_WORD_DISABLE_WORD",
                    "id": 0
                },
                {
                    "name": "GC_BANNED_WORD_ENABLE_WORD",
                    "id": 1
                }
            ]
        },
        {
            "name": "ENetworkDisconnectionReason",
            "values": [
                {
                    "name": "NETWORK_DISCONNECT_INVALID",
                    "id": 0
                },
                {
                    "name": "NETWORK_DISCONNECT_SHUTDOWN",
                    "id": 1
                },
                {
                    "name": "NETWORK_DISCONNECT_DISCONNECT_BY_USER",
                    "id": 2
                },
                {
                    "name": "NETWORK_DISCONNECT_DISCONNECT_BY_SERVER",
                    "id": 3
                },
                {
                    "name": "NETWORK_DISCONNECT_LOST",
                    "id": 4
                },
                {
                    "name": "NETWORK_DISCONNECT_OVERFLOW",
                    "id": 5
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_BANNED",
                    "id": 6
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_INUSE",
                    "id": 7
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_TICKET",
                    "id": 8
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_LOGON",
                    "id": 9
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_AUTHCANCELLED",
                    "id": 10
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_AUTHALREADYUSED",
                    "id": 11
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_AUTHINVALID",
                    "id": 12
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_VACBANSTATE",
                    "id": 13
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_LOGGED_IN_ELSEWHERE",
                    "id": 14
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_VAC_CHECK_TIMEDOUT",
                    "id": 15
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_DROPPED",
                    "id": 16
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_OWNERSHIP",
                    "id": 17
                },
                {
                    "name": "NETWORK_DISCONNECT_SERVERINFO_OVERFLOW",
                    "id": 18
                },
                {
                    "name": "NETWORK_DISCONNECT_TICKMSG_OVERFLOW",
                    "id": 19
                },
                {
                    "name": "NETWORK_DISCONNECT_STRINGTABLEMSG_OVERFLOW",
                    "id": 20
                },
                {
                    "name": "NETWORK_DISCONNECT_DELTAENTMSG_OVERFLOW",
                    "id": 21
                },
                {
                    "name": "NETWORK_DISCONNECT_TEMPENTMSG_OVERFLOW",
                    "id": 22
                },
                {
                    "name": "NETWORK_DISCONNECT_SOUNDSMSG_OVERFLOW",
                    "id": 23
                },
                {
                    "name": "NETWORK_DISCONNECT_SNAPSHOTOVERFLOW",
                    "id": 24
                },
                {
                    "name": "NETWORK_DISCONNECT_SNAPSHOTERROR",
                    "id": 25
                },
                {
                    "name": "NETWORK_DISCONNECT_RELIABLEOVERFLOW",
                    "id": 26
                },
                {
                    "name": "NETWORK_DISCONNECT_BADDELTATICK",
                    "id": 27
                },
                {
                    "name": "NETWORK_DISCONNECT_NOMORESPLITS",
                    "id": 28
                },
                {
                    "name": "NETWORK_DISCONNECT_TIMEDOUT",
                    "id": 29
                },
                {
                    "name": "NETWORK_DISCONNECT_DISCONNECTED",
                    "id": 30
                },
                {
                    "name": "NETWORK_DISCONNECT_LEAVINGSPLIT",
                    "id": 31
                },
                {
                    "name": "NETWORK_DISCONNECT_DIFFERENTCLASSTABLES",
                    "id": 32
                },
                {
                    "name": "NETWORK_DISCONNECT_BADRELAYPASSWORD",
                    "id": 33
                },
                {
                    "name": "NETWORK_DISCONNECT_BADSPECTATORPASSWORD",
                    "id": 34
                },
                {
                    "name": "NETWORK_DISCONNECT_HLTVRESTRICTED",
                    "id": 35
                },
                {
                    "name": "NETWORK_DISCONNECT_NOSPECTATORS",
                    "id": 36
                },
                {
                    "name": "NETWORK_DISCONNECT_HLTVUNAVAILABLE",
                    "id": 37
                },
                {
                    "name": "NETWORK_DISCONNECT_HLTVSTOP",
                    "id": 38
                },
                {
                    "name": "NETWORK_DISCONNECT_KICKED",
                    "id": 39
                },
                {
                    "name": "NETWORK_DISCONNECT_BANADDED",
                    "id": 40
                },
                {
                    "name": "NETWORK_DISCONNECT_KICKBANADDED",
                    "id": 41
                },
                {
                    "name": "NETWORK_DISCONNECT_HLTVDIRECT",
                    "id": 42
                },
                {
                    "name": "NETWORK_DISCONNECT_PURESERVER_CLIENTEXTRA",
                    "id": 43
                },
                {
                    "name": "NETWORK_DISCONNECT_PURESERVER_MISMATCH",
                    "id": 44
                },
                {
                    "name": "NETWORK_DISCONNECT_USERCMD",
                    "id": 45
                },
                {
                    "name": "NETWORK_DISCONNECT_REJECTED_BY_GAME",
                    "id": 46
                },
                {
                    "name": "NETWORK_DISCONNECT_MESSAGE_PARSE_ERROR",
                    "id": 47
                },
                {
                    "name": "NETWORK_DISCONNECT_INVALID_MESSAGE_ERROR",
                    "id": 48
                },
                {
                    "name": "NETWORK_DISCONNECT_BAD_SERVER_PASSWORD",
                    "id": 49
                },
                {
                    "name": "NETWORK_DISCONNECT_DIRECT_CONNECT_RESERVATION",
                    "id": 50
                },
                {
                    "name": "NETWORK_DISCONNECT_CONNECTION_FAILURE",
                    "id": 51
                },
                {
                    "name": "NETWORK_DISCONNECT_NO_PEER_GROUP_HANDLERS",
                    "id": 52
                },
                {
                    "name": "NETWORK_DISCONNECT_RECONNECTION",
                    "id": 53
                },
                {
                    "name": "NETWORK_DISCONNECT_LOOPSHUTDOWN",
                    "id": 54
                },
                {
                    "name": "NETWORK_DISCONNECT_LOOPDEACTIVATE",
                    "id": 55
                },
                {
                    "name": "NETWORK_DISCONNECT_HOST_ENDGAME",
                    "id": 56
                },
                {
                    "name": "NETWORK_DISCONNECT_LOOP_LEVELLOAD_ACTIVATE",
                    "id": 57
                },
                {
                    "name": "NETWORK_DISCONNECT_CREATE_SERVER_FAILED",
                    "id": 58
                },
                {
                    "name": "NETWORK_DISCONNECT_EXITING",
                    "id": 59
                },
                {
                    "name": "NETWORK_DISCONNECT_REQUEST_HOSTSTATE_IDLE",
                    "id": 60
                },
                {
                    "name": "NETWORK_DISCONNECT_REQUEST_HOSTSTATE_HLTVRELAY",
                    "id": 61
                },
                {
                    "name": "NETWORK_DISCONNECT_CLIENT_CONSISTENCY_FAIL",
                    "id": 62
                },
                {
                    "name": "NETWORK_DISCONNECT_CLIENT_UNABLE_TO_CRC_MAP",
                    "id": 63
                },
                {
                    "name": "NETWORK_DISCONNECT_CLIENT_NO_MAP",
                    "id": 64
                },
                {
                    "name": "NETWORK_DISCONNECT_CLIENT_DIFFERENT_MAP",
                    "id": 65
                },
                {
                    "name": "NETWORK_DISCONNECT_SERVER_REQUIRES_STEAM",
                    "id": 66
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_DENY_MISC",
                    "id": 67
                },
                {
                    "name": "NETWORK_DISCONNECT_STEAM_DENY_BAD_ANTI_CHEAT",
                    "id": 68
                },
                {
                    "name": "NETWORK_DISCONNECT_SERVER_SHUTDOWN",
                    "id": 69
                },
                {
                    "name": "NETWORK_DISCONNECT_SPLITPACKET_SEND_OVERFLOW",
                    "id": 70
                },
                {
                    "name": "NETWORK_DISCONNECT_REPLAY_INCOMPATIBLE",
                    "id": 71
                }
            ]
        },
        {
            "name": "NET_Messages",
            "values": [
                {
                    "name": "net_NOP",
                    "id": 0
                },
                {
                    "name": "net_Disconnect",
                    "id": 1
                },
                {
                    "name": "net_SplitScreenUser",
                    "id": 3
                },
                {
                    "name": "net_Tick",
                    "id": 4
                },
                {
                    "name": "net_StringCmd",
                    "id": 5
                },
                {
                    "name": "net_SetConVar",
                    "id": 6
                },
                {
                    "name": "net_SignonState",
                    "id": 7
                },
                {
                    "name": "net_SpawnGroup_Load",
                    "id": 8
                },
                {
                    "name": "net_SpawnGroup_ManifestUpdate",
                    "id": 9
                },
                {
                    "name": "net_SpawnGroup_SetCreationTick",
                    "id": 11
                },
                {
                    "name": "net_SpawnGroup_Unload",
                    "id": 12
                },
                {
                    "name": "net_SpawnGroup_LoadCompleted",
                    "id": 13
                }
            ]
        },
        {
            "name": "SpawnGroupFlags_t",
            "values": [
                {
                    "name": "SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE",
                    "id": 1
                },
                {
                    "name": "SPAWN_GROUP_DONT_SPAWN_ENTITIES",
                    "id": 2
                },
                {
                    "name": "SPAWN_GROUP_SYNCHRONOUS_SPAWN",
                    "id": 4
                },
                {
                    "name": "SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP",
                    "id": 8
                },
                {
                    "name": "SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES",
                    "id": 16
                },
                {
                    "name": "SPAWN_GROUP_SAVE_ENTITIES",
                    "id": 32
                },
                {
                    "name": "SPAWN_GROUP_BLOCK_UNTIL_LOADED",
                    "id": 64
                },
                {
                    "name": "SPAWN_GROUP_LOAD_STREAMING_DATA",
                    "id": 128
                },
                {
                    "name": "SPAWN_GROUP_CREATE_NEW_SCENE_WORLD",
                    "id": 256
                }
            ]
        },
        {
            "name": "CLC_Messages",
            "values": [
                {
                    "name": "clc_ClientInfo",
                    "id": 20
                },
                {
                    "name": "clc_Move",
                    "id": 21
                },
                {
                    "name": "clc_VoiceData",
                    "id": 22
                },
                {
                    "name": "clc_BaselineAck",
                    "id": 23
                },
                {
                    "name": "clc_ListenEvents",
                    "id": 24
                },
                {
                    "name": "clc_RespondCvarValue",
                    "id": 25
                },
                {
                    "name": "clc_FileCRCCheck",
                    "id": 26
                },
                {
                    "name": "clc_LoadingProgress",
                    "id": 27
                },
                {
                    "name": "clc_SplitPlayerConnect",
                    "id": 28
                },
                {
                    "name": "clc_ClientMessage",
                    "id": 29
                },
                {
                    "name": "clc_SplitPlayerDisconnect",
                    "id": 30
                },
                {
                    "name": "clc_ServerStatus",
                    "id": 31
                },
                {
                    "name": "clc_ServerPing",
                    "id": 32
                },
                {
                    "name": "clc_RequestPause",
                    "id": 33
                },
                {
                    "name": "clc_CmdKeyValues",
                    "id": 34
                }
            ]
        },
        {
            "name": "SVC_Messages",
            "values": [
                {
                    "name": "svc_ServerInfo",
                    "id": 40
                },
                {
                    "name": "svc_FlattenedSerializer",
                    "id": 41
                },
                {
                    "name": "svc_ClassInfo",
                    "id": 42
                },
                {
                    "name": "svc_SetPause",
                    "id": 43
                },
                {
                    "name": "svc_CreateStringTable",
                    "id": 44
                },
                {
                    "name": "svc_UpdateStringTable",
                    "id": 45
                },
                {
                    "name": "svc_VoiceInit",
                    "id": 46
                },
                {
                    "name": "svc_VoiceData",
                    "id": 47
                },
                {
                    "name": "svc_Print",
                    "id": 48
                },
                {
                    "name": "svc_Sounds",
                    "id": 49
                },
                {
                    "name": "svc_SetView",
                    "id": 50
                },
                {
                    "name": "svc_ClearAllStringTables",
                    "id": 51
                },
                {
                    "name": "svc_CmdKeyValues",
                    "id": 52
                },
                {
                    "name": "svc_BSPDecal",
                    "id": 53
                },
                {
                    "name": "svc_SplitScreen",
                    "id": 54
                },
                {
                    "name": "svc_PacketEntities",
                    "id": 55
                },
                {
                    "name": "svc_Prefetch",
                    "id": 56
                },
                {
                    "name": "svc_Menu",
                    "id": 57
                },
                {
                    "name": "svc_GetCvarValue",
                    "id": 58
                },
                {
                    "name": "svc_StopSound",
                    "id": 59
                },
                {
                    "name": "svc_PeerList",
                    "id": 60
                },
                {
                    "name": "svc_PacketReliable",
                    "id": 61
                },
                {
                    "name": "svc_UserMessage",
                    "id": 62
                },
                {
                    "name": "svc_SendTable",
                    "id": 63
                },
                {
                    "name": "svc_GameEvent",
                    "id": 67
                },
                {
                    "name": "svc_TempEntities",
                    "id": 68
                },
                {
                    "name": "svc_GameEventList",
                    "id": 69
                },
                {
                    "name": "svc_FullFrameSplit",
                    "id": 70
                }
            ]
        },
        {
            "name": "VoiceDataFormat_t",
            "values": [
                {
                    "name": "VOICEDATA_FORMAT_STEAM",
                    "id": 0
                },
                {
                    "name": "VOICEDATA_FORMAT_ENGINE",
                    "id": 1
                }
            ]
        },
        {
            "name": "RequestPause_t",
            "values": [
                {
                    "name": "RP_PAUSE",
                    "id": 0
                },
                {
                    "name": "RP_UNPAUSE",
                    "id": 1
                },
                {
                    "name": "RP_TOGGLEPAUSE",
                    "id": 2
                }
            ]
        },
        {
            "name": "PrefetchType",
            "values": [
                {
                    "name": "PFT_SOUND",
                    "id": 0
                }
            ]
        },
        {
            "name": "ESplitScreenMessageType",
            "values": [
                {
                    "name": "MSG_SPLITSCREEN_ADDUSER",
                    "id": 0
                },
                {
                    "name": "MSG_SPLITSCREEN_REMOVEUSER",
                    "id": 1
                }
            ]
        },
        {
            "name": "EQueryCvarValueStatus",
            "values": [
                {
                    "name": "eQueryCvarValueStatus_ValueIntact",
                    "id": 0
                },
                {
                    "name": "eQueryCvarValueStatus_CvarNotFound",
                    "id": 1
                },
                {
                    "name": "eQueryCvarValueStatus_NotACvar",
                    "id": 2
                },
                {
                    "name": "eQueryCvarValueStatus_CvarProtected",
                    "id": 3
                }
            ]
        },
        {
            "name": "DIALOG_TYPE",
            "values": [
                {
                    "name": "DIALOG_MSG",
                    "id": 0
                },
                {
                    "name": "DIALOG_MENU",
                    "id": 1
                },
                {
                    "name": "DIALOG_TEXT",
                    "id": 2
                },
                {
                    "name": "DIALOG_ENTRY",
                    "id": 3
                },
                {
                    "name": "DIALOG_ASKCONNECT",
                    "id": 4
                }
            ]
        },
        {
            "name": "SVC_Messages_LowFrequency",
            "values": [
                {
                    "name": "svc_dummy",
                    "id": 600
                }
            ]
        },
        {
            "name": "Bidirectional_Messages",
            "values": [
                {
                    "name": "bi_RebroadcastGameEvent",
                    "id": 16
                },
                {
                    "name": "bi_RebroadcastSource",
                    "id": 17
                },
                {
                    "name": "bi_GameEvent",
                    "id": 18
                }
            ]
        },
        {
            "name": "Bidirectional_Messages_LowFrequency",
            "values": [
                {
                    "name": "bi_RelayInfo",
                    "id": 700
                },
                {
                    "name": "bi_RelayPacket",
                    "id": 701
                }
            ]
        },
        {
            "name": "P2P_Messages",
            "values": [
                {
                    "name": "p2p_TextMessage",
                    "id": 256
                },
                {
                    "name": "p2p_Voice",
                    "id": 257
                },
                {
                    "name": "p2p_Ping",
                    "id": 258
                }
            ]
        },
        {
            "name": "EDemoCommands",
            "values": [
                {
                    "name": "DEM_Error",
                    "id": -1
                },
                {
                    "name": "DEM_Stop",
                    "id": 0
                },
                {
                    "name": "DEM_FileHeader",
                    "id": 1
                },
                {
                    "name": "DEM_FileInfo",
                    "id": 2
                },
                {
                    "name": "DEM_SyncTick",
                    "id": 3
                },
                {
                    "name": "DEM_SendTables",
                    "id": 4
                },
                {
                    "name": "DEM_ClassInfo",
                    "id": 5
                },
                {
                    "name": "DEM_StringTables",
                    "id": 6
                },
                {
                    "name": "DEM_Packet",
                    "id": 7
                },
                {
                    "name": "DEM_SignonPacket",
                    "id": 8
                },
                {
                    "name": "DEM_ConsoleCmd",
                    "id": 9
                },
                {
                    "name": "DEM_CustomData",
                    "id": 10
                },
                {
                    "name": "DEM_CustomDataCallbacks",
                    "id": 11
                },
                {
                    "name": "DEM_UserCmd",
                    "id": 12
                },
                {
                    "name": "DEM_FullPacket",
                    "id": 13
                },
                {
                    "name": "DEM_SaveGame",
                    "id": 14
                },
                {
                    "name": "DEM_SpawnGroups",
                    "id": 15
                },
                {
                    "name": "DEM_Max",
                    "id": 16
                },
                {
                    "name": "DEM_IsCompressed",
                    "id": 64
                }
            ]
        },
        {
            "name": "EDotaBroadcastMessages",
            "values": [
                {
                    "name": "DOTA_BM_LANLobbyRequest",
                    "id": 1
                },
                {
                    "name": "DOTA_BM_LANLobbyReply",
                    "id": 2
                }
            ]
        },
        {
            "name": "EDOTAChatWheelMessage",
            "values": [
                {
                    "name": "k_EDOTA_CW_Ok",
                    "id": 0
                },
                {
                    "name": "k_EDOTA_CW_Care",
                    "id": 1
                },
                {
                    "name": "k_EDOTA_CW_GetBack",
                    "id": 2
                },
                {
                    "name": "k_EDOTA_CW_NeedWards",
                    "id": 3
                },
                {
                    "name": "k_EDOTA_CW_Stun",
                    "id": 4
                },
                {
                    "name": "k_EDOTA_CW_Help",
                    "id": 5
                },
                {
                    "name": "k_EDOTA_CW_Push",
                    "id": 6
                },
                {
                    "name": "k_EDOTA_CW_GoodJob",
                    "id": 7
                },
                {
                    "name": "k_EDOTA_CW_Missing",
                    "id": 8
                },
                {
                    "name": "k_EDOTA_CW_Missing_Top",
                    "id": 9
                },
                {
                    "name": "k_EDOTA_CW_Missing_Mid",
                    "id": 10
                },
                {
                    "name": "k_EDOTA_CW_Missing_Bottom",
                    "id": 11
                },
                {
                    "name": "k_EDOTA_CW_Go",
                    "id": 12
                },
                {
                    "name": "k_EDOTA_CW_Initiate",
                    "id": 13
                },
                {
                    "name": "k_EDOTA_CW_Follow",
                    "id": 14
                },
                {
                    "name": "k_EDOTA_CW_Group_Up",
                    "id": 15
                },
                {
                    "name": "k_EDOTA_CW_Spread_Out",
                    "id": 16
                },
                {
                    "name": "k_EDOTA_CW_Split_Farm",
                    "id": 17
                },
                {
                    "name": "k_EDOTA_CW_Attack",
                    "id": 18
                },
                {
                    "name": "k_EDOTA_CW_BRB",
                    "id": 19
                },
                {
                    "name": "k_EDOTA_CW_Dive",
                    "id": 20
                },
                {
                    "name": "k_EDOTA_CW_OMW",
                    "id": 21
                },
                {
                    "name": "k_EDOTA_CW_Get_Ready",
                    "id": 22
                },
                {
                    "name": "k_EDOTA_CW_Bait",
                    "id": 23
                },
                {
                    "name": "k_EDOTA_CW_Heal",
                    "id": 24
                },
                {
                    "name": "k_EDOTA_CW_Mana",
                    "id": 25
                },
                {
                    "name": "k_EDOTA_CW_OOM",
                    "id": 26
                },
                {
                    "name": "k_EDOTA_CW_Skill_Cooldown",
                    "id": 27
                },
                {
                    "name": "k_EDOTA_CW_Ulti_Ready",
                    "id": 28
                },
                {
                    "name": "k_EDOTA_CW_Enemy_Returned",
                    "id": 29
                },
                {
                    "name": "k_EDOTA_CW_All_Missing",
                    "id": 30
                },
                {
                    "name": "k_EDOTA_CW_Enemy_Incoming",
                    "id": 31
                },
                {
                    "name": "k_EDOTA_CW_Invis_Enemy",
                    "id": 32
                },
                {
                    "name": "k_EDOTA_CW_Enemy_Had_Rune",
                    "id": 33
                },
                {
                    "name": "k_EDOTA_CW_Split_Push",
                    "id": 34
                },
                {
                    "name": "k_EDOTA_CW_Coming_To_Gank",
                    "id": 35
                },
                {
                    "name": "k_EDOTA_CW_Request_Gank",
                    "id": 36
                },
                {
                    "name": "k_EDOTA_CW_Fight_Under_Tower",
                    "id": 37
                },
                {
                    "name": "k_EDOTA_CW_Deny_Tower",
                    "id": 38
                },
                {
                    "name": "k_EDOTA_CW_Buy_Courier",
                    "id": 39
                },
                {
                    "name": "k_EDOTA_CW_Upgrade_Courier",
                    "id": 40
                },
                {
                    "name": "k_EDOTA_CW_Need_Detection",
                    "id": 41
                },
                {
                    "name": "k_EDOTA_CW_They_Have_Detection",
                    "id": 42
                },
                {
                    "name": "k_EDOTA_CW_Buy_TP",
                    "id": 43
                },
                {
                    "name": "k_EDOTA_CW_Reuse_Courier",
                    "id": 44
                },
                {
                    "name": "k_EDOTA_CW_Deward",
                    "id": 45
                },
                {
                    "name": "k_EDOTA_CW_Building_Mek",
                    "id": 46
                },
                {
                    "name": "k_EDOTA_CW_Building_Pipe",
                    "id": 47
                },
                {
                    "name": "k_EDOTA_CW_Stack_And_Pull",
                    "id": 48
                },
                {
                    "name": "k_EDOTA_CW_Pull",
                    "id": 49
                },
                {
                    "name": "k_EDOTA_CW_Pulling",
                    "id": 50
                },
                {
                    "name": "k_EDOTA_CW_Stack",
                    "id": 51
                },
                {
                    "name": "k_EDOTA_CW_Jungling",
                    "id": 52
                },
                {
                    "name": "k_EDOTA_CW_Roshan",
                    "id": 53
                },
                {
                    "name": "k_EDOTA_CW_Affirmative",
                    "id": 54
                },
                {
                    "name": "k_EDOTA_CW_Wait",
                    "id": 55
                },
                {
                    "name": "k_EDOTA_CW_Pause",
                    "id": 56
                },
                {
                    "name": "k_EDOTA_CW_Current_Time",
                    "id": 57
                },
                {
                    "name": "k_EDOTA_CW_Check_Runes",
                    "id": 58
                },
                {
                    "name": "k_EDOTA_CW_Smoke_Gank",
                    "id": 59
                },
                {
                    "name": "k_EDOTA_CW_GLHF",
                    "id": 60
                },
                {
                    "name": "k_EDOTA_CW_Nice",
                    "id": 61
                },
                {
                    "name": "k_EDOTA_CW_Thanks",
                    "id": 62
                },
                {
                    "name": "k_EDOTA_CW_Sorry",
                    "id": 63
                },
                {
                    "name": "k_EDOTA_CW_No_Give_Up",
                    "id": 64
                },
                {
                    "name": "k_EDOTA_CW_Just_Happened",
                    "id": 65
                },
                {
                    "name": "k_EDOTA_CW_Game_Is_Hard",
                    "id": 66
                },
                {
                    "name": "k_EDOTA_CW_New_Meta",
                    "id": 67
                },
                {
                    "name": "k_EDOTA_CW_My_Bad",
                    "id": 68
                },
                {
                    "name": "k_EDOTA_CW_Regret",
                    "id": 69
                },
                {
                    "name": "k_EDOTA_CW_Relax",
                    "id": 70
                },
                {
                    "name": "k_EDOTA_CW_MissingHero",
                    "id": 71
                },
                {
                    "name": "k_EDOTA_CW_ReturnedHero",
                    "id": 72
                },
                {
                    "name": "k_EDOTA_CW_GG",
                    "id": 73
                },
                {
                    "name": "k_EDOTA_CW_GGWP",
                    "id": 74
                },
                {
                    "name": "k_EDOTA_CW_All_GG",
                    "id": 75
                },
                {
                    "name": "k_EDOTA_CW_All_GGWP",
                    "id": 76
                },
                {
                    "name": "k_EDOTA_CW_What_To_Buy",
                    "id": 77
                },
                {
                    "name": "k_EDOTA_CW_Im_Retreating",
                    "id": 78
                },
                {
                    "name": "k_EDOTA_CW_Space_Created",
                    "id": 79
                },
                {
                    "name": "k_EDOTA_CW_Whoops",
                    "id": 80
                },
                {
                    "name": "k_EDOTA_CW_Tower_then_Back",
                    "id": 81
                },
                {
                    "name": "k_EDOTA_CW_Barracks_then_Back",
                    "id": 82
                },
                {
                    "name": "k_EDOTA_CW_Ward_Bottom_Rune",
                    "id": 83
                },
                {
                    "name": "k_EDOTA_CW_Ward_Top_Rune",
                    "id": 84
                },
                {
                    "name": "k_EDOTA_CW_Zeus_Ult",
                    "id": 85
                }
            ]
        },
        {
            "name": "EDOTAStatPopupTypes",
            "values": [
                {
                    "name": "k_EDOTA_SPT_Textline",
                    "id": 0
                },
                {
                    "name": "k_EDOTA_SPT_Basic",
                    "id": 1
                },
                {
                    "name": "k_EDOTA_SPT_Poll",
                    "id": 2
                },
                {
                    "name": "k_EDOTA_SPT_Grid",
                    "id": 3
                }
            ]
        },
        {
            "name": "dotaunitorder_t",
            "values": [
                {
                    "name": "DOTA_UNIT_ORDER_NONE",
                    "id": 0
                },
                {
                    "name": "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
                    "id": 1
                },
                {
                    "name": "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
                    "id": 2
                },
                {
                    "name": "DOTA_UNIT_ORDER_ATTACK_MOVE",
                    "id": 3
                },
                {
                    "name": "DOTA_UNIT_ORDER_ATTACK_TARGET",
                    "id": 4
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_POSITION",
                    "id": 5
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_TARGET",
                    "id": 6
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
                    "id": 7
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_NO_TARGET",
                    "id": 8
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_TOGGLE",
                    "id": 9
                },
                {
                    "name": "DOTA_UNIT_ORDER_HOLD_POSITION",
                    "id": 10
                },
                {
                    "name": "DOTA_UNIT_ORDER_TRAIN_ABILITY",
                    "id": 11
                },
                {
                    "name": "DOTA_UNIT_ORDER_DROP_ITEM",
                    "id": 12
                },
                {
                    "name": "DOTA_UNIT_ORDER_GIVE_ITEM",
                    "id": 13
                },
                {
                    "name": "DOTA_UNIT_ORDER_PICKUP_ITEM",
                    "id": 14
                },
                {
                    "name": "DOTA_UNIT_ORDER_PICKUP_RUNE",
                    "id": 15
                },
                {
                    "name": "DOTA_UNIT_ORDER_PURCHASE_ITEM",
                    "id": 16
                },
                {
                    "name": "DOTA_UNIT_ORDER_SELL_ITEM",
                    "id": 17
                },
                {
                    "name": "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
                    "id": 18
                },
                {
                    "name": "DOTA_UNIT_ORDER_MOVE_ITEM",
                    "id": 19
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
                    "id": 20
                },
                {
                    "name": "DOTA_UNIT_ORDER_STOP",
                    "id": 21
                },
                {
                    "name": "DOTA_UNIT_ORDER_TAUNT",
                    "id": 22
                },
                {
                    "name": "DOTA_UNIT_ORDER_BUYBACK",
                    "id": 23
                },
                {
                    "name": "DOTA_UNIT_ORDER_GLYPH",
                    "id": 24
                },
                {
                    "name": "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
                    "id": 25
                },
                {
                    "name": "DOTA_UNIT_ORDER_CAST_RUNE",
                    "id": 26
                },
                {
                    "name": "DOTA_UNIT_ORDER_PING_ABILITY",
                    "id": 27
                },
                {
                    "name": "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
                    "id": 28
                }
            ]
        },
        {
            "name": "EDotaClientMessages",
            "values": [
                {
                    "name": "DOTA_CM_MapLine",
                    "id": 301
                },
                {
                    "name": "DOTA_CM_AspectRatio",
                    "id": 302
                },
                {
                    "name": "DOTA_CM_MapPing",
                    "id": 303
                },
                {
                    "name": "DOTA_CM_UnitsAutoAttack",
                    "id": 304
                },
                {
                    "name": "DOTA_CM_AutoPurchaseItems",
                    "id": 305
                },
                {
                    "name": "DOTA_CM_TestItems",
                    "id": 306
                },
                {
                    "name": "DOTA_CM_SearchString",
                    "id": 307
                },
                {
                    "name": "DOTA_CM_Pause",
                    "id": 308
                },
                {
                    "name": "DOTA_CM_ShopViewMode",
                    "id": 309
                },
                {
                    "name": "DOTA_CM_SetUnitShareFlag",
                    "id": 310
                },
                {
                    "name": "DOTA_CM_SwapRequest",
                    "id": 311
                },
                {
                    "name": "DOTA_CM_SwapAccept",
                    "id": 312
                },
                {
                    "name": "DOTA_CM_WorldLine",
                    "id": 313
                },
                {
                    "name": "DOTA_CM_RequestGraphUpdate",
                    "id": 314
                },
                {
                    "name": "DOTA_CM_ItemAlert",
                    "id": 315
                },
                {
                    "name": "DOTA_CM_ChatWheel",
                    "id": 316
                },
                {
                    "name": "DOTA_CM_SendStatPopup",
                    "id": 317
                },
                {
                    "name": "DOTA_CM_BeginLastHitChallenge",
                    "id": 318
                },
                {
                    "name": "DOTA_CM_UpdateQuickBuy",
                    "id": 319
                },
                {
                    "name": "DOTA_CM_UpdateCoachListen",
                    "id": 320
                },
                {
                    "name": "DOTA_CM_CoachHUDPing",
                    "id": 321
                },
                {
                    "name": "DOTA_CM_RecordVote",
                    "id": 322
                },
                {
                    "name": "DOTA_CM_UnitsAutoAttackAfterSpell",
                    "id": 323
                },
                {
                    "name": "DOTA_CM_WillPurchaseAlert",
                    "id": 324
                },
                {
                    "name": "DOTA_CM_PlayerShowCase",
                    "id": 325
                },
                {
                    "name": "DOTA_CM_TeleportRequiresHalt",
                    "id": 326
                },
                {
                    "name": "DOTA_CM_CameraZoomAmount",
                    "id": 327
                },
                {
                    "name": "DOTA_CM_BroadcasterUsingCamerman",
                    "id": 328
                },
                {
                    "name": "DOTA_CM_BroadcasterUsingAssistedCameraOperator",
                    "id": 329
                },
                {
                    "name": "DOTA_CM_EnemyItemAlert",
                    "id": 330
                },
                {
                    "name": "DOTA_CM_FreeInventory",
                    "id": 331
                },
                {
                    "name": "DOTA_CM_BuyBackStateAlert",
                    "id": 332
                },
                {
                    "name": "DOTA_CM_QuickBuyAlert",
                    "id": 333
                },
                {
                    "name": "DOTA_CM_HeroStatueLike",
                    "id": 334
                },
                {
                    "name": "DOTA_CM_ModifierAlert",
                    "id": 335
                },
                {
                    "name": "DOTA_CM_TeamShowcaseEditor",
                    "id": 336
                },
                {
                    "name": "DOTA_CM_HPManaAlert",
                    "id": 337
                },
                {
                    "name": "DOTA_CM_GlyphAlert",
                    "id": 338
                },
                {
                    "name": "DOTA_CM_TeamShowcaseClientData",
                    "id": 339
                },
                {
                    "name": "DOTA_CM_PlayTeamShowcase",
                    "id": 340
                },
                {
                    "name": "DOTA_CM_EventCNY2015Cmd",
                    "id": 341
                },
                {
                    "name": "DOTA_CM_FillEmptySlotsWithBots",
                    "id": 342
                },
                {
                    "name": "DOTA_CM_DemoHero",
                    "id": 343
                },
                {
                    "name": "DOTA_CM_AbilityLearnModeToggled",
                    "id": 344
                },
                {
                    "name": "DOTA_CM_AbilityStartUse",
                    "id": 345
                },
                {
                    "name": "DOTA_CM_ChallengeSelect",
                    "id": 346
                },
                {
                    "name": "DOTA_CM_ChallengeReroll",
                    "id": 347
                },
                {
                    "name": "DOTA_CM_ClickedBuff",
                    "id": 348
                }
            ]
        },
        {
            "name": "ESourceEngine",
            "values": [
                {
                    "name": "k_ESE_Source1",
                    "id": 0
                },
                {
                    "name": "k_ESE_Source2",
                    "id": 1
                }
            ]
        },
        {
            "name": "PartnerAccountType",
            "values": [
                {
                    "name": "PARTNER_NONE",
                    "id": 0
                },
                {
                    "name": "PARTNER_PERFECT_WORLD",
                    "id": 1
                },
                {
                    "name": "PARTNER_NEXON",
                    "id": 2
                },
                {
                    "name": "PARTNER_INVALID",
                    "id": 3
                }
            ]
        },
        {
            "name": "GCConnectionStatus",
            "values": [
                {
                    "name": "GCConnectionStatus_HAVE_SESSION",
                    "id": 0
                },
                {
                    "name": "GCConnectionStatus_GC_GOING_DOWN",
                    "id": 1
                },
                {
                    "name": "GCConnectionStatus_NO_SESSION",
                    "id": 2
                },
                {
                    "name": "GCConnectionStatus_NO_SESSION_IN_LOGON_QUEUE",
                    "id": 3
                },
                {
                    "name": "GCConnectionStatus_NO_STEAM",
                    "id": 4
                },
                {
                    "name": "GCConnectionStatus_SUSPENDED",
                    "id": 5
                }
            ]
        },
        {
            "name": "EDOTAGCMsg",
            "values": [
                {
                    "name": "k_EMsgGCDOTABase",
                    "id": 7000
                },
                {
                    "name": "k_EMsgGCGeneralResponse",
                    "id": 7001
                },
                {
                    "name": "k_EMsgGCGameMatchSignOut",
                    "id": 7004
                },
                {
                    "name": "k_EMsgGCGameMatchSignOutResponse",
                    "id": 7005
                },
                {
                    "name": "k_EMsgGCJoinChatChannel",
                    "id": 7009
                },
                {
                    "name": "k_EMsgGCJoinChatChannelResponse",
                    "id": 7010
                },
                {
                    "name": "k_EMsgGCOtherJoinedChannel",
                    "id": 7013
                },
                {
                    "name": "k_EMsgGCOtherLeftChannel",
                    "id": 7014
                },
                {
                    "name": "k_EMsgGCMatchHistoryList",
                    "id": 7017
                },
                {
                    "name": "k_EMsgServerToGCRequestStatus",
                    "id": 7026
                },
                {
                    "name": "k_EMsgGCGetRecentMatches",
                    "id": 7027
                },
                {
                    "name": "k_EMsgGCRecentMatchesResponse",
                    "id": 7028
                },
                {
                    "name": "k_EMsgGCFindSourceTVGames",
                    "id": 7031
                },
                {
                    "name": "k_EMsgGCSourceTVGamesResponse",
                    "id": 7032
                },
                {
                    "name": "k_EMsgGCStartFindingMatch",
                    "id": 7033
                },
                {
                    "name": "k_EMsgGCConnectedPlayers",
                    "id": 7034
                },
                {
                    "name": "k_EMsgGCAbandonCurrentGame",
                    "id": 7035
                },
                {
                    "name": "k_EMsgGCStopFindingMatch",
                    "id": 7036
                },
                {
                    "name": "k_EMsgGCPracticeLobbyCreate",
                    "id": 7038
                },
                {
                    "name": "k_EMsgGCPracticeLobbyLeave",
                    "id": 7040
                },
                {
                    "name": "k_EMsgGCPracticeLobbyLaunch",
                    "id": 7041
                },
                {
                    "name": "k_EMsgGCPracticeLobbyList",
                    "id": 7042
                },
                {
                    "name": "k_EMsgGCPracticeLobbyListResponse",
                    "id": 7043
                },
                {
                    "name": "k_EMsgGCPracticeLobbyJoin",
                    "id": 7044
                },
                {
                    "name": "k_EMsgGCPracticeLobbySetDetails",
                    "id": 7046
                },
                {
                    "name": "k_EMsgGCPracticeLobbySetTeamSlot",
                    "id": 7047
                },
                {
                    "name": "k_EMsgGCInitialQuestionnaireResponse",
                    "id": 7049
                },
                {
                    "name": "k_EMsgGCTournamentRequest",
                    "id": 7051
                },
                {
                    "name": "k_EMsgGCTournamentResponse",
                    "id": 7052
                },
                {
                    "name": "k_EMsgGCPracticeLobbyResponse",
                    "id": 7055
                },
                {
                    "name": "k_EMsgGCBroadcastNotification",
                    "id": 7056
                },
                {
                    "name": "k_EMsgGCLiveScoreboardUpdate",
                    "id": 7057
                },
                {
                    "name": "k_EMsgGCRequestChatChannelList",
                    "id": 7060
                },
                {
                    "name": "k_EMsgGCRequestChatChannelListResponse",
                    "id": 7061
                },
                {
                    "name": "k_EMsgGCRequestMatches",
                    "id": 7064
                },
                {
                    "name": "k_EMsgGCRequestMatchesResponse",
                    "id": 7065
                },
                {
                    "name": "k_EMsgGCRequestPlayerResources",
                    "id": 7068
                },
                {
                    "name": "k_EMsgGCRequestPlayerResourcesResponse",
                    "id": 7069
                },
                {
                    "name": "k_EMsgGCReadyUp",
                    "id": 7070
                },
                {
                    "name": "k_EMsgGCKickedFromMatchmakingQueue",
                    "id": 7071
                },
                {
                    "name": "k_EMsgGCLeaverDetected",
                    "id": 7072
                },
                {
                    "name": "k_EMsgGCSpectateFriendGame",
                    "id": 7073
                },
                {
                    "name": "k_EMsgGCSpectateFriendGameResponse",
                    "id": 7074
                },
                {
                    "name": "k_EMsgGCPlayerReports",
                    "id": 7075
                },
                {
                    "name": "k_EMsgGCReportsRemainingRequest",
                    "id": 7076
                },
                {
                    "name": "k_EMsgGCReportsRemainingResponse",
                    "id": 7077
                },
                {
                    "name": "k_EMsgGCSubmitPlayerReport",
                    "id": 7078
                },
                {
                    "name": "k_EMsgGCSubmitPlayerReportResponse",
                    "id": 7079
                },
                {
                    "name": "k_EMsgGCGameChatLog",
                    "id": 7080
                },
                {
                    "name": "k_EMsgGCPracticeLobbyKick",
                    "id": 7081
                },
                {
                    "name": "k_EMsgGCReportCountsRequest",
                    "id": 7082
                },
                {
                    "name": "k_EMsgGCReportCountsResponse",
                    "id": 7083
                },
                {
                    "name": "k_EMsgGCRequestSaveGames",
                    "id": 7084
                },
                {
                    "name": "k_EMsgGCRequestSaveGamesServer",
                    "id": 7085
                },
                {
                    "name": "k_EMsgGCRequestSaveGamesResponse",
                    "id": 7086
                },
                {
                    "name": "k_EMsgGCLeaverDetectedResponse",
                    "id": 7087
                },
                {
                    "name": "k_EMsgGCPlayerFailedToConnect",
                    "id": 7088
                },
                {
                    "name": "k_EMsgGCGCToRelayConnect",
                    "id": 7089
                },
                {
                    "name": "k_EMsgGCGCToRelayConnectresponse",
                    "id": 7090
                },
                {
                    "name": "k_EMsgGCWatchGame",
                    "id": 7091
                },
                {
                    "name": "k_EMsgGCWatchGameResponse",
                    "id": 7092
                },
                {
                    "name": "k_EMsgGCBanStatusRequest",
                    "id": 7093
                },
                {
                    "name": "k_EMsgGCBanStatusResponse",
                    "id": 7094
                },
                {
                    "name": "k_EMsgGCMatchDetailsRequest",
                    "id": 7095
                },
                {
                    "name": "k_EMsgGCMatchDetailsResponse",
                    "id": 7096
                },
                {
                    "name": "k_EMsgGCCancelWatchGame",
                    "id": 7097
                },
                {
                    "name": "k_EMsgGCProfileRequest",
                    "id": 7098
                },
                {
                    "name": "k_EMsgGCProfileResponse",
                    "id": 7099
                },
                {
                    "name": "k_EMsgGCPopup",
                    "id": 7102
                },
                {
                    "name": "k_EMsgGCDOTAClearNotifySuccessfulReport",
                    "id": 7104
                },
                {
                    "name": "k_EMsgGCGenericResult",
                    "id": 7108
                },
                {
                    "name": "k_EMsgGCFriendPracticeLobbyListRequest",
                    "id": 7111
                },
                {
                    "name": "k_EMsgGCFriendPracticeLobbyListResponse",
                    "id": 7112
                },
                {
                    "name": "k_EMsgGCPracticeLobbyJoinResponse",
                    "id": 7113
                },
                {
                    "name": "k_EMsgClientEconNotification_Job",
                    "id": 7114
                },
                {
                    "name": "k_EMsgGCCreateTeam",
                    "id": 7115
                },
                {
                    "name": "k_EMsgGCCreateTeamResponse",
                    "id": 7116
                },
                {
                    "name": "k_EMsgGCDisbandTeam",
                    "id": 7117
                },
                {
                    "name": "k_EMsgGCDisbandTeamResponse",
                    "id": 7118
                },
                {
                    "name": "k_EMsgGCRequestTeamData",
                    "id": 7119
                },
                {
                    "name": "k_EMsgGCRequestTeamDataResponse",
                    "id": 7120
                },
                {
                    "name": "k_EMsgGCTeamData",
                    "id": 7121
                },
                {
                    "name": "k_EMsgGCTeamInvite_InviterToGC",
                    "id": 7122
                },
                {
                    "name": "k_EMsgGCTeamInvite_GCImmediateResponseToInviter",
                    "id": 7123
                },
                {
                    "name": "k_EMsgGCTeamInvite_GCRequestToInvitee",
                    "id": 7124
                },
                {
                    "name": "k_EMsgGCTeamInvite_InviteeResponseToGC",
                    "id": 7125
                },
                {
                    "name": "k_EMsgGCTeamInvite_GCResponseToInviter",
                    "id": 7126
                },
                {
                    "name": "k_EMsgGCTeamInvite_GCResponseToInvitee",
                    "id": 7127
                },
                {
                    "name": "k_EMsgGCKickTeamMember",
                    "id": 7128
                },
                {
                    "name": "k_EMsgGCKickTeamMemberResponse",
                    "id": 7129
                },
                {
                    "name": "k_EMsgGCLeaveTeam",
                    "id": 7130
                },
                {
                    "name": "k_EMsgGCLeaveTeamResponse",
                    "id": 7131
                },
                {
                    "name": "k_EMsgGCSuggestTeamMatchmaking",
                    "id": 7132
                },
                {
                    "name": "k_EMsgGCPlayerHeroesFavoritesAdd",
                    "id": 7133
                },
                {
                    "name": "k_EMsgGCPlayerHeroesFavoritesRemove",
                    "id": 7134
                },
                {
                    "name": "k_EMsgGCEditTeamLogo",
                    "id": 7139
                },
                {
                    "name": "k_EMsgGCEditTeamLogoResponse",
                    "id": 7140
                },
                {
                    "name": "k_EMsgGCSetShowcaseHero",
                    "id": 7141
                },
                {
                    "name": "k_EMsgGCApplyTeamToPracticeLobby",
                    "id": 7142
                },
                {
                    "name": "k_EMsgGCRequestInternatinalTicketEmail",
                    "id": 7143
                },
                {
                    "name": "k_EMsgGCTransferTeamAdmin",
                    "id": 7144
                },
                {
                    "name": "k_EMsgGCClearTournamentGame",
                    "id": 7145
                },
                {
                    "name": "k_EMsgRequestLeagueInfo",
                    "id": 7147
                },
                {
                    "name": "k_EMsgResponseLeagueInfo",
                    "id": 7148
                },
                {
                    "name": "k_EMsgGCPracticeLobbyJoinBroadcastChannel",
                    "id": 7149
                },
                {
                    "name": "k_EMsgGC_TournamentItemEvent",
                    "id": 7150
                },
                {
                    "name": "k_EMsgGC_TournamentItemEventResponse",
                    "id": 7151
                },
                {
                    "name": "k_EMsgCastMatchVote",
                    "id": 7152
                },
                {
                    "name": "k_EMsgCastMatchVoteResponse",
                    "id": 7153
                },
                {
                    "name": "k_EMsgRetrieveMatchVote",
                    "id": 7154
                },
                {
                    "name": "k_EMsgRetrieveMatchVoteResponse",
                    "id": 7155
                },
                {
                    "name": "k_EMsgTeamFanfare",
                    "id": 7156
                },
                {
                    "name": "k_EMsgResponseTeamFanfare",
                    "id": 7157
                },
                {
                    "name": "k_EMsgGC_GameServerUploadSaveGame",
                    "id": 7158
                },
                {
                    "name": "k_EMsgGC_GameServerSaveGameResult",
                    "id": 7159
                },
                {
                    "name": "k_EMsgGC_GameServerGetLoadGame",
                    "id": 7160
                },
                {
                    "name": "k_EMsgGC_GameServerGetLoadGameResult",
                    "id": 7161
                },
                {
                    "name": "k_EMsgGCTeamProfileRequest",
                    "id": 7164
                },
                {
                    "name": "k_EMsgGCTeamProfileResponse",
                    "id": 7165
                },
                {
                    "name": "k_EMsgGCEditTeamDetails",
                    "id": 7166
                },
                {
                    "name": "k_EMsgGCEditTeamDetailsResponse",
                    "id": 7167
                },
                {
                    "name": "k_EMsgGCProTeamListRequest",
                    "id": 7168
                },
                {
                    "name": "k_EMsgGCProTeamListResponse",
                    "id": 7169
                },
                {
                    "name": "k_EMsgGCReadyUpStatus",
                    "id": 7170
                },
                {
                    "name": "k_EMsgGCHallOfFame",
                    "id": 7171
                },
                {
                    "name": "k_EMsgGCHallOfFameRequest",
                    "id": 7172
                },
                {
                    "name": "k_EMsgGCHallOfFameResponse",
                    "id": 7173
                },
                {
                    "name": "k_EMsgGCGenerateDiretidePrizeList",
                    "id": 7174
                },
                {
                    "name": "k_EMsgGCRewardDiretidePrizes",
                    "id": 7176
                },
                {
                    "name": "k_EMsgGCDiretidePrizesRewardedResponse",
                    "id": 7177
                },
                {
                    "name": "k_EMsgGCHalloweenHighScoreRequest",
                    "id": 7178
                },
                {
                    "name": "k_EMsgGCHalloweenHighScoreResponse",
                    "id": 7179
                },
                {
                    "name": "k_EMsgGCGenerateDiretidePrizeListResponse",
                    "id": 7180
                },
                {
                    "name": "k_EMsgGCStorePromoPagesRequest",
                    "id": 7182
                },
                {
                    "name": "k_EMsgGCStorePromoPagesResponse",
                    "id": 7183
                },
                {
                    "name": "k_EMsgGCSpawnLootGreevil",
                    "id": 7184
                },
                {
                    "name": "k_EMsgGCDismissLootGreevil",
                    "id": 7185
                },
                {
                    "name": "k_EMsgGCToGCMatchCompleted",
                    "id": 7186
                },
                {
                    "name": "k_EMsgGCDismissLootGreevilResponse",
                    "id": 7187
                },
                {
                    "name": "k_EMsgGCBalancedShuffleLobby",
                    "id": 7188
                },
                {
                    "name": "k_EMsgGCToGCCheckLeaguePermission",
                    "id": 7189
                },
                {
                    "name": "k_EMsgGCToGCCheckLeaguePermissionResponse",
                    "id": 7190
                },
                {
                    "name": "k_EMsgGCLeagueScheduleRequest",
                    "id": 7191
                },
                {
                    "name": "k_EMsgGCLeagueScheduleResponse",
                    "id": 7192
                },
                {
                    "name": "k_EMsgGCLeagueScheduleEdit",
                    "id": 7193
                },
                {
                    "name": "k_EMsgGCLeagueScheduleEditResponse",
                    "id": 7194
                },
                {
                    "name": "k_EMsgGCLeaguesInMonthRequest",
                    "id": 7195
                },
                {
                    "name": "k_EMsgGCLeaguesInMonthResponse",
                    "id": 7196
                },
                {
                    "name": "k_EMsgGCMatchmakingStatsRequest",
                    "id": 7197
                },
                {
                    "name": "k_EMsgGCMatchmakingStatsResponse",
                    "id": 7198
                },
                {
                    "name": "k_EMsgGCBotGameCreate",
                    "id": 7199
                },
                {
                    "name": "k_EMsgGCSetMatchHistoryAccess",
                    "id": 7200
                },
                {
                    "name": "k_EMsgGCSetMatchHistoryAccessResponse",
                    "id": 7201
                },
                {
                    "name": "k_EMsgUpgradeLeagueItem",
                    "id": 7203
                },
                {
                    "name": "k_EMsgUpgradeLeagueItemResponse",
                    "id": 7204
                },
                {
                    "name": "k_EMsgGCTeamMemberProfileRequest",
                    "id": 7205
                },
                {
                    "name": "k_EMsgGCWatchDownloadedReplay",
                    "id": 7206
                },
                {
                    "name": "k_EMsgGCSetMapLocationState",
                    "id": 7207
                },
                {
                    "name": "k_EMsgGCSetMapLocationStateResponse",
                    "id": 7208
                },
                {
                    "name": "k_EMsgGCResetMapLocations",
                    "id": 7209
                },
                {
                    "name": "k_EMsgGCResetMapLocationsResponse",
                    "id": 7210
                },
                {
                    "name": "k_EMsgGCTeamOnProfile",
                    "id": 7211
                },
                {
                    "name": "k_EMsgGCSetFeaturedItems",
                    "id": 7212
                },
                {
                    "name": "k_EMsgGCFeaturedItems",
                    "id": 7215
                },
                {
                    "name": "k_EMsgRefreshPartnerAccountLink",
                    "id": 7216
                },
                {
                    "name": "k_EMsgClientsRejoinChatChannels",
                    "id": 7217
                },
                {
                    "name": "k_EMsgGCToGCGetUserChatInfo",
                    "id": 7218
                },
                {
                    "name": "k_EMsgGCToGCGetUserChatInfoResponse",
                    "id": 7219
                },
                {
                    "name": "k_EMsgGCToGCLeaveAllChatChannels",
                    "id": 7220
                },
                {
                    "name": "k_EMsgGCToGCUpdateAccountChatBan",
                    "id": 7221
                },
                {
                    "name": "k_EMsgGCGuildCreateRequest",
                    "id": 7222
                },
                {
                    "name": "k_EMsgGCGuildCreateResponse",
                    "id": 7223
                },
                {
                    "name": "k_EMsgGCGuildSetAccountRoleRequest",
                    "id": 7224
                },
                {
                    "name": "k_EMsgGCGuildSetAccountRoleResponse",
                    "id": 7225
                },
                {
                    "name": "k_EMsgGCRequestGuildData",
                    "id": 7226
                },
                {
                    "name": "k_EMsgGCGuildData",
                    "id": 7227
                },
                {
                    "name": "k_EMsgGCGuildInviteAccountRequest",
                    "id": 7228
                },
                {
                    "name": "k_EMsgGCGuildInviteAccountResponse",
                    "id": 7229
                },
                {
                    "name": "k_EMsgGCGuildCancelInviteRequest",
                    "id": 7230
                },
                {
                    "name": "k_EMsgGCGuildCancelInviteResponse",
                    "id": 7231
                },
                {
                    "name": "k_EMsgGCGuildUpdateDetailsRequest",
                    "id": 7232
                },
                {
                    "name": "k_EMsgGCGuildUpdateDetailsResponse",
                    "id": 7233
                },
                {
                    "name": "k_EMsgGCToGCCanInviteUser",
                    "id": 7234
                },
                {
                    "name": "k_EMsgGCToGCCanInviteUserResponse",
                    "id": 7235
                },
                {
                    "name": "k_EMsgGCToGCGetUserRank",
                    "id": 7236
                },
                {
                    "name": "k_EMsgGCToGCGetUserRankResponse",
                    "id": 7237
                },
                {
                    "name": "k_EMsgGCToGCUpdateTeamStats",
                    "id": 7240
                },
                {
                    "name": "k_EMsgGCToGCGetTeamRank",
                    "id": 7241
                },
                {
                    "name": "k_EMsgGCToGCGetTeamRankResponse",
                    "id": 7242
                },
                {
                    "name": "k_EMsgGCTeamIDByNameRequest",
                    "id": 7245
                },
                {
                    "name": "k_EMsgGCTeamIDByNameResponse",
                    "id": 7246
                },
                {
                    "name": "k_EMsgGCEditTeam",
                    "id": 7247
                },
                {
                    "name": "k_EMsgGCPassportDataRequest",
                    "id": 7248
                },
                {
                    "name": "k_EMsgGCPassportDataResponse",
                    "id": 7249
                },
                {
                    "name": "k_EMsgGCNotInGuildData",
                    "id": 7251
                },
                {
                    "name": "k_EMsgGCGuildInviteData",
                    "id": 7254
                },
                {
                    "name": "k_EMsgGCToGCGetLeagueAdmin",
                    "id": 7255
                },
                {
                    "name": "k_EMsgGCToGCGetLeagueAdminResponse",
                    "id": 7256
                },
                {
                    "name": "k_EMsgGCRequestLeaguePrizePool",
                    "id": 7258
                },
                {
                    "name": "k_EMsgGCRequestLeaguePrizePoolResponse",
                    "id": 7259
                },
                {
                    "name": "k_EMsgGCToGCUpdateOpenGuildPartyRequest",
                    "id": 7261
                },
                {
                    "name": "k_EMsgGCToGCUpdateOpenGuildPartyResponse",
                    "id": 7262
                },
                {
                    "name": "k_EMsgGCToGCDestroyOpenGuildPartyRequest",
                    "id": 7263
                },
                {
                    "name": "k_EMsgGCToGCDestroyOpenGuildPartyResponse",
                    "id": 7264
                },
                {
                    "name": "k_EMsgGCGuildUpdateMessage",
                    "id": 7265
                },
                {
                    "name": "k_EMsgGCPartySetOpenGuildRequest",
                    "id": 7266
                },
                {
                    "name": "k_EMsgGCPartySetOpenGuildResponse",
                    "id": 7267
                },
                {
                    "name": "k_EMsgGCGuildOpenPartyRefresh",
                    "id": 7268
                },
                {
                    "name": "k_EMsgGCJoinOpenGuildPartyRequest",
                    "id": 7269
                },
                {
                    "name": "k_EMsgGCJoinOpenGuildPartyResponse",
                    "id": 7270
                },
                {
                    "name": "k_EMsgGCLeaveChatChannel",
                    "id": 7272
                },
                {
                    "name": "k_EMsgGCChatMessage",
                    "id": 7273
                },
                {
                    "name": "k_EMsgGCGetHeroStandings",
                    "id": 7274
                },
                {
                    "name": "k_EMsgGCGetHeroStandingsResponse",
                    "id": 7275
                },
                {
                    "name": "k_EMsgGCGuildEditLogoRequest",
                    "id": 7279
                },
                {
                    "name": "k_EMsgGCGuildEditLogoResponse",
                    "id": 7280
                },
                {
                    "name": "k_EMsgGCGuildmatePracticeLobbyListRequest",
                    "id": 7281
                },
                {
                    "name": "k_EMsgGCGuildmatePracticeLobbyListResponse",
                    "id": 7282
                },
                {
                    "name": "k_EMsgGCItemEditorReservationsRequest",
                    "id": 7283
                },
                {
                    "name": "k_EMsgGCItemEditorReservationsResponse",
                    "id": 7284
                },
                {
                    "name": "k_EMsgGCItemEditorReserveItemDef",
                    "id": 7285
                },
                {
                    "name": "k_EMsgGCItemEditorReserveItemDefResponse",
                    "id": 7286
                },
                {
                    "name": "k_EMsgGCItemEditorReleaseReservation",
                    "id": 7287
                },
                {
                    "name": "k_EMsgGCItemEditorReleaseReservationResponse",
                    "id": 7288
                },
                {
                    "name": "k_EMsgGCRewardTutorialPrizes",
                    "id": 7289
                },
                {
                    "name": "k_EMsgGCLastHitChallengeHighScorePost",
                    "id": 7290
                },
                {
                    "name": "k_EMsgGCLastHitChallengeHighScoreRequest",
                    "id": 7291
                },
                {
                    "name": "k_EMsgGCLastHitChallengeHighScoreResponse",
                    "id": 7292
                },
                {
                    "name": "k_EMsgGCCreateFantasyLeagueRequest",
                    "id": 7293
                },
                {
                    "name": "k_EMsgGCCreateFantasyLeagueResponse",
                    "id": 7294
                },
                {
                    "name": "k_EMsgGCFantasyLeagueInfoRequest",
                    "id": 7297
                },
                {
                    "name": "k_EMsgGCFantasyLeagueInfoResponse",
                    "id": 7298
                },
                {
                    "name": "k_EMsgGCFantasyLeagueInfo",
                    "id": 7299
                },
                {
                    "name": "k_EMsgGCCreateFantasyTeamRequest",
                    "id": 7300
                },
                {
                    "name": "k_EMsgGCCreateFantasyTeamResponse",
                    "id": 7301
                },
                {
                    "name": "k_EMsgGCEditFantasyTeamRequest",
                    "id": 7302
                },
                {
                    "name": "k_EMsgGCEditFantasyTeamResponse",
                    "id": 7303
                },
                {
                    "name": "k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID",
                    "id": 7304
                },
                {
                    "name": "k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID",
                    "id": 7305
                },
                {
                    "name": "k_EMsgGCFantasyTeamInfoResponse",
                    "id": 7306
                },
                {
                    "name": "k_EMsgGCFantasyTeamInfo",
                    "id": 7307
                },
                {
                    "name": "k_EMsgGCFantasyLivePlayerStats",
                    "id": 7308
                },
                {
                    "name": "k_EMsgGCFantasyFinalPlayerStats",
                    "id": 7309
                },
                {
                    "name": "k_EMsgGCFantasyMatch",
                    "id": 7310
                },
                {
                    "name": "k_EMsgGCToGCReloadVersions",
                    "id": 7311
                },
                {
                    "name": "k_EMsgGCFantasyTeamScoreRequest",
                    "id": 7312
                },
                {
                    "name": "k_EMsgGCFantasyTeamScoreResponse",
                    "id": 7313
                },
                {
                    "name": "k_EMsgGCFantasyTeamStandingsRequest",
                    "id": 7314
                },
                {
                    "name": "k_EMsgGCFantasyTeamStandingsResponse",
                    "id": 7315
                },
                {
                    "name": "k_EMsgGCFantasyPlayerScoreRequest",
                    "id": 7316
                },
                {
                    "name": "k_EMsgGCFantasyPlayerScoreResponse",
                    "id": 7317
                },
                {
                    "name": "k_EMsgGCFantasyPlayerStandingsRequest",
                    "id": 7318
                },
                {
                    "name": "k_EMsgGCFantasyPlayerStandingsResponse",
                    "id": 7319
                },
                {
                    "name": "k_EMsgGCFlipLobbyTeams",
                    "id": 7320
                },
                {
                    "name": "k_EMsgGCCustomGameCreate",
                    "id": 7321
                },
                {
                    "name": "k_EMsgGCFantasyPlayerInfoRequest",
                    "id": 7322
                },
                {
                    "name": "k_EMsgGCFantasyPlayerInfoResponse",
                    "id": 7323
                },
                {
                    "name": "k_EMsgGCToGCProcessPlayerReportForTarget",
                    "id": 7324
                },
                {
                    "name": "k_EMsgGCToGCProcessReportSuccess",
                    "id": 7325
                },
                {
                    "name": "k_EMsgGCNotifyAccountFlagsChange",
                    "id": 7326
                },
                {
                    "name": "k_EMsgGCSetProfilePrivacy",
                    "id": 7327
                },
                {
                    "name": "k_EMsgGCSetProfilePrivacyResponse",
                    "id": 7328
                },
                {
                    "name": "k_EMsgGCSteamProfileRequest",
                    "id": 7329
                },
                {
                    "name": "k_EMsgGCSteamProfileRequestResponse",
                    "id": 7330
                },
                {
                    "name": "k_EMsgGCFantasyLeagueCreateInfoRequest",
                    "id": 7331
                },
                {
                    "name": "k_EMsgGCFantasyLeagueCreateInfoResponse",
                    "id": 7332
                },
                {
                    "name": "k_EMsgGCFantasyLeagueInviteInfoRequest",
                    "id": 7333
                },
                {
                    "name": "k_EMsgGCFantasyLeagueInviteInfoResponse",
                    "id": 7334
                },
                {
                    "name": "k_EMsgGCClientIgnoredUser",
                    "id": 7335
                },
                {
                    "name": "k_EMsgGCFantasyLeagueCreateRequest",
                    "id": 7336
                },
                {
                    "name": "k_EMsgGCFantasyLeagueCreateResponse",
                    "id": 7337
                },
                {
                    "name": "k_EMsgGCFantasyTeamCreateRequest",
                    "id": 7338
                },
                {
                    "name": "k_EMsgGCFantasyTeamCreateResponse",
                    "id": 7339
                },
                {
                    "name": "k_EMsgGCFantasyLeagueFriendJoinListRequest",
                    "id": 7340
                },
                {
                    "name": "k_EMsgGCFantasyLeagueFriendJoinListResponse",
                    "id": 7341
                },
                {
                    "name": "k_EMsgGCClientSuspended",
                    "id": 7342
                },
                {
                    "name": "k_EMsgGCPartyMemberSetCoach",
                    "id": 7343
                },
                {
                    "name": "k_EMsgGCFantasyLeagueEditInvitesRequest",
                    "id": 7344
                },
                {
                    "name": "k_EMsgGCFantasyLeagueEditInvitesResponse",
                    "id": 7345
                },
                {
                    "name": "k_EMsgGCPracticeLobbySetCoach",
                    "id": 7346
                },
                {
                    "name": "k_EMsgGCFantasyLeagueEditInfoRequest",
                    "id": 7347
                },
                {
                    "name": "k_EMsgGCFantasyLeagueEditInfoResponse",
                    "id": 7348
                },
                {
                    "name": "k_EMsgGCFantasyLeagueDraftStatusRequest",
                    "id": 7349
                },
                {
                    "name": "k_EMsgGCFantasyLeagueDraftStatus",
                    "id": 7350
                },
                {
                    "name": "k_EMsgGCFantasyLeagueDraftPlayerRequest",
                    "id": 7351
                },
                {
                    "name": "k_EMsgGCFantasyLeagueDraftPlayerResponse",
                    "id": 7352
                },
                {
                    "name": "k_EMsgGCFantasyLeagueMatchupsRequest",
                    "id": 7353
                },
                {
                    "name": "k_EMsgGCFantasyLeagueMatchupsResponse",
                    "id": 7354
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterSwapRequest",
                    "id": 7355
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterSwapResponse",
                    "id": 7356
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterRequest",
                    "id": 7357
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterResponse",
                    "id": 7358
                },
                {
                    "name": "k_EMsgGCNexonPartnerUpdate",
                    "id": 7359
                },
                {
                    "name": "k_EMsgGCToGCProcessPCBangRewardPoints",
                    "id": 7360
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterAddDropRequest",
                    "id": 7361
                },
                {
                    "name": "k_EMsgGCFantasyTeamRosterAddDropResponse",
                    "id": 7362
                },
                {
                    "name": "k_EMsgPresentedClientTerminateDlg",
                    "id": 7363
                },
                {
                    "name": "k_EMsgGCFantasyPlayerHisoricalStatsRequest",
                    "id": 7364
                },
                {
                    "name": "k_EMsgGCFantasyPlayerHisoricalStatsResponse",
                    "id": 7365
                },
                {
                    "name": "k_EMsgGCPCBangTimedRewardMessage",
                    "id": 7366
                },
                {
                    "name": "k_EMsgGCLobbyUpdateBroadcastChannelInfo",
                    "id": 7367
                },
                {
                    "name": "k_EMsgGCFantasyTeamTradesRequest",
                    "id": 7368
                },
                {
                    "name": "k_EMsgGCFantasyTeamTradesResponse",
                    "id": 7369
                },
                {
                    "name": "k_EMsgGCFantasyTeamTradeCancelRequest",
                    "id": 7370
                },
                {
                    "name": "k_EMsgGCFantasyTeamTradeCancelResponse",
                    "id": 7371
                },
                {
                    "name": "k_EMsgGCToGCGrantTournamentItem",
                    "id": 7372
                },
                {
                    "name": "k_EMsgGCProcessFantasyScheduledEvent",
                    "id": 7373
                },
                {
                    "name": "k_EMsgGCToGCGrantPCBangRewardItem",
                    "id": 7374
                },
                {
                    "name": "k_EMsgGCToGCUpgradeTwitchViewerItems",
                    "id": 7375
                },
                {
                    "name": "k_EMsgGCToGCGetLiveMatchAffiliates",
                    "id": 7376
                },
                {
                    "name": "k_EMsgGCToGCGetLiveMatchAffiliatesResponse",
                    "id": 7377
                },
                {
                    "name": "k_EMsgGCToGCUpdatePlayerPennantCounts",
                    "id": 7378
                },
                {
                    "name": "k_EMsgGCToGCGetPlayerPennantCounts",
                    "id": 7379
                },
                {
                    "name": "k_EMsgGCToGCGetPlayerPennantCountsResponse",
                    "id": 7380
                },
                {
                    "name": "k_EMsgGCGameMatchSignOutPermissionRequest",
                    "id": 7381
                },
                {
                    "name": "k_EMsgGCGameMatchSignOutPermissionResponse",
                    "id": 7382
                },
                {
                    "name": "k_EMsgDOTAChatChannelMemberUpdate",
                    "id": 7383
                },
                {
                    "name": "k_EMsgDOTAAwardEventPoints",
                    "id": 7384
                },
                {
                    "name": "k_EMsgDOTARedeemEventPrize",
                    "id": 7385
                },
                {
                    "name": "k_EMsgDOTARedeemEventPrizeResponse",
                    "id": 7386
                },
                {
                    "name": "k_EMsgDOTAGetEventPoints",
                    "id": 7387
                },
                {
                    "name": "k_EMsgDOTAGetEventPointsResponse",
                    "id": 7388
                },
                {
                    "name": "k_EMsgGCToGCSignoutAwardEventPoints",
                    "id": 7390
                },
                {
                    "name": "k_EMsgDOTASendFriendRecruits",
                    "id": 7393
                },
                {
                    "name": "k_EMsgDOTAFriendRecruitsRequest",
                    "id": 7394
                },
                {
                    "name": "k_EMsgDOTAFriendRecruitsResponse",
                    "id": 7395
                },
                {
                    "name": "k_EMsgDOTAFriendRecruitInviteAcceptDecline",
                    "id": 7396
                },
                {
                    "name": "k_EMsgGCPartyLeaderWatchGamePrompt",
                    "id": 7397
                },
                {
                    "name": "k_EMsgDOTAFrostivusTimeElapsed",
                    "id": 7398
                },
                {
                    "name": "k_EMsgGCToGCGrantEarnedLicense",
                    "id": 7399
                },
                {
                    "name": "k_EMsgDOTALiveLeagueGameUpdate",
                    "id": 7402
                },
                {
                    "name": "k_EMsgDOTAChatGetUserList",
                    "id": 7403
                },
                {
                    "name": "k_EMsgDOTAChatGetUserListResponse",
                    "id": 7404
                },
                {
                    "name": "k_EMsgGCCompendiumSetSelection",
                    "id": 7405
                },
                {
                    "name": "k_EMsgGCCompendiumDataRequest",
                    "id": 7406
                },
                {
                    "name": "k_EMsgGCCompendiumDataResponse",
                    "id": 7407
                },
                {
                    "name": "k_EMsgDOTAGetPlayerMatchHistory",
                    "id": 7408
                },
                {
                    "name": "k_EMsgDOTAGetPlayerMatchHistoryResponse",
                    "id": 7409
                },
                {
                    "name": "k_EMsgGCToGCMatchmakingAddParty",
                    "id": 7410
                },
                {
                    "name": "k_EMsgGCToGCMatchmakingRemoveParty",
                    "id": 7411
                },
                {
                    "name": "k_EMsgGCToGCMatchmakingRemoveAllParties",
                    "id": 7412
                },
                {
                    "name": "k_EMsgGCToGCMatchmakingMatchFound",
                    "id": 7413
                },
                {
                    "name": "k_EMsgGCToGCUpdateMatchManagementStats",
                    "id": 7414
                },
                {
                    "name": "k_EMsgGCToGCUpdateMatchmakingStats",
                    "id": 7415
                },
                {
                    "name": "k_EMsgGCToServerPingRequest",
                    "id": 7416
                },
                {
                    "name": "k_EMsgGCToServerPingResponse",
                    "id": 7417
                },
                {
                    "name": "k_EMsgGCToServerConsoleCommand",
                    "id": 7418
                },
                {
                    "name": "k_EMsgGCToGCUpdateLiveLeagueGameInfo",
                    "id": 7420
                },
                {
                    "name": "k_EMsgGCMakeOffering",
                    "id": 7423
                },
                {
                    "name": "k_EMsgGCRequestOfferings",
                    "id": 7424
                },
                {
                    "name": "k_EMsgGCRequestOfferingsResponse",
                    "id": 7425
                },
                {
                    "name": "k_EMsgGCToGCProcessMatchLeaver",
                    "id": 7426
                },
                {
                    "name": "k_EMsgGCNotificationsRequest",
                    "id": 7427
                },
                {
                    "name": "k_EMsgGCNotificationsResponse",
                    "id": 7428
                },
                {
                    "name": "k_EMsgGCToGCModifyNotification",
                    "id": 7429
                },
                {
                    "name": "k_EMsgGCToGCSetNewNotifications",
                    "id": 7430
                },
                {
                    "name": "k_EMsgGCToGCSetIsLeagueAdmin",
                    "id": 7431
                },
                {
                    "name": "k_EMsgGCLeagueAdminState",
                    "id": 7432
                },
                {
                    "name": "k_EMsgGCToGCSendLeagueAdminState",
                    "id": 7433
                },
                {
                    "name": "k_EMsgGCLeagueAdminList",
                    "id": 7434
                },
                {
                    "name": "k_EMsgGCNotificationsMarkReadRequest",
                    "id": 7435
                },
                {
                    "name": "k_EMsgGCFantasyMessageAdd",
                    "id": 7436
                },
                {
                    "name": "k_EMsgGCFantasyMessagesRequest",
                    "id": 7437
                },
                {
                    "name": "k_EMsgGCFantasyMessagesResponse",
                    "id": 7438
                },
                {
                    "name": "k_EMsgGCFantasyScheduledMatchesRequest",
                    "id": 7439
                },
                {
                    "name": "k_EMsgGCFantasyScheduledMatchesResponse",
                    "id": 7440
                },
                {
                    "name": "k_EMsgGCToGCGrantLeagueAccess",
                    "id": 7441
                },
                {
                    "name": "k_EMsgGCEventGameCreate",
                    "id": 7443
                },
                {
                    "name": "k_EMsgGCPerfectWorldUserLookupRequest",
                    "id": 7444
                },
                {
                    "name": "k_EMsgGCPerfectWorldUserLookupResponse",
                    "id": 7445
                },
                {
                    "name": "k_EMsgGCToGCIncrementRecruitmentSDO",
                    "id": 7446
                },
                {
                    "name": "k_EMsgGCToGCIncrementRecruitmentLevel",
                    "id": 7447
                },
                {
                    "name": "k_EMsgGCFantasyRemoveOwner",
                    "id": 7448
                },
                {
                    "name": "k_EMsgGCFantasyRemoveOwnerResponse",
                    "id": 7449
                },
                {
                    "name": "k_EMsgGCRequestBatchPlayerResources",
                    "id": 7450
                },
                {
                    "name": "k_EMsgGCRequestBatchPlayerResourcesResponse",
                    "id": 7451
                },
                {
                    "name": "k_EMsgGCToGCSendUpdateLeagues",
                    "id": 7452
                },
                {
                    "name": "k_EMsgGCCompendiumSetSelectionResponse",
                    "id": 7453
                },
                {
                    "name": "k_EMsgGCPlayerInfoRequest",
                    "id": 7454
                },
                {
                    "name": "k_EMsgGCPlayerInfo",
                    "id": 7455
                },
                {
                    "name": "k_EMsgGCPlayerInfoSubmit",
                    "id": 7456
                },
                {
                    "name": "k_EMsgGCPlayerInfoSubmitResponse",
                    "id": 7457
                },
                {
                    "name": "k_EMsgGCToGCGetAccountLevel",
                    "id": 7458
                },
                {
                    "name": "k_EMsgGCToGCGetAccountLevelResponse",
                    "id": 7459
                },
                {
                    "name": "k_EMsgGCToGCGetAccountPartner",
                    "id": 7460
                },
                {
                    "name": "k_EMsgGCToGCGetAccountPartnerResponse",
                    "id": 7461
                },
                {
                    "name": "k_EMsgGCToGCGetAccountProfile",
                    "id": 7462
                },
                {
                    "name": "k_EMsgGCToGCGetAccountProfileResponse",
                    "id": 7463
                },
                {
                    "name": "k_EMsgDOTAGetWeekendTourneySchedule",
                    "id": 7464
                },
                {
                    "name": "k_EMsgDOTAWeekendTourneySchedule",
                    "id": 7465
                },
                {
                    "name": "k_EMsgGCJoinableCustomGameModesRequest",
                    "id": 7466
                },
                {
                    "name": "k_EMsgGCJoinableCustomGameModesResponse",
                    "id": 7467
                },
                {
                    "name": "k_EMsgGCJoinableCustomLobbiesRequest",
                    "id": 7468
                },
                {
                    "name": "k_EMsgGCJoinableCustomLobbiesResponse",
                    "id": 7469
                },
                {
                    "name": "k_EMsgGCQuickJoinCustomLobby",
                    "id": 7470
                },
                {
                    "name": "k_EMsgGCQuickJoinCustomLobbyResponse",
                    "id": 7471
                },
                {
                    "name": "k_EMsgGCToGCGrantEventPointAction",
                    "id": 7472
                },
                {
                    "name": "k_EMsgServerGetEventPoints",
                    "id": 7473
                },
                {
                    "name": "k_EMsgServerGetEventPointsResponse",
                    "id": 7474
                },
                {
                    "name": "k_EMsgServerGrantSurveyPermission",
                    "id": 7475
                },
                {
                    "name": "k_EMsgServerGrantSurveyPermissionResponse",
                    "id": 7476
                },
                {
                    "name": "k_EMsgClientProvideSurveyResult",
                    "id": 7477
                },
                {
                    "name": "k_EMsgGCToGCSetCompendiumSelection",
                    "id": 7478
                },
                {
                    "name": "k_EMsgGCToGCUpdateTI4HeroQuest",
                    "id": 7480
                },
                {
                    "name": "k_EMsgGCCompendiumDataChanged",
                    "id": 7481
                },
                {
                    "name": "k_EMsgDOTAFantasyLeagueFindRequest",
                    "id": 7482
                },
                {
                    "name": "k_EMsgDOTAFantasyLeagueFindResponse",
                    "id": 7483
                },
                {
                    "name": "k_EMsgGCHasItemQuery",
                    "id": 7484
                },
                {
                    "name": "k_EMsgGCHasItemResponse",
                    "id": 7485
                },
                {
                    "name": "k_EMsgGCConsumeFantasyTicket",
                    "id": 7486
                },
                {
                    "name": "k_EMsgGCConsumeFantasyTicketFailure",
                    "id": 7487
                },
                {
                    "name": "k_EMsgGCToGCGrantEventPointActionMsg",
                    "id": 7488
                },
                {
                    "name": "k_EMsgClientToGCTrackDialogResult",
                    "id": 7489
                },
                {
                    "name": "k_EMsgGCFantasyLeaveLeagueRequest",
                    "id": 7490
                },
                {
                    "name": "k_EMsgGCFantasyLeaveLeagueResponse",
                    "id": 7491
                },
                {
                    "name": "k_EMsgGCToGCGetCompendiumSelections",
                    "id": 7492
                },
                {
                    "name": "k_EMsgGCToGCGetCompendiumSelectionsResponse",
                    "id": 7493
                },
                {
                    "name": "k_EMsgServerToGCMatchConnectionStats",
                    "id": 7494
                },
                {
                    "name": "k_EMsgGCToClientTournamentItemDrop",
                    "id": 7495
                },
                {
                    "name": "k_EMsgSQLDelayedGrantLeagueDrop",
                    "id": 7496
                },
                {
                    "name": "k_EMsgServerGCUpdateSpectatorCount",
                    "id": 7497
                },
                {
                    "name": "k_EMsgDOTAStartDailyHeroChallengeRequest",
                    "id": 7498
                },
                {
                    "name": "k_EMsgGCFantasyPlayerScoreDetailsRequest",
                    "id": 7499
                },
                {
                    "name": "k_EMsgGCFantasyPlayerScoreDetailsResponse",
                    "id": 7500
                },
                {
                    "name": "k_EMsgGCToGCEmoticonUnlock",
                    "id": 7501
                },
                {
                    "name": "k_EMsgSignOutDraftInfo",
                    "id": 7502
                },
                {
                    "name": "k_EMsgClientToGCEmoticonDataRequest",
                    "id": 7503
                },
                {
                    "name": "k_EMsgGCToClientEmoticonData",
                    "id": 7504
                },
                {
                    "name": "k_EMsgGCPracticeLobbyToggleBroadcastChannelCameramanStatus",
                    "id": 7505
                },
                {
                    "name": "k_EMsgGCToGCCreateWeekendTourneyRequest",
                    "id": 7506
                },
                {
                    "name": "k_EMsgGCToGCCreateWeekendTourneyResponse",
                    "id": 7507
                },
                {
                    "name": "k_EMsgGCHeroPickStatsRequest",
                    "id": 7508
                },
                {
                    "name": "k_EMsgGCHeroPickStatsResponse",
                    "id": 7509
                },
                {
                    "name": "k_EMsgGCToGCCreateGenericTeamsRequest",
                    "id": 7510
                },
                {
                    "name": "k_EMsgGCToGCCreateGenericTeamsResponse",
                    "id": 7511
                },
                {
                    "name": "k_EMsgSQLLaunchOneWeekendTourney",
                    "id": 7512
                },
                {
                    "name": "k_EMsgClientToGCSetAdditionalEquips",
                    "id": 7513
                },
                {
                    "name": "k_EMsgClientToGCGetAdditionalEquips",
                    "id": 7514
                },
                {
                    "name": "k_EMsgClientToGCGetAdditionalEquipsResponse",
                    "id": 7515
                },
                {
                    "name": "k_EMsgServerToGCGetAdditionalEquips",
                    "id": 7516
                },
                {
                    "name": "k_EMsgServerToGCGetAdditionalEquipsResponse",
                    "id": 7517
                },
                {
                    "name": "k_EMsgDOTARedeemItem",
                    "id": 7518
                },
                {
                    "name": "k_EMsgDOTARedeemItemResponse",
                    "id": 7519
                },
                {
                    "name": "k_EMsgSQLGCToGCGrantAllHeroProgress",
                    "id": 7520
                },
                {
                    "name": "k_EMsgClientToGCGetAllHeroProgress",
                    "id": 7521
                },
                {
                    "name": "k_EMsgClientToGCGetAllHeroProgressResponse",
                    "id": 7522
                },
                {
                    "name": "k_EMsgGCToGCGetServerForClient",
                    "id": 7523
                },
                {
                    "name": "k_EMsgGCToGCGetServerForClientResponse",
                    "id": 7524
                },
                {
                    "name": "k_EMsgSQLProcessTournamentGameOutcome",
                    "id": 7525
                },
                {
                    "name": "k_EMsgSQLGrantTrophyToAccount",
                    "id": 7526
                },
                {
                    "name": "k_EMsgClientToGCGetTrophyList",
                    "id": 7527
                },
                {
                    "name": "k_EMsgClientToGCGetTrophyListResponse",
                    "id": 7528
                },
                {
                    "name": "k_EMsgGCToClientTrophyAwarded",
                    "id": 7529
                },
                {
                    "name": "k_EMsgGCGameBotMatchSignOut",
                    "id": 7530
                },
                {
                    "name": "k_EMsgGCGameBotMatchSignOutPermissionRequest",
                    "id": 7531
                },
                {
                    "name": "k_EMsgSignOutBotInfo",
                    "id": 7532
                },
                {
                    "name": "k_EMsgGCToGCUpdateProfileCards",
                    "id": 7533
                },
                {
                    "name": "k_EMsgClientToGCGetProfileCard",
                    "id": 7534
                },
                {
                    "name": "k_EMsgClientToGCGetProfileCardResponse",
                    "id": 7535
                },
                {
                    "name": "k_EMsgServerToGCGetProfileCard",
                    "id": 7536
                },
                {
                    "name": "k_EMsgServerToGCGetProfileCardResponse",
                    "id": 7537
                },
                {
                    "name": "k_EMsgClientToGCSetProfileCardSlots",
                    "id": 7538
                },
                {
                    "name": "k_EMsgGCToClientProfileCardUpdated",
                    "id": 7539
                },
                {
                    "name": "k_EMsgServerToGCVictoryPredictions",
                    "id": 7540
                },
                {
                    "name": "k_EMsgClientToGCMarkNotificationListRead",
                    "id": 7542
                },
                {
                    "name": "k_EMsgGCToClientNewNotificationAdded",
                    "id": 7543
                },
                {
                    "name": "k_EMsgServerToGCSuspiciousActivity",
                    "id": 7544
                },
                {
                    "name": "k_EMsgSignOutCommunicationSummary",
                    "id": 7545
                },
                {
                    "name": "k_EMsgServerToGCRequestStatus_Response",
                    "id": 7546
                },
                {
                    "name": "k_EMsgClientToGCCreateHeroStatue",
                    "id": 7547
                },
                {
                    "name": "k_EMsgGCToClientHeroStatueCreateResult",
                    "id": 7548
                },
                {
                    "name": "k_EMsgGCGCToLANServerRelayConnect",
                    "id": 7549
                },
                {
                    "name": "k_EMsgSignOutAssassinMiniGameInfo",
                    "id": 7550
                },
                {
                    "name": "k_EMsgServerToGCGetIngameEventData",
                    "id": 7551
                },
                {
                    "name": "k_EMsgGCToGCUpdateIngameEventDataBroadcast",
                    "id": 7552
                },
                {
                    "name": "k_EMsgGCToServerIngameEventData_OraclePA",
                    "id": 7553
                },
                {
                    "name": "k_EMsgServerToGCReportKillSummaries",
                    "id": 7554
                },
                {
                    "name": "k_EMsgGCToGCReportKillSummaries",
                    "id": 7555
                },
                {
                    "name": "k_EMsgGCToGCUpdateAssassinMinigame",
                    "id": 7556
                },
                {
                    "name": "k_EMsgGCToGCFantasySetMatchLeague",
                    "id": 7557
                },
                {
                    "name": "k_EMsgClientToGCRecordCompendiumStats",
                    "id": 7558
                },
                {
                    "name": "k_EMsgGCItemEditorRequestLeagueInfo",
                    "id": 7559
                },
                {
                    "name": "k_EMsgGCItemEditorLeagueInfoResponse",
                    "id": 7560
                },
                {
                    "name": "k_EMsgGCToGCUpdatePlayerPredictions",
                    "id": 7561
                },
                {
                    "name": "k_EMsgGCToServerPredictionResult",
                    "id": 7562
                },
                {
                    "name": "k_EMsgServerToGCSignoutAwardAdditionalDrops",
                    "id": 7563
                },
                {
                    "name": "k_EMsgGCToGCSignoutAwardAdditionalDrops",
                    "id": 7564
                },
                {
                    "name": "k_EMsgGCToClientEventStatusChanged",
                    "id": 7565
                },
                {
                    "name": "k_EMsgGCHasItemDefsQuery",
                    "id": 7566
                },
                {
                    "name": "k_EMsgGCHasItemDefsResponse",
                    "id": 7567
                },
                {
                    "name": "k_EMsgGCToGCReplayMonitorValidateReplay",
                    "id": 7569
                },
                {
                    "name": "k_EMsgClientToGCExchangeItemsForOffering",
                    "id": 7570
                },
                {
                    "name": "k_EMsgClientToGCExchangeItemsForOfferingResponse",
                    "id": 7571
                },
                {
                    "name": "k_EMsgLobbyEventPoints",
                    "id": 7572
                },
                {
                    "name": "k_EMsgGCToGCGetCustomGameTickets",
                    "id": 7573
                },
                {
                    "name": "k_EMsgGCToGCGetCustomGameTicketsResponse",
                    "id": 7574
                },
                {
                    "name": "k_EMsgGCToClientNewBloomTimingUpdated",
                    "id": 7575
                },
                {
                    "name": "k_EMsgGCToGCCustomGamePlayed",
                    "id": 7576
                },
                {
                    "name": "k_EMsgGCToGCGrantEventPointsToUser",
                    "id": 7577
                },
                {
                    "name": "k_EMsgGCToGCSetEventMMPanicFlushTime",
                    "id": 7578
                },
                {
                    "name": "k_EMsgGameserverCrashReport",
                    "id": 7579
                },
                {
                    "name": "k_EMsgGameserverCrashReportResponse",
                    "id": 7580
                },
                {
                    "name": "k_EMsgGCToClientSteamDatagramTicket",
                    "id": 7581
                },
                {
                    "name": "k_EMsgGCToGCGrantEventOwnership",
                    "id": 7582
                },
                {
                    "name": "k_EMsgGCToGCSendAccountsEventPoints",
                    "id": 7583
                },
                {
                    "name": "k_EMsgClientToGCRerollPlayerChallenge",
                    "id": 7584
                },
                {
                    "name": "k_EMsgServerToGCRerollPlayerChallenge",
                    "id": 7585
                },
                {
                    "name": "k_EMsgGCRerollPlayerChallengeResponse",
                    "id": 7586
                },
                {
                    "name": "k_EMsgSignOutUpdatePlayerChallenge",
                    "id": 7587
                },
                {
                    "name": "k_EMsgClientToGCSetPartyLeader",
                    "id": 7588
                },
                {
                    "name": "k_EMsgClientToGCCancelPartyInvites",
                    "id": 7589
                },
                {
                    "name": "k_EMsgGCToGCMasterReloadAccount",
                    "id": 7590
                },
                {
                    "name": "k_EMsgSQLGCToGCGrantBackpackSlots",
                    "id": 7591
                },
                {
                    "name": "k_EMsgSQLGrantLeagueMatchToTicketHolders",
                    "id": 7592
                },
                {
                    "name": "k_EMsgClientToGCSetAdditionalEquipsResponse",
                    "id": 7593
                },
                {
                    "name": "k_EMsgGCToGCEmoticonUnlockNoRollback",
                    "id": 7594
                },
                {
                    "name": "k_EMsgGCToGCGetCompendiumFanfare",
                    "id": 7595
                },
                {
                    "name": "k_EMsgServerToGCHoldEventPoints",
                    "id": 7596
                },
                {
                    "name": "k_EMsgSignOutReleaseEventPointHolds",
                    "id": 7597
                },
                {
                    "name": "k_EMsgGCToGCChatNewUserSession",
                    "id": 7598
                },
                {
                    "name": "k_EMsgGCToServerUpdateBroadcastCheers",
                    "id": 7602
                },
                {
                    "name": "k_EMsgGCDev_GrantWarKill",
                    "id": 8001
                },
                {
                    "name": "k_EMsgClientToGCCreateTeamShowcase",
                    "id": 8002
                },
                {
                    "name": "k_EMsgGCToClientTeamShowcaseCreateResult",
                    "id": 8003
                },
                {
                    "name": "k_EMsgServerToGCLockCharmTrading",
                    "id": 8004
                },
                {
                    "name": "k_EMsgDOTACNY2015EventPointUsage",
                    "id": 8005
                },
                {
                    "name": "k_EMsgClientToGCPlayerStatsRequest",
                    "id": 8006
                },
                {
                    "name": "k_EMsgGCToClientPlayerStatsResponse",
                    "id": 8007
                },
                {
                    "name": "k_EMsgGCClearPracticeLobbyTeam",
                    "id": 8008
                },
                {
                    "name": "k_EMsgClientToGCFindTopSourceTVGames",
                    "id": 8009
                },
                {
                    "name": "k_EMsgGCToClientFindTopSourceTVGamesResponse",
                    "id": 8010
                },
                {
                    "name": "k_EMsgGCLobbyList",
                    "id": 8011
                },
                {
                    "name": "k_EMsgGCLobbyListResponse",
                    "id": 8012
                },
                {
                    "name": "k_EMsgGCPlayerStatsMatchSignOut",
                    "id": 8013
                },
                {
                    "name": "k_EMsgClientToGCCustomGamePlayerCountRequest",
                    "id": 8014
                },
                {
                    "name": "k_EMsgGCToClientCustomGamePlayerCountResponse",
                    "id": 8015
                },
                {
                    "name": "k_EMsgClientToGCSocialFeedPostCommentRequest",
                    "id": 8016
                },
                {
                    "name": "k_EMsgGCToClientSocialFeedPostCommentResponse",
                    "id": 8017
                },
                {
                    "name": "k_EMsgClientToGCCustomGamesFriendsPlayedRequest",
                    "id": 8018
                },
                {
                    "name": "k_EMsgGCToClientCustomGamesFriendsPlayedResponse",
                    "id": 8019
                },
                {
                    "name": "k_EMsgClientToGCFriendsPlayedCustomGameRequest",
                    "id": 8020
                },
                {
                    "name": "k_EMsgGCToClientFriendsPlayedCustomGameResponse",
                    "id": 8021
                },
                {
                    "name": "k_EMsgClientToGCFeaturedHeroesRequest",
                    "id": 8022
                },
                {
                    "name": "k_EMsgGCToClientFeaturedHeroesResponse",
                    "id": 8023
                },
                {
                    "name": "k_EMsgGCTopCustomGamesList",
                    "id": 8024
                },
                {
                    "name": "k_EMsgClientToGCSocialMatchPostCommentRequest",
                    "id": 8025
                },
                {
                    "name": "k_EMsgGCToClientSocialMatchPostCommentResponse",
                    "id": 8026
                },
                {
                    "name": "k_EMsgClientToGCSocialMatchDetailsRequest",
                    "id": 8027
                },
                {
                    "name": "k_EMsgGCToClientSocialMatchDetailsResponse",
                    "id": 8028
                },
                {
                    "name": "k_EMsgClientToGCSetPartyOpen",
                    "id": 8029
                },
                {
                    "name": "k_EMsgClientToGCMergePartyInvite",
                    "id": 8030
                },
                {
                    "name": "k_EMsgGCToClientMergeGroupInviteReply",
                    "id": 8031
                },
                {
                    "name": "k_EMsgClientToGCMergePartyResponse",
                    "id": 8032
                },
                {
                    "name": "k_EMsgGCToClientMergePartyResponseReply",
                    "id": 8033
                },
                {
                    "name": "k_EMsgClientToGCGetProfileCardStats",
                    "id": 8034
                },
                {
                    "name": "k_EMsgClientToGCGetProfileCardStatsResponse",
                    "id": 8035
                },
                {
                    "name": "k_EMsgClientToGCTopLeagueMatchesRequest",
                    "id": 8036
                },
                {
                    "name": "k_EMsgClientToGCTopFriendMatchesRequest",
                    "id": 8037
                },
                {
                    "name": "k_EMsgGCToClientTopMatchesResponse",
                    "id": 8038
                },
                {
                    "name": "k_EMsgClientToGCTopPubMatchesRequest",
                    "id": 8039
                },
                {
                    "name": "k_EMsgGCToClientProfileCardStatsUpdated",
                    "id": 8040
                },
                {
                    "name": "k_EMsgServerToGCRealtimeStats",
                    "id": 8041
                },
                {
                    "name": "k_EMsgGCToServerRealtimeStatsStartStop",
                    "id": 8042
                },
                {
                    "name": "k_EMsgGCToGCGetServersForClients",
                    "id": 8045
                },
                {
                    "name": "k_EMsgGCToGCGetServersForClientsResponse",
                    "id": 8046
                },
                {
                    "name": "k_EMsgGCPracticeLobbyKickFromTeam",
                    "id": 8047
                },
                {
                    "name": "k_EMsgDOTAChatGetMemberCount",
                    "id": 8048
                },
                {
                    "name": "k_EMsgDOTAChatGetMemberCountResponse",
                    "id": 8049
                },
                {
                    "name": "k_EMsgClientToGCSocialFeedPostMessageRequest",
                    "id": 8050
                },
                {
                    "name": "k_EMsgGCToClientSocialFeedPostMessageResponse",
                    "id": 8051
                },
                {
                    "name": "k_EMsgCustomGameListenServerStartedLoading",
                    "id": 8052
                },
                {
                    "name": "k_EMsgCustomGameClientFinishedLoading",
                    "id": 8053
                },
                {
                    "name": "k_EMsgGCPracticeLobbyCloseBroadcastChannel",
                    "id": 8054
                },
                {
                    "name": "k_EMsgGCStartFindingMatchResponse",
                    "id": 8055
                },
                {
                    "name": "k_EMsgSQLGCToGCUpdateHeroMMR",
                    "id": 8056
                }
            ]
        },
        {
            "name": "DOTA_GameMode",
            "values": [
                {
                    "name": "DOTA_GAMEMODE_NONE",
                    "id": 0
                },
                {
                    "name": "DOTA_GAMEMODE_AP",
                    "id": 1
                },
                {
                    "name": "DOTA_GAMEMODE_CM",
                    "id": 2
                },
                {
                    "name": "DOTA_GAMEMODE_RD",
                    "id": 3
                },
                {
                    "name": "DOTA_GAMEMODE_SD",
                    "id": 4
                },
                {
                    "name": "DOTA_GAMEMODE_AR",
                    "id": 5
                },
                {
                    "name": "DOTA_GAMEMODE_INTRO",
                    "id": 6
                },
                {
                    "name": "DOTA_GAMEMODE_HW",
                    "id": 7
                },
                {
                    "name": "DOTA_GAMEMODE_REVERSE_CM",
                    "id": 8
                },
                {
                    "name": "DOTA_GAMEMODE_XMAS",
                    "id": 9
                },
                {
                    "name": "DOTA_GAMEMODE_TUTORIAL",
                    "id": 10
                },
                {
                    "name": "DOTA_GAMEMODE_MO",
                    "id": 11
                },
                {
                    "name": "DOTA_GAMEMODE_LP",
                    "id": 12
                },
                {
                    "name": "DOTA_GAMEMODE_POOL1",
                    "id": 13
                },
                {
                    "name": "DOTA_GAMEMODE_FH",
                    "id": 14
                },
                {
                    "name": "DOTA_GAMEMODE_CUSTOM",
                    "id": 15
                },
                {
                    "name": "DOTA_GAMEMODE_CD",
                    "id": 16
                },
                {
                    "name": "DOTA_GAMEMODE_BD",
                    "id": 17
                },
                {
                    "name": "DOTA_GAMEMODE_ABILITY_DRAFT",
                    "id": 18
                },
                {
                    "name": "DOTA_GAMEMODE_EVENT",
                    "id": 19
                },
                {
                    "name": "DOTA_GAMEMODE_ARDM",
                    "id": 20
                },
                {
                    "name": "DOTA_GAMEMODE_1V1MID",
                    "id": 21
                },
                {
                    "name": "DOTA_GAMEMODE_ALL_DRAFT",
                    "id": 22
                }
            ]
        },
        {
            "name": "DOTA_GameState",
            "values": [
                {
                    "name": "DOTA_GAMERULES_STATE_INIT",
                    "id": 0
                },
                {
                    "name": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
                    "id": 1
                },
                {
                    "name": "DOTA_GAMERULES_STATE_HERO_SELECTION",
                    "id": 2
                },
                {
                    "name": "DOTA_GAMERULES_STATE_STRATEGY_TIME",
                    "id": 3
                },
                {
                    "name": "DOTA_GAMERULES_STATE_PRE_GAME",
                    "id": 4
                },
                {
                    "name": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
                    "id": 5
                },
                {
                    "name": "DOTA_GAMERULES_STATE_POST_GAME",
                    "id": 6
                },
                {
                    "name": "DOTA_GAMERULES_STATE_DISCONNECT",
                    "id": 7
                },
                {
                    "name": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
                    "id": 8
                },
                {
                    "name": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
                    "id": 9
                },
                {
                    "name": "DOTA_GAMERULES_STATE_LAST",
                    "id": 10
                }
            ]
        },
        {
            "name": "DOTA_GC_TEAM",
            "values": [
                {
                    "name": "DOTA_GC_TEAM_GOOD_GUYS",
                    "id": 0
                },
                {
                    "name": "DOTA_GC_TEAM_BAD_GUYS",
                    "id": 1
                },
                {
                    "name": "DOTA_GC_TEAM_BROADCASTER",
                    "id": 2
                },
                {
                    "name": "DOTA_GC_TEAM_SPECTATOR",
                    "id": 3
                },
                {
                    "name": "DOTA_GC_TEAM_PLAYER_POOL",
                    "id": 4
                },
                {
                    "name": "DOTA_GC_TEAM_NOTEAM",
                    "id": 5
                }
            ]
        },
        {
            "name": "DOTA_CM_PICK",
            "values": [
                {
                    "name": "DOTA_CM_RANDOM",
                    "id": 0
                },
                {
                    "name": "DOTA_CM_GOOD_GUYS",
                    "id": 1
                },
                {
                    "name": "DOTA_CM_BAD_GUYS",
                    "id": 2
                }
            ]
        },
        {
            "name": "DOTAConnectionState_t",
            "values": [
                {
                    "name": "DOTA_CONNECTION_STATE_UNKNOWN",
                    "id": 0
                },
                {
                    "name": "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
                    "id": 1
                },
                {
                    "name": "DOTA_CONNECTION_STATE_CONNECTED",
                    "id": 2
                },
                {
                    "name": "DOTA_CONNECTION_STATE_DISCONNECTED",
                    "id": 3
                },
                {
                    "name": "DOTA_CONNECTION_STATE_ABANDONED",
                    "id": 4
                },
                {
                    "name": "DOTA_CONNECTION_STATE_LOADING",
                    "id": 5
                },
                {
                    "name": "DOTA_CONNECTION_STATE_FAILED",
                    "id": 6
                }
            ]
        },
        {
            "name": "DOTALeaverStatus_t",
            "values": [
                {
                    "name": "DOTA_LEAVER_NONE",
                    "id": 0
                },
                {
                    "name": "DOTA_LEAVER_DISCONNECTED",
                    "id": 1
                },
                {
                    "name": "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
                    "id": 2
                },
                {
                    "name": "DOTA_LEAVER_ABANDONED",
                    "id": 3
                },
                {
                    "name": "DOTA_LEAVER_AFK",
                    "id": 4
                },
                {
                    "name": "DOTA_LEAVER_NEVER_CONNECTED",
                    "id": 5
                },
                {
                    "name": "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
                    "id": 6
                },
                {
                    "name": "DOTA_LEAVER_FAILED_TO_READY_UP",
                    "id": 7
                },
                {
                    "name": "DOTA_LEAVER_DECLINED",
                    "id": 8
                }
            ]
        },
        {
            "name": "DOTALowPriorityBanType",
            "values": [
                {
                    "name": "DOTA_LOW_PRIORITY_BAN_ABANDON",
                    "id": 0
                },
                {
                    "name": "DOTA_LOW_PRIORITY_BAN_REPORTS",
                    "id": 1
                },
                {
                    "name": "DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON",
                    "id": 2
                }
            ]
        },
        {
            "name": "DOTALobbyReadyState",
            "values": [
                {
                    "name": "DOTALobbyReadyState_UNDECLARED",
                    "id": 0
                },
                {
                    "name": "DOTALobbyReadyState_ACCEPTED",
                    "id": 1
                },
                {
                    "name": "DOTALobbyReadyState_DECLINED",
                    "id": 2
                }
            ]
        },
        {
            "name": "DOTAGameVersion",
            "values": [
                {
                    "name": "GAME_VERSION_CURRENT",
                    "id": 0
                },
                {
                    "name": "GAME_VERSION_STABLE",
                    "id": 1
                }
            ]
        },
        {
            "name": "DOTAJoinLobbyResult",
            "values": [
                {
                    "name": "DOTA_JOIN_RESULT_SUCCESS",
                    "id": 0
                },
                {
                    "name": "DOTA_JOIN_RESULT_ALREADY_IN_GAME",
                    "id": 1
                },
                {
                    "name": "DOTA_JOIN_RESULT_INVALID_LOBBY",
                    "id": 2
                },
                {
                    "name": "DOTA_JOIN_RESULT_INCORRECT_PASSWORD",
                    "id": 3
                },
                {
                    "name": "DOTA_JOIN_RESULT_ACCESS_DENIED",
                    "id": 4
                },
                {
                    "name": "DOTA_JOIN_RESULT_GENERIC_ERROR",
                    "id": 5
                },
                {
                    "name": "DOTA_JOIN_RESULT_INCORRECT_VERSION",
                    "id": 6
                },
                {
                    "name": "DOTA_JOIN_RESULT_IN_TEAM_PARTY",
                    "id": 7
                },
                {
                    "name": "DOTA_JOIN_RESULT_NO_LOBBY_FOUND",
                    "id": 8
                },
                {
                    "name": "DOTA_JOIN_RESULT_LOBBY_FULL",
                    "id": 9
                },
                {
                    "name": "DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION",
                    "id": 10
                }
            ]
        },
        {
            "name": "DOTAMatchVote",
            "values": [
                {
                    "name": "DOTAMatchVote_INVALID",
                    "id": 0
                },
                {
                    "name": "DOTAMatchVote_POSITIVE",
                    "id": 1
                },
                {
                    "name": "DOTAMatchVote_NEGATIVE",
                    "id": 2
                }
            ]
        },
        {
            "name": "DOTA_LobbyMemberXPBonus",
            "values": [
                {
                    "name": "DOTA_LobbyMemberXPBonus_DEFAULT",
                    "id": 0
                },
                {
                    "name": "DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER",
                    "id": 1
                },
                {
                    "name": "DOTA_LobbyMemberXPBonus_SHARE_BONUS",
                    "id": 2
                },
                {
                    "name": "DOTA_LobbyMemberXPBonus_PARTY",
                    "id": 3
                },
                {
                    "name": "DOTA_LobbyMemberXPBonus_RECRUITMENT",
                    "id": 4
                },
                {
                    "name": "DOTA_LobbyMemberXPBonus_PCBANG",
                    "id": 5
                }
            ]
        },
        {
            "name": "DOTALobbyVisibility",
            "values": [
                {
                    "name": "DOTALobbyVisibility_Public",
                    "id": 0
                },
                {
                    "name": "DOTALobbyVisibility_Friends",
                    "id": 1
                },
                {
                    "name": "DOTALobbyVisibility_Unlisted",
                    "id": 2
                }
            ]
        },
        {
            "name": "EDOTAPlayerMMRType",
            "values": [
                {
                    "name": "k_EDOTAPlayerMMRType_Invalid",
                    "id": 0
                },
                {
                    "name": "k_EDOTAPlayerMMRType_GeneralHidden",
                    "id": 1
                },
                {
                    "name": "k_EDOTAPlayerMMRType_SoloHidden",
                    "id": 2
                },
                {
                    "name": "k_EDOTAPlayerMMRType_GeneralCompetitive",
                    "id": 3
                },
                {
                    "name": "k_EDOTAPlayerMMRType_SoloCompetitive",
                    "id": 4
                },
                {
                    "name": "k_EDOTAPlayerMMRType_1v1Competitive",
                    "id": 5
                }
            ]
        },
        {
            "name": "MatchType",
            "values": [
                {
                    "name": "MATCH_TYPE_CASUAL",
                    "id": 0
                },
                {
                    "name": "MATCH_TYPE_COOP_BOTS",
                    "id": 1
                },
                {
                    "name": "MATCH_TYPE_TEAM_RANKED",
                    "id": 2
                },
                {
                    "name": "MATCH_TYPE_LEGACY_SOLO_QUEUE",
                    "id": 3
                },
                {
                    "name": "MATCH_TYPE_COMPETITIVE",
                    "id": 4
                },
                {
                    "name": "MATCH_TYPE_WEEKEND_TOURNEY",
                    "id": 5
                },
                {
                    "name": "MATCH_TYPE_CASUAL_1V1",
                    "id": 6
                },
                {
                    "name": "MATCH_TYPE_EVENT",
                    "id": 7
                }
            ]
        },
        {
            "name": "DOTABotDifficulty",
            "values": [
                {
                    "name": "BOT_DIFFICULTY_PASSIVE",
                    "id": 0
                },
                {
                    "name": "BOT_DIFFICULTY_EASY",
                    "id": 1
                },
                {
                    "name": "BOT_DIFFICULTY_MEDIUM",
                    "id": 2
                },
                {
                    "name": "BOT_DIFFICULTY_HARD",
                    "id": 3
                },
                {
                    "name": "BOT_DIFFICULTY_UNFAIR",
                    "id": 4
                },
                {
                    "name": "BOT_DIFFICULTY_INVALID",
                    "id": 5
                },
                {
                    "name": "BOT_DIFFICULTY_EXTRA1",
                    "id": 6
                },
                {
                    "name": "BOT_DIFFICULTY_EXTRA2",
                    "id": 7
                },
                {
                    "name": "BOT_DIFFICULTY_EXTRA3",
                    "id": 8
                }
            ]
        },
        {
            "name": "MatchLanguages",
            "values": [
                {
                    "name": "MATCH_LANGUAGE_INVALID",
                    "id": 0
                },
                {
                    "name": "MATCH_LANGUAGE_ENGLISH",
                    "id": 1
                },
                {
                    "name": "MATCH_LANGUAGE_RUSSIAN",
                    "id": 2
                },
                {
                    "name": "MATCH_LANGUAGE_CHINESE",
                    "id": 3
                },
                {
                    "name": "MATCH_LANGUAGE_KOREAN",
                    "id": 4
                },
                {
                    "name": "MATCH_LANGUAGE_SPANISH",
                    "id": 5
                },
                {
                    "name": "MATCH_LANGUAGE_PORTUGUESE",
                    "id": 6
                },
                {
                    "name": "MATCH_LANGUAGE_ENGLISH2",
                    "id": 7
                }
            ]
        },
        {
            "name": "ETournamentTemplate",
            "values": [
                {
                    "name": "k_ETournamentTemplate_None",
                    "id": 0
                },
                {
                    "name": "k_ETournamentTemplate_SingleElimination",
                    "id": 1
                }
            ]
        },
        {
            "name": "ETournamentType",
            "values": [
                {
                    "name": "k_ETournamentType_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ETournamentType_WeeklyDivision",
                    "id": 1
                }
            ]
        },
        {
            "name": "EIngameEvent",
            "values": [
                {
                    "name": "k_EIngameEvent_OraclePA",
                    "id": 0
                },
                {
                    "name": "k_EIngameEvent_CNY2015",
                    "id": 1
                },
                {
                    "name": "k_EIngameEvent_CNY2015_PreBeast",
                    "id": 2
                },
                {
                    "name": "k_EIngameEvent_TI5",
                    "id": 3
                }
            ]
        },
        {
            "name": "LobbyDotaTVDelay",
            "values": [
                {
                    "name": "LobbyDotaTV_10",
                    "id": 0
                },
                {
                    "name": "LobbyDotaTV_120",
                    "id": 1
                },
                {
                    "name": "LobbyDotaTV_300",
                    "id": 2
                }
            ]
        },
        {
            "name": "EMatchOutcome",
            "values": [
                {
                    "name": "k_EMatchOutcome_Unknown",
                    "id": 0
                },
                {
                    "name": "k_EMatchOutcome_RadVictory",
                    "id": 2
                },
                {
                    "name": "k_EMatchOutcome_DireVictory",
                    "id": 3
                },
                {
                    "name": "k_EMatchOutcome_NotScored_PoorNetworkConditions",
                    "id": 64
                },
                {
                    "name": "k_EMatchOutcome_NotScored_Leaver",
                    "id": 65
                },
                {
                    "name": "k_EMatchOutcome_NotScored_ServerCrash",
                    "id": 66
                },
                {
                    "name": "k_EMatchOutcome_NotScored_NeverStarted",
                    "id": 67
                }
            ]
        },
        {
            "name": "EDOTAGCSessionNeed",
            "values": [
                {
                    "name": "k_EDOTAGCSessionNeed_Unknown",
                    "id": 0
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserNoSessionNeeded",
                    "id": 100
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserInOnlineGame",
                    "id": 101
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserInLocalGame",
                    "id": 102
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserInUIWasConnected",
                    "id": 103
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserInUINeverConnected",
                    "id": 104
                },
                {
                    "name": "k_EDOTAGCSessionNeed_UserTutorials",
                    "id": 105
                },
                {
                    "name": "k_EDOTAGCSessionNeed_GameServerOnline",
                    "id": 200
                },
                {
                    "name": "k_EDOTAGCSessionNeed_GameServerLocal",
                    "id": 201
                },
                {
                    "name": "k_EDOTAGCSessionNeed_GameServerIdle",
                    "id": 202
                },
                {
                    "name": "k_EDOTAGCSessionNeed_GameServerRelay",
                    "id": 203
                },
                {
                    "name": "k_EDOTAGCSessionNeed_GameServerLocalUpload",
                    "id": 204
                }
            ]
        },
        {
            "name": "Fantasy_Roles",
            "values": [
                {
                    "name": "FANTASY_ROLE_UNDEFINED",
                    "id": 0
                },
                {
                    "name": "FANTASY_ROLE_CORE",
                    "id": 1
                },
                {
                    "name": "FANTASY_ROLE_SUPPORT",
                    "id": 2
                }
            ]
        },
        {
            "name": "Fantasy_Team_Slots",
            "values": [
                {
                    "name": "FANTASY_SLOT_NONE",
                    "id": 0
                },
                {
                    "name": "FANTASY_SLOT_CORE",
                    "id": 1
                },
                {
                    "name": "FANTASY_SLOT_SUPPORT",
                    "id": 2
                },
                {
                    "name": "FANTASY_SLOT_ANY",
                    "id": 3
                },
                {
                    "name": "FANTASY_SLOT_BENCH",
                    "id": 4
                }
            ]
        },
        {
            "name": "Fantasy_Selection_Mode",
            "values": [
                {
                    "name": "FANTASY_SELECTION_INVALID",
                    "id": 0
                },
                {
                    "name": "FANTASY_SELECTION_LOCKED",
                    "id": 1
                },
                {
                    "name": "FANTASY_SELECTION_SHUFFLE",
                    "id": 2
                },
                {
                    "name": "FANTASY_SELECTION_FREE_PICK",
                    "id": 3
                },
                {
                    "name": "FANTASY_SELECTION_ENDED",
                    "id": 4
                },
                {
                    "name": "FANTASY_SELECTION_PRE_SEASON",
                    "id": 5
                },
                {
                    "name": "FANTASY_SELECTION_PRE_DRAFT",
                    "id": 6
                },
                {
                    "name": "FANTASY_SELECTION_DRAFTING",
                    "id": 7
                },
                {
                    "name": "FANTASY_SELECTION_REGULAR_SEASON",
                    "id": 8
                }
            ]
        },
        {
            "name": "DOTA_TournamentEvents",
            "values": [
                {
                    "name": "TE_FIRST_BLOOD",
                    "id": 0
                },
                {
                    "name": "TE_GAME_END",
                    "id": 1
                },
                {
                    "name": "TE_MULTI_KILL",
                    "id": 2
                },
                {
                    "name": "TE_HERO_DENY",
                    "id": 3
                },
                {
                    "name": "TE_AEGIS_DENY",
                    "id": 4
                },
                {
                    "name": "TE_AEGIS_STOLEN",
                    "id": 5
                },
                {
                    "name": "TE_GODLIKE",
                    "id": 6
                },
                {
                    "name": "TE_COURIER_KILL",
                    "id": 7
                },
                {
                    "name": "TE_ECHOSLAM",
                    "id": 8
                },
                {
                    "name": "TE_RAPIER",
                    "id": 9
                },
                {
                    "name": "TE_EARLY_ROSHAN",
                    "id": 10
                },
                {
                    "name": "TE_BLACK_HOLE",
                    "id": 11
                }
            ]
        },
        {
            "name": "DOTA_COMBATLOG_TYPES",
            "values": [
                {
                    "name": "DOTA_COMBATLOG_DAMAGE",
                    "id": 0
                },
                {
                    "name": "DOTA_COMBATLOG_HEAL",
                    "id": 1
                },
                {
                    "name": "DOTA_COMBATLOG_MODIFIER_ADD",
                    "id": 2
                },
                {
                    "name": "DOTA_COMBATLOG_MODIFIER_REMOVE",
                    "id": 3
                },
                {
                    "name": "DOTA_COMBATLOG_DEATH",
                    "id": 4
                },
                {
                    "name": "DOTA_COMBATLOG_ABILITY",
                    "id": 5
                },
                {
                    "name": "DOTA_COMBATLOG_ITEM",
                    "id": 6
                },
                {
                    "name": "DOTA_COMBATLOG_LOCATION",
                    "id": 7
                },
                {
                    "name": "DOTA_COMBATLOG_GOLD",
                    "id": 8
                },
                {
                    "name": "DOTA_COMBATLOG_GAME_STATE",
                    "id": 9
                },
                {
                    "name": "DOTA_COMBATLOG_XP",
                    "id": 10
                },
                {
                    "name": "DOTA_COMBATLOG_PURCHASE",
                    "id": 11
                },
                {
                    "name": "DOTA_COMBATLOG_BUYBACK",
                    "id": 12
                },
                {
                    "name": "DOTA_COMBATLOG_ABILITY_TRIGGER",
                    "id": 13
                },
                {
                    "name": "DOTA_COMBATLOG_PLAYERSTATS",
                    "id": 14
                },
                {
                    "name": "DOTA_COMBATLOG_MULTIKILL",
                    "id": 15
                },
                {
                    "name": "DOTA_COMBATLOG_KILLSTREAK",
                    "id": 16
                },
                {
                    "name": "DOTA_COMBATLOG_TEAM_BUILDING_KILL",
                    "id": 17
                },
                {
                    "name": "DOTA_COMBATLOG_FIRST_BLOOD",
                    "id": 18
                },
                {
                    "name": "DOTA_COMBATLOG_MODIFIER_REFRESH",
                    "id": 19
                }
            ]
        },
        {
            "name": "ETournamentGameState",
            "values": [
                {
                    "name": "k_ETournamentGameState_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ETournamentGameState_Scheduled",
                    "id": 1
                },
                {
                    "name": "k_ETournamentGameState_WaitingForLobbyToStart",
                    "id": 2
                },
                {
                    "name": "k_ETournamentGameState_Active",
                    "id": 3
                },
                {
                    "name": "k_ETournamentGameState_DireVictory",
                    "id": 4
                },
                {
                    "name": "k_ETournamentGameState_RadVictory",
                    "id": 5
                },
                {
                    "name": "k_ETournamentGameState_Canceled",
                    "id": 6
                },
                {
                    "name": "k_ETournamentTeamState_NotNeeded",
                    "id": 7
                }
            ]
        },
        {
            "name": "ETournamentTeamState",
            "values": [
                {
                    "name": "k_ETournamentTeamState_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ETournamentTeamState_Node1",
                    "id": 1
                },
                {
                    "name": "k_ETournamentTeamState_NodeMax",
                    "id": 1024
                },
                {
                    "name": "k_ETournamentTeamState_Eliminated",
                    "id": 14003
                },
                {
                    "name": "k_ETournamentTeamState_Forfeited",
                    "id": 14004
                },
                {
                    "name": "k_ETournamentTeamState_Finished1st",
                    "id": 15001
                },
                {
                    "name": "k_ETournamentTeamState_Finished2nd",
                    "id": 15002
                },
                {
                    "name": "k_ETournamentTeamState_Finished3rd",
                    "id": 15003
                },
                {
                    "name": "k_ETournamentTeamState_Finished4th",
                    "id": 15004
                },
                {
                    "name": "k_ETournamentTeamState_Finished5th",
                    "id": 15005
                },
                {
                    "name": "k_ETournamentTeamState_Finished6th",
                    "id": 15006
                },
                {
                    "name": "k_ETournamentTeamState_Finished7th",
                    "id": 15007
                },
                {
                    "name": "k_ETournamentTeamState_Finished8th",
                    "id": 15008
                },
                {
                    "name": "k_ETournamentTeamState_Finished9th",
                    "id": 15009
                },
                {
                    "name": "k_ETournamentTeamState_Finished10th",
                    "id": 15010
                },
                {
                    "name": "k_ETournamentTeamState_Finished11th",
                    "id": 15011
                },
                {
                    "name": "k_ETournamentTeamState_Finished12th",
                    "id": 15012
                },
                {
                    "name": "k_ETournamentTeamState_Finished13th",
                    "id": 15013
                },
                {
                    "name": "k_ETournamentTeamState_Finished14th",
                    "id": 15014
                },
                {
                    "name": "k_ETournamentTeamState_Finished15th",
                    "id": 15015
                },
                {
                    "name": "k_ETournamentTeamState_Finished16th",
                    "id": 15016
                }
            ]
        },
        {
            "name": "ETournamentState",
            "values": [
                {
                    "name": "k_ETournamentState_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ETournamentState_Setup",
                    "id": 1
                },
                {
                    "name": "k_ETournamentState_Scheduled",
                    "id": 2
                },
                {
                    "name": "k_ETournamentState_InProgress",
                    "id": 3
                },
                {
                    "name": "k_ETournamentState_Completed",
                    "id": 4
                },
                {
                    "name": "k_ETournamentState_Canceled",
                    "id": 5
                }
            ]
        },
        {
            "name": "ETournamentNodeState",
            "values": [
                {
                    "name": "k_ETournamentNodeState_Unknown",
                    "id": 0
                },
                {
                    "name": "k_ETournamentNodeState_TeamsNotYetAssigned",
                    "id": 1
                },
                {
                    "name": "k_ETournamentNodeState_InBetweenGames",
                    "id": 2
                },
                {
                    "name": "k_ETournamentNodeState_GameInProgress",
                    "id": 3
                },
                {
                    "name": "k_ETournamentNodeState_A_Won",
                    "id": 4
                },
                {
                    "name": "k_ETournamentNodeState_B_Won",
                    "id": 5
                },
                {
                    "name": "k_ETournamentNodeState_Canceled",
                    "id": 6
                }
            ]
        },
        {
            "name": "DOTAChatChannelType_t",
            "values": [
                {
                    "name": "DOTAChannelType_Regional",
                    "id": 0
                },
                {
                    "name": "DOTAChannelType_Custom",
                    "id": 1
                },
                {
                    "name": "DOTAChannelType_Party",
                    "id": 2
                },
                {
                    "name": "DOTAChannelType_Lobby",
                    "id": 3
                },
                {
                    "name": "DOTAChannelType_Team",
                    "id": 4
                },
                {
                    "name": "DOTAChannelType_Guild",
                    "id": 5
                },
                {
                    "name": "DOTAChannelType_Fantasy",
                    "id": 6
                },
                {
                    "name": "DOTAChannelType_Whisper",
                    "id": 7
                },
                {
                    "name": "DOTAChannelType_Console",
                    "id": 8
                },
                {
                    "name": "DOTAChannelType_Tab",
                    "id": 9
                },
                {
                    "name": "DOTAChannelType_Invalid",
                    "id": 10
                },
                {
                    "name": "DOTAChannelType_GameAll",
                    "id": 11
                },
                {
                    "name": "DOTAChannelType_GameAllies",
                    "id": 12
                },
                {
                    "name": "DOTAChannelType_GameSpectator",
                    "id": 13
                },
                {
                    "name": "DOTAChannelType_GameCoaching",
                    "id": 14
                }
            ]
        },
        {
            "name": "DOTA_WatchReplayType",
            "values": [
                {
                    "name": "DOTA_WATCH_REPLAY_NORMAL",
                    "id": 0
                },
                {
                    "name": "DOTA_WATCH_REPLAY_HIGHLIGHTS",
                    "id": 1
                }
            ]
        },
        {
            "name": "DOTA_2013PassportSelectionIndices",
            "values": [
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_0",
                    "id": 0
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_1",
                    "id": 1
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_2",
                    "id": 2
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_3",
                    "id": 3
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_4",
                    "id": 4
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_5",
                    "id": 5
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_6",
                    "id": 6
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_7",
                    "id": 7
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_8",
                    "id": 8
                },
                {
                    "name": "PP13_SEL_ALLSTAR_PLAYER_9",
                    "id": 9
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_0",
                    "id": 10
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_1",
                    "id": 11
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_2",
                    "id": 12
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_3",
                    "id": 13
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_4",
                    "id": 14
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_5",
                    "id": 15
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_6",
                    "id": 16
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_7",
                    "id": 17
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_8",
                    "id": 18
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_9",
                    "id": 19
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_10",
                    "id": 20
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_11",
                    "id": 21
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_12",
                    "id": 22
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_13",
                    "id": 23
                },
                {
                    "name": "PP13_SEL_QUALPRED_WEST_14",
                    "id": 24
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_0",
                    "id": 25
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_1",
                    "id": 26
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_2",
                    "id": 27
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_3",
                    "id": 28
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_4",
                    "id": 29
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_5",
                    "id": 30
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_6",
                    "id": 31
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_7",
                    "id": 32
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_8",
                    "id": 33
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_9",
                    "id": 34
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_10",
                    "id": 35
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_11",
                    "id": 36
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_12",
                    "id": 37
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_13",
                    "id": 38
                },
                {
                    "name": "PP13_SEL_QUALPRED_EAST_14",
                    "id": 39
                },
                {
                    "name": "PP13_SEL_TEAMCUP_TEAM",
                    "id": 40
                },
                {
                    "name": "PP13_SEL_TEAMCUP_PLAYER",
                    "id": 41
                },
                {
                    "name": "PP13_SEL_TEAMCUP_TEAM_LOCK",
                    "id": 42
                },
                {
                    "name": "PP13_SEL_TEAMCUP_PLAYER_LOCK",
                    "id": 43
                },
                {
                    "name": "PP13_SEL_EVENTPRED_0",
                    "id": 44
                },
                {
                    "name": "PP13_SEL_EVENTPRED_1",
                    "id": 45
                },
                {
                    "name": "PP13_SEL_EVENTPRED_2",
                    "id": 46
                },
                {
                    "name": "PP13_SEL_EVENTPRED_3",
                    "id": 47
                },
                {
                    "name": "PP13_SEL_EVENTPRED_4",
                    "id": 48
                },
                {
                    "name": "PP13_SEL_EVENTPRED_5",
                    "id": 49
                },
                {
                    "name": "PP13_SEL_EVENTPRED_6",
                    "id": 50
                },
                {
                    "name": "PP13_SEL_EVENTPRED_7",
                    "id": 51
                },
                {
                    "name": "PP13_SEL_EVENTPRED_8",
                    "id": 52
                },
                {
                    "name": "PP13_SEL_EVENTPRED_9",
                    "id": 53
                },
                {
                    "name": "PP13_SEL_EVENTPRED_10",
                    "id": 54
                },
                {
                    "name": "PP13_SEL_EVENTPRED_11",
                    "id": 55
                },
                {
                    "name": "PP13_SEL_EVENTPRED_12",
                    "id": 56
                },
                {
                    "name": "PP13_SEL_EVENTPRED_13",
                    "id": 57
                },
                {
                    "name": "PP13_SEL_EVENTPRED_14",
                    "id": 58
                },
                {
                    "name": "PP13_SEL_EVENTPRED_15",
                    "id": 59
                },
                {
                    "name": "PP13_SEL_EVENTPRED_16",
                    "id": 60
                },
                {
                    "name": "PP13_SEL_EVENTPRED_17",
                    "id": 61
                },
                {
                    "name": "PP13_SEL_EVENTPRED_18",
                    "id": 62
                },
                {
                    "name": "PP13_SEL_EVENTPRED_19",
                    "id": 63
                },
                {
                    "name": "PP13_SEL_EVENTPRED_20",
                    "id": 64
                },
                {
                    "name": "PP13_SEL_EVENTPRED_21",
                    "id": 65
                },
                {
                    "name": "PP13_SEL_EVENTPRED_22",
                    "id": 66
                },
                {
                    "name": "PP13_SEL_EVENTPRED_23",
                    "id": 67
                },
                {
                    "name": "PP13_SEL_EVENTPRED_24",
                    "id": 68
                },
                {
                    "name": "PP13_SEL_EVENTPRED_25",
                    "id": 69
                },
                {
                    "name": "PP13_SEL_EVENTPRED_26",
                    "id": 70
                },
                {
                    "name": "PP13_SEL_EVENTPRED_27",
                    "id": 71
                },
                {
                    "name": "PP13_SEL_EVENTPRED_28",
                    "id": 72
                },
                {
                    "name": "PP13_SEL_EVENTPRED_29",
                    "id": 73
                },
                {
                    "name": "PP13_SEL_EVENTPRED_30",
                    "id": 74
                },
                {
                    "name": "PP13_SEL_EVENTPRED_31",
                    "id": 75
                },
                {
                    "name": "PP13_SEL_EVENTPRED_32",
                    "id": 76
                },
                {
                    "name": "PP13_SEL_EVENTPRED_33",
                    "id": 77
                },
                {
                    "name": "PP13_SEL_EVENTPRED_34",
                    "id": 78
                },
                {
                    "name": "PP13_SEL_EVENTPRED_35",
                    "id": 79
                },
                {
                    "name": "PP13_SEL_EVENTPRED_36",
                    "id": 80
                },
                {
                    "name": "PP13_SEL_EVENTPRED_37",
                    "id": 81
                },
                {
                    "name": "PP13_SEL_EVENTPRED_38",
                    "id": 82
                },
                {
                    "name": "PP13_SEL_EVENTPRED_39",
                    "id": 83
                },
                {
                    "name": "PP13_SEL_EVENTPRED_40",
                    "id": 84
                },
                {
                    "name": "PP13_SEL_EVENTPRED_41",
                    "id": 85
                },
                {
                    "name": "PP13_SEL_EVENTPRED_42",
                    "id": 86
                },
                {
                    "name": "PP13_SEL_EVENTPRED_43",
                    "id": 87
                },
                {
                    "name": "PP13_SEL_SOLO_0",
                    "id": 88
                },
                {
                    "name": "PP13_SEL_SOLO_1",
                    "id": 89
                },
                {
                    "name": "PP13_SEL_SOLO_2",
                    "id": 90
                },
                {
                    "name": "PP13_SEL_SOLO_3",
                    "id": 91
                },
                {
                    "name": "PP13_SEL_SOLO_4",
                    "id": 92
                },
                {
                    "name": "PP13_SEL_SOLO_5",
                    "id": 93
                },
                {
                    "name": "PP13_SEL_SOLO_6",
                    "id": 94
                },
                {
                    "name": "PP13_SEL_SOLO_7",
                    "id": 95
                }
            ]
        },
        {
            "name": "EItemEditorReservationResult",
            "values": [
                {
                    "name": "k_EItemEditorReservationResult_OK",
                    "id": 1
                },
                {
                    "name": "k_EItemEditorReservationResult_AlreadyExists",
                    "id": 2
                },
                {
                    "name": "k_EItemEditorReservationResult_Reserved",
                    "id": 3
                },
                {
                    "name": "k_EItemEditorReservationResult_TimedOut",
                    "id": 4
                }
            ]
        },
        {
            "name": "EProfileCardSlotType",
            "values": [
                {
                    "name": "k_EProfileCardSlotType_Empty",
                    "id": 0
                },
                {
                    "name": "k_EProfileCardSlotType_Stat",
                    "id": 1
                },
                {
                    "name": "k_EProfileCardSlotType_Trophy",
                    "id": 2
                },
                {
                    "name": "k_EProfileCardSlotType_Item",
                    "id": 3
                },
                {
                    "name": "k_EProfileCardSlotType_Hero",
                    "id": 4
                },
                {
                    "name": "k_EProfileCardSlotType_Emoticon",
                    "id": 5
                }
            ]
        },
        {
            "name": "EFeaturedHeroTextField",
            "values": [
                {
                    "name": "k_EFeaturedHeroTextField_NewHero",
                    "id": 0
                },
                {
                    "name": "k_EFeaturedHeroTextField_NewItem",
                    "id": 1
                },
                {
                    "name": "k_EFeaturedHeroTextField_ItemSetDescription",
                    "id": 2
                },
                {
                    "name": "k_EFeaturedHeroTextField_ItemDescription",
                    "id": 3
                },
                {
                    "name": "k_EFeaturedHeroTextField_Hype",
                    "id": 4
                },
                {
                    "name": "k_EFeaturedHeroTextField_HeroWinLoss",
                    "id": 5
                },
                {
                    "name": "k_EFeaturedHeroTextField_FrequentlyPlayedHero",
                    "id": 6
                },
                {
                    "name": "k_EFeaturedHeroTextField_FeaturedItem",
                    "id": 7
                },
                {
                    "name": "k_EFeaturedHeroTextField_PopularItem",
                    "id": 8
                },
                {
                    "name": "k_EFeaturedHeroTextField_SaleItem",
                    "id": 9
                },
                {
                    "name": "k_EFeaturedHeroTextField_SaleDiscount",
                    "id": 10
                },
                {
                    "name": "k_EFeaturedHeroTextField_Container",
                    "id": 11
                }
            ]
        },
        {
            "name": "EFeaturedHeroDataType",
            "values": [
                {
                    "name": "k_EFeaturedHeroDataType_HeroID",
                    "id": 0
                },
                {
                    "name": "k_EFeaturedHeroDataType_ItemDef",
                    "id": 1
                },
                {
                    "name": "k_EFeaturedHeroDataType_HypeString",
                    "id": 2
                },
                {
                    "name": "k_EFeaturedHeroDataType_StartTimestamp",
                    "id": 3
                },
                {
                    "name": "k_EFeaturedHeroDataType_ExpireTimestamp",
                    "id": 4
                },
                {
                    "name": "k_EFeaturedHeroDataType_HeroWins",
                    "id": 5
                },
                {
                    "name": "k_EFeaturedHeroDataType_HeroLosses",
                    "id": 6
                },
                {
                    "name": "k_EFeaturedHeroDataType_SaleDiscount",
                    "id": 7
                },
                {
                    "name": "k_EFeaturedHeroDataType_ContainerItemDef",
                    "id": 8
                }
            ]
        },
        {
            "name": "EDOTAGroupMergeResult",
            "values": [
                {
                    "name": "k_EDOTAGroupMergeResult_OK",
                    "id": 0
                },
                {
                    "name": "k_EDOTAGroupMergeResult_FAILED_GENERIC",
                    "id": 1
                },
                {
                    "name": "k_EDOTAGroupMergeResult_NOT_LEADER",
                    "id": 2
                },
                {
                    "name": "k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS",
                    "id": 3
                },
                {
                    "name": "k_EDOTAGroupMergeResult_TOO_MANY_COACHES",
                    "id": 4
                },
                {
                    "name": "k_EDOTAGroupMergeResult_ENGINE_MISMATCH",
                    "id": 5
                },
                {
                    "name": "k_EDOTAGroupMergeResult_NO_SUCH_GROUP",
                    "id": 6
                },
                {
                    "name": "k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN",
                    "id": 7
                },
                {
                    "name": "k_EDOTAGroupMergeResult_ALREADY_INVITED",
                    "id": 8
                },
                {
                    "name": "k_EDOTAGroupMergeResult_NOT_INVITED",
                    "id": 9
                }
            ]
        },
        {
            "name": "EGCItemMsg",
            "values": [
                {
                    "name": "k_EMsgGCBase",
                    "id": 1000
                },
                {
                    "name": "k_EMsgGCSetItemPosition",
                    "id": 1001
                },
                {
                    "name": "k_EMsgGCCraft",
                    "id": 1002
                },
                {
                    "name": "k_EMsgGCCraftResponse",
                    "id": 1003
                },
                {
                    "name": "k_EMsgGCDelete",
                    "id": 1004
                },
                {
                    "name": "k_EMsgGCVerifyCacheSubscription",
                    "id": 1005
                },
                {
                    "name": "k_EMsgGCNameItem",
                    "id": 1006
                },
                {
                    "name": "k_EMsgGCUnlockCrate",
                    "id": 1007
                },
                {
                    "name": "k_EMsgGCUnlockCrateResponse",
                    "id": 1008
                },
                {
                    "name": "k_EMsgGCPaintItem",
                    "id": 1009
                },
                {
                    "name": "k_EMsgGCPaintItemResponse",
                    "id": 1010
                },
                {
                    "name": "k_EMsgGCGoldenWrenchBroadcast",
                    "id": 1011
                },
                {
                    "name": "k_EMsgGCMOTDRequest",
                    "id": 1012
                },
                {
                    "name": "k_EMsgGCMOTDRequestResponse",
                    "id": 1013
                },
                {
                    "name": "k_EMsgGCAddItemToSocket_DEPRECATED",
                    "id": 1014
                },
                {
                    "name": "k_EMsgGCAddItemToSocketResponse_DEPRECATED",
                    "id": 1015
                },
                {
                    "name": "k_EMsgGCAddSocketToBaseItem_DEPRECATED",
                    "id": 1016
                },
                {
                    "name": "k_EMsgGCAddSocketToItem_DEPRECATED",
                    "id": 1017
                },
                {
                    "name": "k_EMsgGCAddSocketToItemResponse_DEPRECATED",
                    "id": 1018
                },
                {
                    "name": "k_EMsgGCNameBaseItem",
                    "id": 1019
                },
                {
                    "name": "k_EMsgGCNameBaseItemResponse",
                    "id": 1020
                },
                {
                    "name": "k_EMsgGCRemoveSocketItem_DEPRECATED",
                    "id": 1021
                },
                {
                    "name": "k_EMsgGCRemoveSocketItemResponse_DEPRECATED",
                    "id": 1022
                },
                {
                    "name": "k_EMsgGCCustomizeItemTexture",
                    "id": 1023
                },
                {
                    "name": "k_EMsgGCCustomizeItemTextureResponse",
                    "id": 1024
                },
                {
                    "name": "k_EMsgGCUseItemRequest",
                    "id": 1025
                },
                {
                    "name": "k_EMsgGCUseItemResponse",
                    "id": 1026
                },
                {
                    "name": "k_EMsgGCGiftedItems",
                    "id": 1027
                },
                {
                    "name": "k_EMsgGCRemoveItemName",
                    "id": 1030
                },
                {
                    "name": "k_EMsgGCRemoveItemPaint",
                    "id": 1031
                },
                {
                    "name": "k_EMsgGCUnwrapGiftRequest",
                    "id": 1037
                },
                {
                    "name": "k_EMsgGCUnwrapGiftResponse",
                    "id": 1038
                },
                {
                    "name": "k_EMsgGCSetItemStyle",
                    "id": 1039
                },
                {
                    "name": "k_EMsgGCUsedClaimCodeItem",
                    "id": 1040
                },
                {
                    "name": "k_EMsgGCSortItems",
                    "id": 1041
                },
                {
                    "name": "k_EMsgGC_RevolvingLootList_DEPRECATED",
                    "id": 1042
                },
                {
                    "name": "k_EMsgGCLookupAccount",
                    "id": 1043
                },
                {
                    "name": "k_EMsgGCLookupAccountResponse",
                    "id": 1044
                },
                {
                    "name": "k_EMsgGCLookupAccountName",
                    "id": 1045
                },
                {
                    "name": "k_EMsgGCLookupAccountNameResponse",
                    "id": 1046
                },
                {
                    "name": "k_EMsgGCUpdateItemSchema",
                    "id": 1049
                },
                {
                    "name": "k_EMsgGCRemoveCustomTexture",
                    "id": 1051
                },
                {
                    "name": "k_EMsgGCRemoveCustomTextureResponse",
                    "id": 1052
                },
                {
                    "name": "k_EMsgGCRemoveMakersMark",
                    "id": 1053
                },
                {
                    "name": "k_EMsgGCRemoveMakersMarkResponse",
                    "id": 1054
                },
                {
                    "name": "k_EMsgGCRemoveUniqueCraftIndex",
                    "id": 1055
                },
                {
                    "name": "k_EMsgGCRemoveUniqueCraftIndexResponse",
                    "id": 1056
                },
                {
                    "name": "k_EMsgGCSaxxyBroadcast",
                    "id": 1057
                },
                {
                    "name": "k_EMsgGCBackpackSortFinished",
                    "id": 1058
                },
                {
                    "name": "k_EMsgGCAdjustItemEquippedState",
                    "id": 1059
                },
                {
                    "name": "k_EMsgGCCollectItem",
                    "id": 1061
                },
                {
                    "name": "k_EMsgGCItemAcknowledged",
                    "id": 1062
                },
                {
                    "name": "k_EMsgGCPresets_SelectPresetForClass",
                    "id": 1063
                },
                {
                    "name": "k_EMsgGCPresets_SetItemPosition",
                    "id": 1064
                },
                {
                    "name": "k_EMsgGC_ReportAbuse",
                    "id": 1065
                },
                {
                    "name": "k_EMsgGC_ReportAbuseResponse",
                    "id": 1066
                },
                {
                    "name": "k_EMsgGCPresets_SelectPresetForClassReply",
                    "id": 1067
                },
                {
                    "name": "k_EMsgGCNameItemNotification",
                    "id": 1068
                },
                {
                    "name": "k_EMsgGCApplyConsumableEffects",
                    "id": 1069
                },
                {
                    "name": "k_EMsgGCConsumableExhausted",
                    "id": 1070
                },
                {
                    "name": "k_EMsgGCShowItemsPickedUp",
                    "id": 1071
                },
                {
                    "name": "k_EMsgGCClientDisplayNotification",
                    "id": 1072
                },
                {
                    "name": "k_EMsgGCApplyStrangePart",
                    "id": 1073
                },
                {
                    "name": "k_EMsgGC_IncrementKillCountResponse",
                    "id": 1075
                },
                {
                    "name": "k_EMsgGCApplyPennantUpgrade",
                    "id": 1076
                },
                {
                    "name": "k_EMsgGCSetItemPositions",
                    "id": 1077
                },
                {
                    "name": "k_EMsgGCApplyEggEssence",
                    "id": 1078
                },
                {
                    "name": "k_EMsgGCNameEggEssenceResponse",
                    "id": 1079
                },
                {
                    "name": "k_EMsgGCUnlockItemStyle",
                    "id": 1080
                },
                {
                    "name": "k_EMsgGCUnlockItemStyleResponse",
                    "id": 1081
                },
                {
                    "name": "k_EMsgGCFulfillDynamicRecipeComponent",
                    "id": 1082
                },
                {
                    "name": "k_EMsgGCFulfillDynamicRecipeComponentResponse",
                    "id": 1083
                },
                {
                    "name": "k_EMsgGCClientRequestMarketData",
                    "id": 1084
                },
                {
                    "name": "k_EMsgGCClientRequestMarketDataResponse",
                    "id": 1085
                },
                {
                    "name": "k_EMsgGCExtractGems",
                    "id": 1086
                },
                {
                    "name": "k_EMsgGCAddSocket",
                    "id": 1087
                },
                {
                    "name": "k_EMsgGCAddItemToSocket",
                    "id": 1088
                },
                {
                    "name": "k_EMsgGCAddItemToSocketResponse",
                    "id": 1089
                },
                {
                    "name": "k_EMsgGCAddSocketResponse",
                    "id": 1090
                },
                {
                    "name": "k_EMsgGCResetStrangeGemCount",
                    "id": 1091
                },
                {
                    "name": "k_EMsgGCRequestCrateItems",
                    "id": 1092
                },
                {
                    "name": "k_EMsgGCRequestCrateItemsResponse",
                    "id": 1093
                },
                {
                    "name": "k_EMsgGCServerUseItemRequest",
                    "id": 1103
                },
                {
                    "name": "k_EMsgGCAddGiftItem",
                    "id": 1104
                },
                {
                    "name": "k_EMsgGCRemoveItemGiftMessage",
                    "id": 1105
                },
                {
                    "name": "k_EMsgGCRemoveItemGiftMessageResponse",
                    "id": 1106
                },
                {
                    "name": "k_EMsgGCRemoveItemGifterAccountId",
                    "id": 1107
                },
                {
                    "name": "k_EMsgGCRemoveItemGifterAccountIdResponse",
                    "id": 1108
                },
                {
                    "name": "k_EMsgGCTradingBase",
                    "id": 1500
                },
                {
                    "name": "k_EMsgGCTrading_InitiateTradeRequest",
                    "id": 1501
                },
                {
                    "name": "k_EMsgGCTrading_InitiateTradeResponse",
                    "id": 1502
                },
                {
                    "name": "k_EMsgGCTrading_StartSession",
                    "id": 1503
                },
                {
                    "name": "k_EMsgGCTrading_SessionClosed",
                    "id": 1509
                },
                {
                    "name": "k_EMsgGCTrading_InitiateTradeRequestResponse",
                    "id": 1514
                },
                {
                    "name": "k_EMsgGCServerBrowser_FavoriteServer",
                    "id": 1601
                },
                {
                    "name": "k_EMsgGCServerBrowser_BlacklistServer",
                    "id": 1602
                },
                {
                    "name": "k_EMsgGCServerRentalsBase",
                    "id": 1700
                },
                {
                    "name": "k_EMsgGCItemPreviewCheckStatus",
                    "id": 1701
                },
                {
                    "name": "k_EMsgGCItemPreviewStatusResponse",
                    "id": 1702
                },
                {
                    "name": "k_EMsgGCItemPreviewRequest",
                    "id": 1703
                },
                {
                    "name": "k_EMsgGCItemPreviewRequestResponse",
                    "id": 1704
                },
                {
                    "name": "k_EMsgGCItemPreviewExpire",
                    "id": 1705
                },
                {
                    "name": "k_EMsgGCItemPreviewExpireNotification",
                    "id": 1706
                },
                {
                    "name": "k_EMsgGCItemPreviewItemBoughtNotification",
                    "id": 1707
                },
                {
                    "name": "k_EMsgGCDev_NewItemRequest",
                    "id": 2001
                },
                {
                    "name": "k_EMsgGCDev_NewItemRequestResponse",
                    "id": 2002
                },
                {
                    "name": "k_EMsgGCStoreGetUserData",
                    "id": 2500
                },
                {
                    "name": "k_EMsgGCStoreGetUserDataResponse",
                    "id": 2501
                },
                {
                    "name": "k_EMsgGCStorePurchaseFinalize",
                    "id": 2504
                },
                {
                    "name": "k_EMsgGCStorePurchaseFinalizeResponse",
                    "id": 2505
                },
                {
                    "name": "k_EMsgGCStorePurchaseCancel",
                    "id": 2506
                },
                {
                    "name": "k_EMsgGCStorePurchaseCancelResponse",
                    "id": 2507
                },
                {
                    "name": "k_EMsgGCStorePurchaseInit",
                    "id": 2510
                },
                {
                    "name": "k_EMsgGCStorePurchaseInitResponse",
                    "id": 2511
                },
                {
                    "name": "k_EMsgGCBannedWordListRequest",
                    "id": 2512
                },
                {
                    "name": "k_EMsgGCBannedWordListResponse",
                    "id": 2513
                },
                {
                    "name": "k_EMsgGCToGCBannedWordListBroadcast",
                    "id": 2514
                },
                {
                    "name": "k_EMsgGCToGCBannedWordListUpdated",
                    "id": 2515
                },
                {
                    "name": "k_EMsgGCToGCDirtySDOCache",
                    "id": 2516
                },
                {
                    "name": "k_EMsgGCToGCDirtyMultipleSDOCache",
                    "id": 2517
                },
                {
                    "name": "k_EMsgGCToGCUpdateSQLKeyValue",
                    "id": 2518
                },
                {
                    "name": "k_EMsgGCToGCBroadcastConsoleCommand",
                    "id": 2521
                },
                {
                    "name": "k_EMsgGCServerVersionUpdated",
                    "id": 2522
                },
                {
                    "name": "k_EMsgGCApplyAutograph",
                    "id": 2523
                },
                {
                    "name": "k_EMsgGCToGCWebAPIAccountChanged",
                    "id": 2524
                },
                {
                    "name": "k_EMsgGCClientVersionUpdated",
                    "id": 2528
                },
                {
                    "name": "k_EMsgGCItemPurgatory_FinalizePurchase",
                    "id": 2531
                },
                {
                    "name": "k_EMsgGCItemPurgatory_FinalizePurchaseResponse",
                    "id": 2532
                },
                {
                    "name": "k_EMsgGCItemPurgatory_RefundPurchase",
                    "id": 2533
                },
                {
                    "name": "k_EMsgGCItemPurgatory_RefundPurchaseResponse",
                    "id": 2534
                },
                {
                    "name": "k_EMsgGCToGCPlayerStrangeCountAdjustments",
                    "id": 2535
                },
                {
                    "name": "k_EMsgGCRequestStoreSalesData",
                    "id": 2536
                },
                {
                    "name": "k_EMsgGCRequestStoreSalesDataResponse",
                    "id": 2537
                },
                {
                    "name": "k_EMsgGCRequestStoreSalesDataUpToDateResponse",
                    "id": 2538
                },
                {
                    "name": "k_EMsgGCToGCPingRequest",
                    "id": 2539
                },
                {
                    "name": "k_EMsgGCToGCPingResponse",
                    "id": 2540
                },
                {
                    "name": "k_EMsgGCToGCGetUserSessionServer",
                    "id": 2541
                },
                {
                    "name": "k_EMsgGCToGCGetUserSessionServerResponse",
                    "id": 2542
                },
                {
                    "name": "k_EMsgGCToGCGetUserServerMembers",
                    "id": 2543
                },
                {
                    "name": "k_EMsgGCToGCGetUserServerMembersResponse",
                    "id": 2544
                },
                {
                    "name": "k_EMsgGCToGCGetUserPCBangNo",
                    "id": 2545
                },
                {
                    "name": "k_EMsgGCToGCGetUserPCBangNoResponse",
                    "id": 2546
                },
                {
                    "name": "k_EMsgGCToGCCanUseDropRateBonus",
                    "id": 2547
                },
                {
                    "name": "k_EMsgSQLAddDropRateBonus",
                    "id": 2548
                },
                {
                    "name": "k_EMsgGCToGCRefreshSOCache",
                    "id": 2549
                },
                {
                    "name": "k_EMsgGCToGCApplyLocalizationDiff",
                    "id": 2550
                },
                {
                    "name": "k_EMsgGCToGCApplyLocalizationDiffResponse",
                    "id": 2551
                },
                {
                    "name": "k_EMsgGCToGCCheckAccountTradeStatus",
                    "id": 2552
                },
                {
                    "name": "k_EMsgGCToGCCheckAccountTradeStatusResponse",
                    "id": 2553
                },
                {
                    "name": "k_EMsgGCToGCGrantAccountRolledItems",
                    "id": 2554
                },
                {
                    "name": "k_EMsgGCToGCGrantSelfMadeItemToAccount",
                    "id": 2555
                },
                {
                    "name": "k_EMsgSQLUpgradeBattleBooster",
                    "id": 2556
                },
                {
                    "name": "k_EMsgGCPartnerBalanceRequest",
                    "id": 2557
                },
                {
                    "name": "k_EMsgGCPartnerBalanceResponse",
                    "id": 2558
                },
                {
                    "name": "k_EMsgGCPartnerRechargeRedirectURLRequest",
                    "id": 2559
                },
                {
                    "name": "k_EMsgGCPartnerRechargeRedirectURLResponse",
                    "id": 2560
                },
                {
                    "name": "k_EMsgGCStatueCraft",
                    "id": 2561
                },
                {
                    "name": "k_EMsgGCRedeemCode",
                    "id": 2562
                },
                {
                    "name": "k_EMsgGCRedeemCodeResponse",
                    "id": 2563
                },
                {
                    "name": "k_EMsgGCToGCItemConsumptionRollback",
                    "id": 2564
                },
                {
                    "name": "k_EMsgClientToGCWrapAndDeliverGift",
                    "id": 2565
                },
                {
                    "name": "k_EMsgClientToGCWrapAndDeliverGiftResponse",
                    "id": 2566
                },
                {
                    "name": "k_EMsgGCToClientBundleUnpacked",
                    "id": 2567
                },
                {
                    "name": "k_EMsgGCToClientStoreTransactionCompleted",
                    "id": 2568
                },
                {
                    "name": "k_EMsgClientToGCEquipItems",
                    "id": 2569
                },
                {
                    "name": "k_EMsgClientToGCEquipItemsResponse",
                    "id": 2570
                }
            ]
        },
        {
            "name": "EGCMsgResponse",
            "values": [
                {
                    "name": "k_EGCMsgResponseOK",
                    "id": 0
                },
                {
                    "name": "k_EGCMsgResponseDenied",
                    "id": 1
                },
                {
                    "name": "k_EGCMsgResponseServerError",
                    "id": 2
                },
                {
                    "name": "k_EGCMsgResponseTimeout",
                    "id": 3
                },
                {
                    "name": "k_EGCMsgResponseInvalid",
                    "id": 4
                },
                {
                    "name": "k_EGCMsgResponseNoMatch",
                    "id": 5
                },
                {
                    "name": "k_EGCMsgResponseUnknownError",
                    "id": 6
                },
                {
                    "name": "k_EGCMsgResponseNotLoggedOn",
                    "id": 7
                },
                {
                    "name": "k_EGCMsgFailedToCreate",
                    "id": 8
                }
            ]
        },
        {
            "name": "EUnlockStyle",
            "values": [
                {
                    "name": "k_UnlockStyle_Succeeded",
                    "id": 0
                },
                {
                    "name": "k_UnlockStyle_Failed_PreReq",
                    "id": 1
                },
                {
                    "name": "k_UnlockStyle_Failed_CantAfford",
                    "id": 2
                },
                {
                    "name": "k_UnlockStyle_Failed_CantCommit",
                    "id": 3
                },
                {
                    "name": "k_UnlockStyle_Failed_CantLockCache",
                    "id": 4
                },
                {
                    "name": "k_UnlockStyle_Failed_CantAffordAttrib",
                    "id": 5
                },
                {
                    "name": "k_UnlockStyle_Failed_CantAffordGem",
                    "id": 6
                },
                {
                    "name": "k_UnlockStyle_Failed_NoCompendiumLevel",
                    "id": 7
                },
                {
                    "name": "k_UnlockStyle_Failed_AlreadyUnlocked",
                    "id": 8
                }
            ]
        },
        {
            "name": "EItemPurgatoryResponse_Finalize",
            "values": [
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_Succeeded",
                    "id": 0
                },
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_Failed_Incomplete",
                    "id": 1
                },
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_Failed_ItemsNotInPurgatory",
                    "id": 2
                },
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_Failed_CouldNotFindItems",
                    "id": 3
                },
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_Failed_NoSOCache",
                    "id": 4
                },
                {
                    "name": "k_ItemPurgatoryResponse_Finalize_BackpackFull",
                    "id": 5
                }
            ]
        },
        {
            "name": "EItemPurgatoryResponse_Refund",
            "values": [
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Succeeded",
                    "id": 0
                },
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Failed_ItemNotInPurgatory",
                    "id": 1
                },
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Failed_CouldNotFindItem",
                    "id": 2
                },
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Failed_NoSOCache",
                    "id": 3
                },
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Failed_NoDetail",
                    "id": 4
                },
                {
                    "name": "k_ItemPurgatoryResponse_Refund_Failed_NexonWebAPI",
                    "id": 5
                }
            ]
        },
        {
            "name": "EGCPartnerRequestResponse",
            "values": [
                {
                    "name": "k_EPartnerRequestOK",
                    "id": 1
                },
                {
                    "name": "k_EPartnerRequestBadAccount",
                    "id": 2
                },
                {
                    "name": "k_EPartnerRequestNotLinked",
                    "id": 3
                },
                {
                    "name": "k_EPartnerRequestUnsupportedPartnerType",
                    "id": 4
                }
            ]
        },
        {
            "name": "EGCMsgInitiateTradeResponse",
            "values": [
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Accepted",
                    "id": 0
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Declined",
                    "id": 1
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator",
                    "id": 2
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_VAC_Banned_Target",
                    "id": 3
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Target_Already_Trading",
                    "id": 4
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Disabled",
                    "id": 5
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_NotLoggedIn",
                    "id": 6
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Cancel",
                    "id": 7
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_TooSoon",
                    "id": 8
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_TooSoonPenalty",
                    "id": 9
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator",
                    "id": 10
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Trade_Banned_Target",
                    "id": 11
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED",
                    "id": 12
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator",
                    "id": 13
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Service_Unavailable",
                    "id": 14
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Target_Blocked",
                    "id": 15
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail",
                    "id": 16
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_NeedSteamGuard",
                    "id": 17
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_SteamGuardDuration",
                    "id": 18
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_TheyCannotTrade",
                    "id": 19
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Recent_Password_Reset",
                    "id": 20
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Using_New_Device",
                    "id": 21
                },
                {
                    "name": "k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie",
                    "id": 22
                }
            ]
        },
        {
            "name": "EPoorNetworkConditionsType",
            "values": [
                {
                    "name": "k_EPoorNetworkConditions_None",
                    "id": 0
                },
                {
                    "name": "k_EPoorNetworkConditions_Unknown",
                    "id": 1
                },
                {
                    "name": "k_EPoorNetworkConditions_MassDisconnect",
                    "id": 2
                },
                {
                    "name": "k_EPoorNetworkConditions_ExcessBadQosIntervals",
                    "id": 3
                }
            ]
        },
        {
            "name": "EAbilityAbuseType",
            "values": [
                {
                    "name": "k_EAbilityAbuseType_None",
                    "id": 0
                },
                {
                    "name": "k_EAbilityAbuseType_Io_Relocate",
                    "id": 1
                },
                {
                    "name": "k_EAbilityAbuseType_Chen_Test_Of_Faith",
                    "id": 2
                },
                {
                    "name": "k_EAbilityAbuseType_Bane_Nightmare",
                    "id": 3
                },
                {
                    "name": "k_EAbilityAbuseType_Bloodseeker_Bloodrage",
                    "id": 4
                },
                {
                    "name": "k_EAbilityAbuseType_Outworld_Astral_Imprisonment",
                    "id": 5
                },
                {
                    "name": "k_EAbilityAbuseType_Shadow_Demon_Disruption",
                    "id": 6
                }
            ]
        },
        {
            "name": "EIntentionalFeedingType",
            "values": [
                {
                    "name": "k_EIntentionalFeedingType_None",
                    "id": 0
                },
                {
                    "name": "k_EIntentionalFeedingType_ExcessiveDeaths",
                    "id": 1
                },
                {
                    "name": "k_EIntentionalFeedingType_MultipleCourierPurchases",
                    "id": 2
                },
                {
                    "name": "k_EIntentionalFeedingType_MultipleCourierDeaths",
                    "id": 4
                },
                {
                    "name": "k_EIntentionalFeedingType_LowActivity",
                    "id": 8
                },
                {
                    "name": "k_EIntentionalFeedingType_LowDamage",
                    "id": 16
                },
                {
                    "name": "k_EIntentionalFeedingType_HighUnspentGold",
                    "id": 32
                },
                {
                    "name": "k_EIntentionalFeedingType_SoldTooMuchItemValue",
                    "id": 64
                },
                {
                    "name": "k_EIntentionalFeedingType_TooManyDroppedItems",
                    "id": 128
                },
                {
                    "name": "k_EIntentionalFeedingType_ExcessiveTowerDamage",
                    "id": 256
                }
            ]
        },
        {
            "name": "ESuspiciousActivity",
            "values": [
                {
                    "name": "k_ESuspiciousActivity_VAC_MultipleInstances",
                    "id": 1
                },
                {
                    "name": "k_ESuspiciousActivity_IntentionalFeeding",
                    "id": 100
                },
                {
                    "name": "k_ESuspiciousActivity_SuspectedBotFarming",
                    "id": 101
                }
            ]
        },
        {
            "name": "ESuspiciousBuildType",
            "values": [
                {
                    "name": "k_ESuspiciousBuildType_None",
                    "id": 0
                },
                {
                    "name": "k_ESuspiciousBuildType_NoGoldSpent",
                    "id": 1
                },
                {
                    "name": "k_ESuspiciousBuildType_NoItems",
                    "id": 2
                },
                {
                    "name": "k_ESuspiciousBuildType_NoSignificantItems",
                    "id": 3
                },
                {
                    "name": "k_ESuspiciousBuildType_TooManyBoots",
                    "id": 4
                },
                {
                    "name": "k_ESuspiciousBuildType_Bot1",
                    "id": 101
                },
                {
                    "name": "k_ESuspiciousBuildType_Bot2",
                    "id": 102
                },
                {
                    "name": "k_ESuspiciousBuildType_Bot3",
                    "id": 103
                },
                {
                    "name": "k_ESuspiciousBuildType_Bot4",
                    "id": 104
                },
                {
                    "name": "k_ESuspiciousBuildType_Bot5",
                    "id": 105
                }
            ]
        },
        {
            "name": "DOTA_MODIFIER_ENTRY_TYPE",
            "values": [
                {
                    "name": "DOTA_MODIFIER_ENTRY_TYPE_ACTIVE",
                    "id": 1
                },
                {
                    "name": "DOTA_MODIFIER_ENTRY_TYPE_REMOVED",
                    "id": 2
                }
            ]
        },
        {
            "name": "EDotaUserMessages",
            "values": [
                {
                    "name": "DOTA_UM_AddUnitToSelection",
                    "id": 464
                },
                {
                    "name": "DOTA_UM_AIDebugLine",
                    "id": 465
                },
                {
                    "name": "DOTA_UM_ChatEvent",
                    "id": 466
                },
                {
                    "name": "DOTA_UM_CombatHeroPositions",
                    "id": 467
                },
                {
                    "name": "DOTA_UM_CombatLogData",
                    "id": 468
                },
                {
                    "name": "DOTA_UM_CombatLogShowDeath",
                    "id": 470
                },
                {
                    "name": "DOTA_UM_CreateLinearProjectile",
                    "id": 471
                },
                {
                    "name": "DOTA_UM_DestroyLinearProjectile",
                    "id": 472
                },
                {
                    "name": "DOTA_UM_DodgeTrackingProjectiles",
                    "id": 473
                },
                {
                    "name": "DOTA_UM_GlobalLightColor",
                    "id": 474
                },
                {
                    "name": "DOTA_UM_GlobalLightDirection",
                    "id": 475
                },
                {
                    "name": "DOTA_UM_InvalidCommand",
                    "id": 476
                },
                {
                    "name": "DOTA_UM_LocationPing",
                    "id": 477
                },
                {
                    "name": "DOTA_UM_MapLine",
                    "id": 478
                },
                {
                    "name": "DOTA_UM_MiniKillCamInfo",
                    "id": 479
                },
                {
                    "name": "DOTA_UM_MinimapDebugPoint",
                    "id": 480
                },
                {
                    "name": "DOTA_UM_MinimapEvent",
                    "id": 481
                },
                {
                    "name": "DOTA_UM_NevermoreRequiem",
                    "id": 482
                },
                {
                    "name": "DOTA_UM_OverheadEvent",
                    "id": 483
                },
                {
                    "name": "DOTA_UM_SetNextAutobuyItem",
                    "id": 484
                },
                {
                    "name": "DOTA_UM_SharedCooldown",
                    "id": 485
                },
                {
                    "name": "DOTA_UM_SpectatorPlayerClick",
                    "id": 486
                },
                {
                    "name": "DOTA_UM_TutorialTipInfo",
                    "id": 487
                },
                {
                    "name": "DOTA_UM_UnitEvent",
                    "id": 488
                },
                {
                    "name": "DOTA_UM_ParticleManager",
                    "id": 489
                },
                {
                    "name": "DOTA_UM_BotChat",
                    "id": 490
                },
                {
                    "name": "DOTA_UM_HudError",
                    "id": 491
                },
                {
                    "name": "DOTA_UM_ItemPurchased",
                    "id": 492
                },
                {
                    "name": "DOTA_UM_Ping",
                    "id": 493
                },
                {
                    "name": "DOTA_UM_ItemFound",
                    "id": 494
                },
                {
                    "name": "DOTA_UM_CharacterSpeakConcept",
                    "id": 495
                },
                {
                    "name": "DOTA_UM_SwapVerify",
                    "id": 496
                },
                {
                    "name": "DOTA_UM_WorldLine",
                    "id": 497
                },
                {
                    "name": "DOTA_UM_TournamentDrop",
                    "id": 498
                },
                {
                    "name": "DOTA_UM_ItemAlert",
                    "id": 499
                },
                {
                    "name": "DOTA_UM_HalloweenDrops",
                    "id": 500
                },
                {
                    "name": "DOTA_UM_ChatWheel",
                    "id": 501
                },
                {
                    "name": "DOTA_UM_ReceivedXmasGift",
                    "id": 502
                },
                {
                    "name": "DOTA_UM_UpdateSharedContent",
                    "id": 503
                },
                {
                    "name": "DOTA_UM_TutorialRequestExp",
                    "id": 504
                },
                {
                    "name": "DOTA_UM_TutorialPingMinimap",
                    "id": 505
                },
                {
                    "name": "DOTA_UM_GamerulesStateChanged",
                    "id": 506
                },
                {
                    "name": "DOTA_UM_ShowSurvey",
                    "id": 507
                },
                {
                    "name": "DOTA_UM_TutorialFade",
                    "id": 508
                },
                {
                    "name": "DOTA_UM_AddQuestLogEntry",
                    "id": 509
                },
                {
                    "name": "DOTA_UM_SendStatPopup",
                    "id": 510
                },
                {
                    "name": "DOTA_UM_TutorialFinish",
                    "id": 511
                },
                {
                    "name": "DOTA_UM_SendRoshanPopup",
                    "id": 512
                },
                {
                    "name": "DOTA_UM_SendGenericToolTip",
                    "id": 513
                },
                {
                    "name": "DOTA_UM_SendFinalGold",
                    "id": 514
                },
                {
                    "name": "DOTA_UM_CustomMsg",
                    "id": 515
                },
                {
                    "name": "DOTA_UM_CoachHUDPing",
                    "id": 516
                },
                {
                    "name": "DOTA_UM_ClientLoadGridNav",
                    "id": 517
                },
                {
                    "name": "DOTA_UM_TE_Projectile",
                    "id": 518
                },
                {
                    "name": "DOTA_UM_TE_ProjectileLoc",
                    "id": 519
                },
                {
                    "name": "DOTA_UM_TE_DotaBloodImpact",
                    "id": 520
                },
                {
                    "name": "DOTA_UM_TE_UnitAnimation",
                    "id": 521
                },
                {
                    "name": "DOTA_UM_TE_UnitAnimationEnd",
                    "id": 522
                },
                {
                    "name": "DOTA_UM_AbilityPing",
                    "id": 523
                },
                {
                    "name": "DOTA_UM_ShowGenericPopup",
                    "id": 524
                },
                {
                    "name": "DOTA_UM_VoteStart",
                    "id": 525
                },
                {
                    "name": "DOTA_UM_VoteUpdate",
                    "id": 526
                },
                {
                    "name": "DOTA_UM_VoteEnd",
                    "id": 527
                },
                {
                    "name": "DOTA_UM_BoosterState",
                    "id": 528
                },
                {
                    "name": "DOTA_UM_WillPurchaseAlert",
                    "id": 529
                },
                {
                    "name": "DOTA_UM_TutorialMinimapPosition",
                    "id": 530
                },
                {
                    "name": "DOTA_UM_PlayerMMR",
                    "id": 531
                },
                {
                    "name": "DOTA_UM_AbilitySteal",
                    "id": 532
                },
                {
                    "name": "DOTA_UM_CourierKilledAlert",
                    "id": 533
                },
                {
                    "name": "DOTA_UM_EnemyItemAlert",
                    "id": 534
                },
                {
                    "name": "DOTA_UM_StatsMatchDetails",
                    "id": 535
                },
                {
                    "name": "DOTA_UM_MiniTaunt",
                    "id": 536
                },
                {
                    "name": "DOTA_UM_BuyBackStateAlert",
                    "id": 537
                },
                {
                    "name": "DOTA_UM_SpeechBubble",
                    "id": 538
                },
                {
                    "name": "DOTA_UM_CustomHeaderMessage",
                    "id": 539
                },
                {
                    "name": "DOTA_UM_QuickBuyAlert",
                    "id": 540
                },
                {
                    "name": "DOTA_UM_StatsHeroDetails",
                    "id": 541
                },
                {
                    "name": "DOTA_UM_PredictionResult",
                    "id": 542
                },
                {
                    "name": "DOTA_UM_ModifierAlert",
                    "id": 543
                },
                {
                    "name": "DOTA_UM_HPManaAlert",
                    "id": 544
                },
                {
                    "name": "DOTA_UM_GlyphAlert",
                    "id": 545
                },
                {
                    "name": "DOTA_UM_BeastChat",
                    "id": 546
                },
                {
                    "name": "DOTA_UM_SpectatorPlayerUnitOrders",
                    "id": 547
                },
                {
                    "name": "DOTA_UM_CustomHudElement_Create",
                    "id": 548
                },
                {
                    "name": "DOTA_UM_CustomHudElement_Modify",
                    "id": 549
                },
                {
                    "name": "DOTA_UM_CustomHudElement_Destroy",
                    "id": 550
                },
                {
                    "name": "DOTA_UM_CompendiumState",
                    "id": 551
                },
                {
                    "name": "DOTA_UM_ProjectionAbility",
                    "id": 552
                }
            ]
        },
        {
            "name": "DOTA_CHAT_MESSAGE",
            "values": [
                {
                    "name": "CHAT_MESSAGE_INVALID",
                    "id": -1
                },
                {
                    "name": "CHAT_MESSAGE_HERO_KILL",
                    "id": 0
                },
                {
                    "name": "CHAT_MESSAGE_HERO_DENY",
                    "id": 1
                },
                {
                    "name": "CHAT_MESSAGE_BARRACKS_KILL",
                    "id": 2
                },
                {
                    "name": "CHAT_MESSAGE_TOWER_KILL",
                    "id": 3
                },
                {
                    "name": "CHAT_MESSAGE_TOWER_DENY",
                    "id": 4
                },
                {
                    "name": "CHAT_MESSAGE_FIRSTBLOOD",
                    "id": 5
                },
                {
                    "name": "CHAT_MESSAGE_STREAK_KILL",
                    "id": 6
                },
                {
                    "name": "CHAT_MESSAGE_BUYBACK",
                    "id": 7
                },
                {
                    "name": "CHAT_MESSAGE_AEGIS",
                    "id": 8
                },
                {
                    "name": "CHAT_MESSAGE_ROSHAN_KILL",
                    "id": 9
                },
                {
                    "name": "CHAT_MESSAGE_COURIER_LOST",
                    "id": 10
                },
                {
                    "name": "CHAT_MESSAGE_COURIER_RESPAWNED",
                    "id": 11
                },
                {
                    "name": "CHAT_MESSAGE_GLYPH_USED",
                    "id": 12
                },
                {
                    "name": "CHAT_MESSAGE_ITEM_PURCHASE",
                    "id": 13
                },
                {
                    "name": "CHAT_MESSAGE_CONNECT",
                    "id": 14
                },
                {
                    "name": "CHAT_MESSAGE_DISCONNECT",
                    "id": 15
                },
                {
                    "name": "CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT",
                    "id": 16
                },
                {
                    "name": "CHAT_MESSAGE_DISCONNECT_TIME_REMAINING",
                    "id": 17
                },
                {
                    "name": "CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL",
                    "id": 18
                },
                {
                    "name": "CHAT_MESSAGE_RECONNECT",
                    "id": 19
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_LEFT",
                    "id": 20
                },
                {
                    "name": "CHAT_MESSAGE_SAFE_TO_LEAVE",
                    "id": 21
                },
                {
                    "name": "CHAT_MESSAGE_RUNE_PICKUP",
                    "id": 22
                },
                {
                    "name": "CHAT_MESSAGE_RUNE_BOTTLE",
                    "id": 23
                },
                {
                    "name": "CHAT_MESSAGE_INTHEBAG",
                    "id": 24
                },
                {
                    "name": "CHAT_MESSAGE_SECRETSHOP",
                    "id": 25
                },
                {
                    "name": "CHAT_MESSAGE_ITEM_AUTOPURCHASED",
                    "id": 26
                },
                {
                    "name": "CHAT_MESSAGE_ITEMS_COMBINED",
                    "id": 27
                },
                {
                    "name": "CHAT_MESSAGE_SUPER_CREEPS",
                    "id": 28
                },
                {
                    "name": "CHAT_MESSAGE_CANT_USE_ACTION_ITEM",
                    "id": 29
                },
                {
                    "name": "CHAT_MESSAGE_CHARGES_EXHAUSTED",
                    "id": 30
                },
                {
                    "name": "CHAT_MESSAGE_CANTPAUSE",
                    "id": 31
                },
                {
                    "name": "CHAT_MESSAGE_NOPAUSESLEFT",
                    "id": 32
                },
                {
                    "name": "CHAT_MESSAGE_CANTPAUSEYET",
                    "id": 33
                },
                {
                    "name": "CHAT_MESSAGE_PAUSED",
                    "id": 34
                },
                {
                    "name": "CHAT_MESSAGE_UNPAUSE_COUNTDOWN",
                    "id": 35
                },
                {
                    "name": "CHAT_MESSAGE_UNPAUSED",
                    "id": 36
                },
                {
                    "name": "CHAT_MESSAGE_AUTO_UNPAUSED",
                    "id": 37
                },
                {
                    "name": "CHAT_MESSAGE_YOUPAUSED",
                    "id": 38
                },
                {
                    "name": "CHAT_MESSAGE_CANTUNPAUSETEAM",
                    "id": 39
                },
                {
                    "name": "CHAT_MESSAGE_VOICE_TEXT_BANNED",
                    "id": 41
                },
                {
                    "name": "CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME",
                    "id": 42
                },
                {
                    "name": "CHAT_MESSAGE_REPORT_REMINDER",
                    "id": 43
                },
                {
                    "name": "CHAT_MESSAGE_ECON_ITEM",
                    "id": 44
                },
                {
                    "name": "CHAT_MESSAGE_TAUNT",
                    "id": 45
                },
                {
                    "name": "CHAT_MESSAGE_RANDOM",
                    "id": 46
                },
                {
                    "name": "CHAT_MESSAGE_RD_TURN",
                    "id": 47
                },
                {
                    "name": "CHAT_MESSAGE_DROP_RATE_BONUS",
                    "id": 49
                },
                {
                    "name": "CHAT_MESSAGE_NO_BATTLE_POINTS",
                    "id": 50
                },
                {
                    "name": "CHAT_MESSAGE_DENIED_AEGIS",
                    "id": 51
                },
                {
                    "name": "CHAT_MESSAGE_INFORMATIONAL",
                    "id": 52
                },
                {
                    "name": "CHAT_MESSAGE_AEGIS_STOLEN",
                    "id": 53
                },
                {
                    "name": "CHAT_MESSAGE_ROSHAN_CANDY",
                    "id": 54
                },
                {
                    "name": "CHAT_MESSAGE_ITEM_GIFTED",
                    "id": 55
                },
                {
                    "name": "CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL",
                    "id": 56
                },
                {
                    "name": "CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED",
                    "id": 57
                },
                {
                    "name": "CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED",
                    "id": 58
                },
                {
                    "name": "CHAT_MESSAGE_HOLDOUT_WALL_FINISHED",
                    "id": 59
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO",
                    "id": 62
                },
                {
                    "name": "CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION",
                    "id": 63
                },
                {
                    "name": "CHAT_MESSAGE_DISCONNECT_LIMITED_HERO",
                    "id": 64
                },
                {
                    "name": "CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION",
                    "id": 65
                },
                {
                    "name": "CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS",
                    "id": 66
                },
                {
                    "name": "CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE",
                    "id": 67
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_LEFT_AFK",
                    "id": 73
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG",
                    "id": 74
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_ABANDONED",
                    "id": 75
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_ABANDONED_AFK",
                    "id": 76
                },
                {
                    "name": "CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG",
                    "id": 77
                },
                {
                    "name": "CHAT_MESSAGE_WILL_NOT_BE_SCORED",
                    "id": 78
                },
                {
                    "name": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED",
                    "id": 79
                },
                {
                    "name": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK",
                    "id": 80
                },
                {
                    "name": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED",
                    "id": 81
                },
                {
                    "name": "CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON",
                    "id": 82
                },
                {
                    "name": "CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS",
                    "id": 83
                },
                {
                    "name": "CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY",
                    "id": 84
                },
                {
                    "name": "CHAT_MESSAGE_COMPENDIUM_LEVEL",
                    "id": 85
                },
                {
                    "name": "CHAT_MESSAGE_VICTORY_PREDICTION_STREAK",
                    "id": 86
                },
                {
                    "name": "CHAT_MESSAGE_ASSASSIN_ANNOUNCE",
                    "id": 87
                },
                {
                    "name": "CHAT_MESSAGE_ASSASSIN_SUCCESS",
                    "id": 88
                },
                {
                    "name": "CHAT_MESSAGE_ASSASSIN_DENIED",
                    "id": 89
                },
                {
                    "name": "CHAT_MESSAGE_VICTORY_PREDICTION_SINGLE_USER_CONFIRM",
                    "id": 90
                },
                {
                    "name": "CHAT_MESSAGE_EFFIGY_KILL",
                    "id": 91
                },
                {
                    "name": "CHAT_MESSAGE_VOICE_TEXT_BANNED_OVERFLOW",
                    "id": 92
                },
                {
                    "name": "CHAT_MESSAGE_YEAR_BEAST_KILLED",
                    "id": 93
                },
                {
                    "name": "CHAT_MESSAGE_PAUSE_COUNTDOWN",
                    "id": 94
                }
            ]
        },
        {
            "name": "DOTA_NO_BATTLE_POINTS_REASONS",
            "values": [
                {
                    "name": "NO_BATTLE_POINTS_WRONG_LOBBY_TYPE",
                    "id": 1
                },
                {
                    "name": "NO_BATTLE_POINTS_PRACTICE_BOTS",
                    "id": 2
                },
                {
                    "name": "NO_BATTLE_POINTS_CHEATS_ENABLED",
                    "id": 3
                },
                {
                    "name": "NO_BATTLE_POINTS_LOW_PRIORITY",
                    "id": 4
                }
            ]
        },
        {
            "name": "DOTA_CHAT_INFORMATIONAL",
            "values": [
                {
                    "name": "INFO_COOP_BATTLE_POINTS_RULES",
                    "id": 1
                },
                {
                    "name": "INFO_FROSTIVUS_ABANDON_REMINDER",
                    "id": 2
                },
                {
                    "name": "INFO_RANKED_REMINDER",
                    "id": 3
                },
                {
                    "name": "INFO_COOP_LOW_PRIORITY_PASSIVE_REMINDER",
                    "id": 4
                }
            ]
        },
        {
            "name": "DOTA_ABILITY_PING_TYPE",
            "values": [
                {
                    "name": "ABILITY_PING_READY",
                    "id": 1
                },
                {
                    "name": "ABILITY_PING_MANA",
                    "id": 2
                },
                {
                    "name": "ABILITY_PING_COOLDOWN",
                    "id": 3
                },
                {
                    "name": "ABILITY_PING_ENEMY",
                    "id": 4
                },
                {
                    "name": "ABILITY_PING_UNLEARNED",
                    "id": 5
                }
            ]
        },
        {
            "name": "EDotaEntityMessages",
            "values": [
                {
                    "name": "DOTA_UNIT_SPEECH",
                    "id": 0
                },
                {
                    "name": "DOTA_UNIT_SPEECH_MUTE",
                    "id": 1
                },
                {
                    "name": "DOTA_UNIT_ADD_GESTURE",
                    "id": 2
                },
                {
                    "name": "DOTA_UNIT_REMOVE_GESTURE",
                    "id": 3
                },
                {
                    "name": "DOTA_UNIT_REMOVE_ALL_GESTURES",
                    "id": 4
                },
                {
                    "name": "DOTA_UNIT_FADE_GESTURE",
                    "id": 6
                },
                {
                    "name": "DOTA_UNIT_SPEECH_CLIENTSIDE_RULES",
                    "id": 7
                }
            ]
        },
        {
            "name": "DOTA_PARTICLE_MESSAGE",
            "values": [
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_CREATE",
                    "id": 0
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE",
                    "id": 1
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD",
                    "id": 2
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION",
                    "id": 3
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK",
                    "id": 4
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT",
                    "id": 5
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET",
                    "id": 6
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_DESTROY",
                    "id": 7
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING",
                    "id": 8
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_RELEASE",
                    "id": 9
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_LATENCY",
                    "id": 10
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW",
                    "id": 11
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_FROZEN",
                    "id": 12
                },
                {
                    "name": "DOTA_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT",
                    "id": 13
                }
            ]
        },
        {
            "name": "DOTA_OVERHEAD_ALERT",
            "values": [
                {
                    "name": "OVERHEAD_ALERT_GOLD",
                    "id": 0
                },
                {
                    "name": "OVERHEAD_ALERT_DENY",
                    "id": 1
                },
                {
                    "name": "OVERHEAD_ALERT_CRITICAL",
                    "id": 2
                },
                {
                    "name": "OVERHEAD_ALERT_XP",
                    "id": 3
                },
                {
                    "name": "OVERHEAD_ALERT_BONUS_SPELL_DAMAGE",
                    "id": 4
                },
                {
                    "name": "OVERHEAD_ALERT_MISS",
                    "id": 5
                },
                {
                    "name": "OVERHEAD_ALERT_DAMAGE",
                    "id": 6
                },
                {
                    "name": "OVERHEAD_ALERT_EVADE",
                    "id": 7
                },
                {
                    "name": "OVERHEAD_ALERT_BLOCK",
                    "id": 8
                },
                {
                    "name": "OVERHEAD_ALERT_BONUS_POISON_DAMAGE",
                    "id": 9
                },
                {
                    "name": "OVERHEAD_ALERT_HEAL",
                    "id": 10
                },
                {
                    "name": "OVERHEAD_ALERT_MANA_ADD",
                    "id": 11
                },
                {
                    "name": "OVERHEAD_ALERT_MANA_LOSS",
                    "id": 12
                },
                {
                    "name": "OVERHEAD_ALERT_LAST_HIT_EARLY",
                    "id": 13
                },
                {
                    "name": "OVERHEAD_ALERT_LAST_HIT_CLOSE",
                    "id": 14
                },
                {
                    "name": "OVERHEAD_ALERT_LAST_HIT_MISS",
                    "id": 15
                }
            ]
        },
        {
            "name": "DOTA_POSITION_CATEGORY",
            "values": [
                {
                    "name": "DOTA_POSITION_NONE",
                    "id": 0
                },
                {
                    "name": "DOTA_POSITION_BOTTOM_LANE",
                    "id": 1
                },
                {
                    "name": "DOTA_POSITION_MID_LANE",
                    "id": 2
                },
                {
                    "name": "DOTA_POSITION_TOP_LANE",
                    "id": 3
                },
                {
                    "name": "DOTA_POSITION_RADIANT_JUNGLE",
                    "id": 4
                },
                {
                    "name": "DOTA_POSITION_DIRE_JUNGLE",
                    "id": 5
                },
                {
                    "name": "DOTA_POSITION_RADIANT_ANCIENTS",
                    "id": 6
                },
                {
                    "name": "DOTA_POSITION_DIRE_ANCIENTS",
                    "id": 7
                },
                {
                    "name": "DOTA_POSITION_RADIANT_SECRET_SHOP",
                    "id": 8
                },
                {
                    "name": "DOTA_POSITION_DIRE_SECRET_SHOP",
                    "id": 9
                },
                {
                    "name": "DOTA_POSITION_RIVER",
                    "id": 10
                },
                {
                    "name": "DOTA_POSITION_ROSHAN_PIT",
                    "id": 11
                },
                {
                    "name": "DOTA_POSITION_RADIANT_BASE",
                    "id": 12
                },
                {
                    "name": "DOTA_POSITION_DIRE_BASE",
                    "id": 13
                },
                {
                    "name": "DOTA_POSITION_FOUNTAIN",
                    "id": 14
                },
                {
                    "name": "DOTA_POSITION_OTHER",
                    "id": 15
                }
            ]
        },
        {
            "name": "DOTA_ABILITY_TARGET_TYPE",
            "values": [
                {
                    "name": "DOTA_ABILITY_TARGET_NONE",
                    "id": 0
                },
                {
                    "name": "DOTA_ABILITY_TARGET_SELF",
                    "id": 1
                },
                {
                    "name": "DOTA_ABILITY_TARGET_ALLY_HERO",
                    "id": 2
                },
                {
                    "name": "DOTA_ABILITY_TARGET_ALLY_CREEP",
                    "id": 3
                },
                {
                    "name": "DOTA_ABILITY_TARGET_ENEMY_HERO",
                    "id": 4
                },
                {
                    "name": "DOTA_ABILITY_TARGET_ENEMY_CREEP",
                    "id": 5
                }
            ]
        },
        {
            "name": "EHeroStatType",
            "values": [
                {
                    "name": "k_EHeroStatType_None",
                    "id": 0
                },
                {
                    "name": "k_EHeroStatType_AxeTotalDamage",
                    "id": 2000
                },
                {
                    "name": "k_EHeroStatType_BattleHungerDamage",
                    "id": 2001
                },
                {
                    "name": "k_EHeroStatType_CounterHelixDamage",
                    "id": 2002
                },
                {
                    "name": "k_EHeroStatType_CullingBladeDamage",
                    "id": 2003
                },
                {
                    "name": "k_EHeroStatType_BerserkersCallCastCount",
                    "id": 2004
                },
                {
                    "name": "k_EHeroStatType_BerserkersCallHeroesHitAverage",
                    "id": 2005
                },
                {
                    "name": "k_EHeroStatType_BerserkersCallOtherUnitsHit",
                    "id": 2006
                },
                {
                    "name": "k_EHeroStatType_BerserkersCallHeroAttacksTaken",
                    "id": 2007
                },
                {
                    "name": "k_EHeroStatType_BerserkersCallOtherAttacksTaken",
                    "id": 2008
                },
                {
                    "name": "k_EHeroStatType_BattleHungerCastCount",
                    "id": 2009
                },
                {
                    "name": "k_EHeroStatType_BattleHungerPotentialDuration",
                    "id": 2010
                },
                {
                    "name": "k_EHeroStatType_BattleHungerAverageDuration",
                    "id": 2011
                },
                {
                    "name": "k_EHeroStatType_CounterHelixProcCount",
                    "id": 2012
                },
                {
                    "name": "k_EHeroStatType_CounterHelixHeroProcCount",
                    "id": 2013
                },
                {
                    "name": "k_EHeroStatType_CounterHelixHeroesHitAverage",
                    "id": 2014
                },
                {
                    "name": "k_EHeroStatType_CounterHelixOtherUnitsHitCount",
                    "id": 2015
                },
                {
                    "name": "k_EHeroStatType_CullingBladeCastCount",
                    "id": 2016
                },
                {
                    "name": "k_EHeroStatType_CullingBladeKillCount",
                    "id": 2017
                },
                {
                    "name": "k_EHeroStatType_CullingBladeAverageHealthCulled",
                    "id": 2018
                },
                {
                    "name": "k_EHeroStatType_CullingBladeAverageDamageAvailable",
                    "id": 2019
                },
                {
                    "name": "k_EHeroStatType_CullingBladeHeroBuffAverage",
                    "id": 2020
                }
            ]
        },
        {
            "name": "EPlayerVoiceListenState",
            "values": [
                {
                    "name": "kPVLS_None",
                    "id": 0
                },
                {
                    "name": "kPVLS_DeniedChatBanned",
                    "id": 1
                },
                {
                    "name": "kPVLS_DeniedPartner",
                    "id": 2
                },
                {
                    "name": "kPVLS_DeniedHLTVTalkerNotSpectator",
                    "id": 3
                },
                {
                    "name": "kPVLS_DeniedHLTVNoTalkerPlayerID",
                    "id": 4
                },
                {
                    "name": "kPVLS_DeniedHLTVTalkerNotBroadcaster",
                    "id": 5
                },
                {
                    "name": "kPVLS_DeniedTeamSpectator",
                    "id": 6
                },
                {
                    "name": "kPVLS_DeniedStudent",
                    "id": 8
                },
                {
                    "name": "kPVLS_Denied",
                    "id": 64
                },
                {
                    "name": "kPVLS_AllowHLTVTalkerIsBroadcaster",
                    "id": 65
                },
                {
                    "name": "kPVLS_AllowCoBroadcaster",
                    "id": 66
                },
                {
                    "name": "kPVLS_AllowAllChat",
                    "id": 67
                },
                {
                    "name": "kPVLS_AllowStudentToCoach",
                    "id": 68
                },
                {
                    "name": "kPVLS_AllowFellowStudent",
                    "id": 69
                },
                {
                    "name": "kPVLS_AllowTalkerIsCoach",
                    "id": 70
                },
                {
                    "name": "kPVLS_AllowCoachHearTeam",
                    "id": 71
                },
                {
                    "name": "kPVLS_AllowSameTeam",
                    "id": 72
                },
                {
                    "name": "kPVLS_AllowShowcase",
                    "id": 73
                }
            ]
        },
        {
            "name": "EBaseGameEvents",
            "values": [
                {
                    "name": "GE_VDebugGameSessionIDEvent",
                    "id": 200
                },
                {
                    "name": "GE_PlaceDecalEvent",
                    "id": 201
                },
                {
                    "name": "GE_ClearWorldDecalsEvent",
                    "id": 202
                },
                {
                    "name": "GE_ClearEntityDecalsEvent",
                    "id": 203
                },
                {
                    "name": "GE_ClearDecalsForSkeletonInstanceEvent",
                    "id": 204
                },
                {
                    "name": "GE_Source1LegacyGameEventList",
                    "id": 205
                },
                {
                    "name": "GE_Source1LegacyListenEvents",
                    "id": 206
                },
                {
                    "name": "GE_Source1LegacyGameEvent",
                    "id": 207
                },
                {
                    "name": "GE_SosStartSoundEvent",
                    "id": 208
                },
                {
                    "name": "GE_SosStopSoundEvent",
                    "id": 209
                },
                {
                    "name": "GE_SosSetSoundEventParams",
                    "id": 210
                },
                {
                    "name": "GE_SosSetLibraryStackFields",
                    "id": 211
                },
                {
                    "name": "GE_SosStopSoundEventHash",
                    "id": 212
                }
            ]
        },
        {
            "name": "EGCSystemMsg",
            "values": [
                {
                    "name": "k_EGCMsgInvalid",
                    "id": 0
                },
                {
                    "name": "k_EGCMsgMulti",
                    "id": 1
                },
                {
                    "name": "k_EGCMsgGenericReply",
                    "id": 10
                },
                {
                    "name": "k_EGCMsgSystemBase",
                    "id": 50
                },
                {
                    "name": "k_EGCMsgAchievementAwarded",
                    "id": 51
                },
                {
                    "name": "k_EGCMsgConCommand",
                    "id": 52
                },
                {
                    "name": "k_EGCMsgStartPlaying",
                    "id": 53
                },
                {
                    "name": "k_EGCMsgStopPlaying",
                    "id": 54
                },
                {
                    "name": "k_EGCMsgStartGameserver",
                    "id": 55
                },
                {
                    "name": "k_EGCMsgStopGameserver",
                    "id": 56
                },
                {
                    "name": "k_EGCMsgWGRequest",
                    "id": 57
                },
                {
                    "name": "k_EGCMsgWGResponse",
                    "id": 58
                },
                {
                    "name": "k_EGCMsgGetUserGameStatsSchema",
                    "id": 59
                },
                {
                    "name": "k_EGCMsgGetUserGameStatsSchemaResponse",
                    "id": 60
                },
                {
                    "name": "k_EGCMsgGetUserStatsDEPRECATED",
                    "id": 61
                },
                {
                    "name": "k_EGCMsgGetUserStatsResponse",
                    "id": 62
                },
                {
                    "name": "k_EGCMsgAppInfoUpdated",
                    "id": 63
                },
                {
                    "name": "k_EGCMsgValidateSession",
                    "id": 64
                },
                {
                    "name": "k_EGCMsgValidateSessionResponse",
                    "id": 65
                },
                {
                    "name": "k_EGCMsgLookupAccountFromInput",
                    "id": 66
                },
                {
                    "name": "k_EGCMsgSendHTTPRequest",
                    "id": 67
                },
                {
                    "name": "k_EGCMsgSendHTTPRequestResponse",
                    "id": 68
                },
                {
                    "name": "k_EGCMsgPreTestSetup",
                    "id": 69
                },
                {
                    "name": "k_EGCMsgRecordSupportAction",
                    "id": 70
                },
                {
                    "name": "k_EGCMsgGetAccountDetails_DEPRECATED",
                    "id": 71
                },
                {
                    "name": "k_EGCMsgReceiveInterAppMessage",
                    "id": 73
                },
                {
                    "name": "k_EGCMsgFindAccounts",
                    "id": 74
                },
                {
                    "name": "k_EGCMsgPostAlert",
                    "id": 75
                },
                {
                    "name": "k_EGCMsgGetLicenses",
                    "id": 76
                },
                {
                    "name": "k_EGCMsgGetUserStats",
                    "id": 77
                },
                {
                    "name": "k_EGCMsgGetCommands",
                    "id": 78
                },
                {
                    "name": "k_EGCMsgGetCommandsResponse",
                    "id": 79
                },
                {
                    "name": "k_EGCMsgAddFreeLicense",
                    "id": 80
                },
                {
                    "name": "k_EGCMsgAddFreeLicenseResponse",
                    "id": 81
                },
                {
                    "name": "k_EGCMsgGetIPLocation",
                    "id": 82
                },
                {
                    "name": "k_EGCMsgGetIPLocationResponse",
                    "id": 83
                },
                {
                    "name": "k_EGCMsgSystemStatsSchema",
                    "id": 84
                },
                {
                    "name": "k_EGCMsgGetSystemStats",
                    "id": 85
                },
                {
                    "name": "k_EGCMsgGetSystemStatsResponse",
                    "id": 86
                },
                {
                    "name": "k_EGCMsgSendEmail",
                    "id": 87
                },
                {
                    "name": "k_EGCMsgSendEmailResponse",
                    "id": 88
                },
                {
                    "name": "k_EGCMsgGetEmailTemplate",
                    "id": 89
                },
                {
                    "name": "k_EGCMsgGetEmailTemplateResponse",
                    "id": 90
                },
                {
                    "name": "k_EGCMsgGrantGuestPass",
                    "id": 91
                },
                {
                    "name": "k_EGCMsgGrantGuestPassResponse",
                    "id": 92
                },
                {
                    "name": "k_EGCMsgGetAccountDetails",
                    "id": 93
                },
                {
                    "name": "k_EGCMsgGetAccountDetailsResponse",
                    "id": 94
                },
                {
                    "name": "k_EGCMsgGetPersonaNames",
                    "id": 95
                },
                {
                    "name": "k_EGCMsgGetPersonaNamesResponse",
                    "id": 96
                },
                {
                    "name": "k_EGCMsgMultiplexMsg",
                    "id": 97
                },
                {
                    "name": "k_EGCMsgWebAPIRegisterInterfaces",
                    "id": 101
                },
                {
                    "name": "k_EGCMsgWebAPIJobRequest",
                    "id": 102
                },
                {
                    "name": "k_EGCMsgWebAPIJobRequestHttpResponse",
                    "id": 104
                },
                {
                    "name": "k_EGCMsgWebAPIJobRequestForwardResponse",
                    "id": 105
                },
                {
                    "name": "k_EGCMsgMemCachedGet",
                    "id": 200
                },
                {
                    "name": "k_EGCMsgMemCachedGetResponse",
                    "id": 201
                },
                {
                    "name": "k_EGCMsgMemCachedSet",
                    "id": 202
                },
                {
                    "name": "k_EGCMsgMemCachedDelete",
                    "id": 203
                },
                {
                    "name": "k_EGCMsgMemCachedStats",
                    "id": 204
                },
                {
                    "name": "k_EGCMsgMemCachedStatsResponse",
                    "id": 205
                },
                {
                    "name": "k_EGCMsgSQLStats",
                    "id": 210
                },
                {
                    "name": "k_EGCMsgSQLStatsResponse",
                    "id": 211
                },
                {
                    "name": "k_EGCMsgMasterSetDirectory",
                    "id": 220
                },
                {
                    "name": "k_EGCMsgMasterSetDirectoryResponse",
                    "id": 221
                },
                {
                    "name": "k_EGCMsgMasterSetWebAPIRouting",
                    "id": 222
                },
                {
                    "name": "k_EGCMsgMasterSetWebAPIRoutingResponse",
                    "id": 223
                },
                {
                    "name": "k_EGCMsgMasterSetClientMsgRouting",
                    "id": 224
                },
                {
                    "name": "k_EGCMsgMasterSetClientMsgRoutingResponse",
                    "id": 225
                },
                {
                    "name": "k_EGCMsgSetOptions",
                    "id": 226
                },
                {
                    "name": "k_EGCMsgSetOptionsResponse",
                    "id": 227
                },
                {
                    "name": "k_EGCMsgSystemBase2",
                    "id": 500
                },
                {
                    "name": "k_EGCMsgGetPurchaseTrustStatus",
                    "id": 501
                },
                {
                    "name": "k_EGCMsgGetPurchaseTrustStatusResponse",
                    "id": 502
                },
                {
                    "name": "k_EGCMsgUpdateSession",
                    "id": 503
                },
                {
                    "name": "k_EGCMsgGCAccountVacStatusChange",
                    "id": 504
                },
                {
                    "name": "k_EGCMsgCheckFriendship",
                    "id": 505
                },
                {
                    "name": "k_EGCMsgCheckFriendshipResponse",
                    "id": 506
                },
                {
                    "name": "k_EGCMsgGetPartnerAccountLink",
                    "id": 507
                },
                {
                    "name": "k_EGCMsgGetPartnerAccountLinkResponse",
                    "id": 508
                },
                {
                    "name": "k_EGCMsgVSReportedSuspiciousActivity",
                    "id": 509
                },
                {
                    "name": "k_EGCMsgDPPartnerMicroTxns",
                    "id": 512
                },
                {
                    "name": "k_EGCMsgDPPartnerMicroTxnsResponse",
                    "id": 513
                },
                {
                    "name": "k_EGCMsgGetIPASN",
                    "id": 514
                },
                {
                    "name": "k_EGCMsgGetIPASNResponse",
                    "id": 515
                },
                {
                    "name": "k_EGCMsgGetAppFriendsList",
                    "id": 516
                },
                {
                    "name": "k_EGCMsgGetAppFriendsListResponse",
                    "id": 517
                }
            ]
        },
        {
            "name": "ESOMsg",
            "values": [
                {
                    "name": "k_ESOMsg_Create",
                    "id": 21
                },
                {
                    "name": "k_ESOMsg_Update",
                    "id": 22
                },
                {
                    "name": "k_ESOMsg_Destroy",
                    "id": 23
                },
                {
                    "name": "k_ESOMsg_CacheSubscribed",
                    "id": 24
                },
                {
                    "name": "k_ESOMsg_CacheUnsubscribed",
                    "id": 25
                },
                {
                    "name": "k_ESOMsg_UpdateMultiple",
                    "id": 26
                },
                {
                    "name": "k_ESOMsg_CacheSubscriptionRefresh",
                    "id": 28
                },
                {
                    "name": "k_ESOMsg_CacheSubscribedUpToDate",
                    "id": 29
                }
            ]
        },
        {
            "name": "EGCBaseClientMsg",
            "values": [
                {
                    "name": "k_EMsgGCPingRequest",
                    "id": 3001
                },
                {
                    "name": "k_EMsgGCPingResponse",
                    "id": 3002
                },
                {
                    "name": "k_EMsgGCClientWelcome",
                    "id": 4004
                },
                {
                    "name": "k_EMsgGCServerWelcome",
                    "id": 4005
                },
                {
                    "name": "k_EMsgGCClientHello",
                    "id": 4006
                },
                {
                    "name": "k_EMsgGCServerHello",
                    "id": 4007
                },
                {
                    "name": "k_EMsgGCClientConnectionStatus",
                    "id": 4009
                },
                {
                    "name": "k_EMsgGCServerConnectionStatus",
                    "id": 4010
                }
            ]
        },
        {
            "name": "EGCToGCMsg",
            "values": [
                {
                    "name": "k_EGCToGCMsgMasterAck",
                    "id": 150
                },
                {
                    "name": "k_EGCToGCMsgMasterAckResponse",
                    "id": 151
                },
                {
                    "name": "k_EGCToGCMsgRouted",
                    "id": 152
                },
                {
                    "name": "k_EGCToGCMsgRoutedReply",
                    "id": 153
                },
                {
                    "name": "k_EMsgGCUpdateSubGCSessionInfo",
                    "id": 154
                },
                {
                    "name": "k_EMsgGCRequestSubGCSessionInfo",
                    "id": 155
                },
                {
                    "name": "k_EMsgGCRequestSubGCSessionInfoResponse",
                    "id": 156
                },
                {
                    "name": "k_EGCToGCMsgMasterStartupComplete",
                    "id": 157
                },
                {
                    "name": "k_EMsgGCToGCSOCacheSubscribe",
                    "id": 158
                },
                {
                    "name": "k_EMsgGCToGCSOCacheUnsubscribe",
                    "id": 159
                },
                {
                    "name": "k_EMsgGCToGCLoadSessionSOCache",
                    "id": 160
                },
                {
                    "name": "k_EMsgGCToGCLoadSessionSOCacheResponse",
                    "id": 161
                },
                {
                    "name": "k_EMsgGCToGCUpdateSessionStats",
                    "id": 162
                }
            ]
        },
        {
            "name": "ESteamDatagramMsgID",
            "values": [
                {
                    "name": "k_ESteamDatagramMsg_RouterPingRequest",
                    "id": 1
                },
                {
                    "name": "k_ESteamDatagramMsg_RouterPingReply",
                    "id": 2
                },
                {
                    "name": "k_ESteamDatagramMsg_GameserverPingRequest",
                    "id": 3
                },
                {
                    "name": "k_ESteamDatagramMsg_GameserverPingReply",
                    "id": 4
                },
                {
                    "name": "k_ESteamDatagramMsg_GameserverSessionRequest",
                    "id": 5
                },
                {
                    "name": "k_ESteamDatagramMsg_GameserverSessionEstablished",
                    "id": 6
                },
                {
                    "name": "k_ESteamDatagramMsg_NoSession",
                    "id": 7
                },
                {
                    "name": "k_ESteamDatagramMsg_Diagnostic",
                    "id": 8
                },
                {
                    "name": "k_ESteamDatagramMsg_DataClientToRouter",
                    "id": 9
                },
                {
                    "name": "k_ESteamDatagramMsg_DataRouterToServer",
                    "id": 10
                },
                {
                    "name": "k_ESteamDatagramMsg_DataServerToRouter",
                    "id": 11
                },
                {
                    "name": "k_ESteamDatagramMsg_DataRouterToClient",
                    "id": 12
                },
                {
                    "name": "k_ESteamDatagramMsg_Stats",
                    "id": 13
                },
                {
                    "name": "k_ESteamDatagramMsg_ClientPingSampleRequest",
                    "id": 14
                },
                {
                    "name": "k_ESteamDatagramMsg_ClientPingSampleReply",
                    "id": 15
                },
                {
                    "name": "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
                    "id": 16
                }
            ]
        },
        {
            "name": "EProtoExecutionSite",
            "values": [
                {
                    "name": "k_EProtoExecutionSiteUnknown",
                    "id": 0
                },
                {
                    "name": "k_EProtoExecutionSiteSteamClient",
                    "id": 3
                }
            ]
        },
        {
            "name": "ETEProtobufIds",
            "values": [
                {
                    "name": "TE_EffectDispatchId",
                    "id": 400
                },
                {
                    "name": "TE_ArmorRicochetId",
                    "id": 401
                },
                {
                    "name": "TE_BeamEntPointId",
                    "id": 402
                },
                {
                    "name": "TE_BeamEntsId",
                    "id": 403
                },
                {
                    "name": "TE_BeamPointsId",
                    "id": 404
                },
                {
                    "name": "TE_BeamRingId",
                    "id": 405
                },
                {
                    "name": "TE_BreakModelId",
                    "id": 406
                },
                {
                    "name": "TE_BSPDecalId",
                    "id": 407
                },
                {
                    "name": "TE_BubblesId",
                    "id": 408
                },
                {
                    "name": "TE_BubbleTrailId",
                    "id": 409
                },
                {
                    "name": "TE_DecalId",
                    "id": 410
                },
                {
                    "name": "TE_WorldDecalId",
                    "id": 411
                },
                {
                    "name": "TE_EnergySplashId",
                    "id": 412
                },
                {
                    "name": "TE_FizzId",
                    "id": 413
                },
                {
                    "name": "TE_ShatterSurfaceId",
                    "id": 414
                },
                {
                    "name": "TE_GlowSpriteId",
                    "id": 415
                },
                {
                    "name": "TE_ImpactId",
                    "id": 416
                },
                {
                    "name": "TE_MuzzleFlashId",
                    "id": 417
                },
                {
                    "name": "TE_BloodStreamId",
                    "id": 418
                },
                {
                    "name": "TE_ExplosionId",
                    "id": 419
                },
                {
                    "name": "TE_DustId",
                    "id": 420
                },
                {
                    "name": "TE_LargeFunnelId",
                    "id": 421
                },
                {
                    "name": "TE_SparksId",
                    "id": 422
                },
                {
                    "name": "TE_PhysicsPropId",
                    "id": 423
                },
                {
                    "name": "TE_PlayerDecalId",
                    "id": 424
                },
                {
                    "name": "TE_ProjectedDecalId",
                    "id": 425
                },
                {
                    "name": "TE_SmokeId",
                    "id": 426
                }
            ]
        },
        {
            "name": "EBaseUserMessages",
            "values": [
                {
                    "name": "UM_AchievementEvent",
                    "id": 101
                },
                {
                    "name": "UM_CloseCaption",
                    "id": 102
                },
                {
                    "name": "UM_CloseCaptionDirect",
                    "id": 103
                },
                {
                    "name": "UM_CurrentTimescale",
                    "id": 104
                },
                {
                    "name": "UM_DesiredTimescale",
                    "id": 105
                },
                {
                    "name": "UM_Fade",
                    "id": 106
                },
                {
                    "name": "UM_GameTitle",
                    "id": 107
                },
                {
                    "name": "UM_HintText",
                    "id": 109
                },
                {
                    "name": "UM_HudMsg",
                    "id": 110
                },
                {
                    "name": "UM_HudText",
                    "id": 111
                },
                {
                    "name": "UM_KeyHintText",
                    "id": 112
                },
                {
                    "name": "UM_ColoredText",
                    "id": 113
                },
                {
                    "name": "UM_RequestState",
                    "id": 114
                },
                {
                    "name": "UM_ResetHUD",
                    "id": 115
                },
                {
                    "name": "UM_Rumble",
                    "id": 116
                },
                {
                    "name": "UM_SayText",
                    "id": 117
                },
                {
                    "name": "UM_SayText2",
                    "id": 118
                },
                {
                    "name": "UM_SayTextChannel",
                    "id": 119
                },
                {
                    "name": "UM_Shake",
                    "id": 120
                },
                {
                    "name": "UM_ShakeDir",
                    "id": 121
                },
                {
                    "name": "UM_TextMsg",
                    "id": 124
                },
                {
                    "name": "UM_ScreenTilt",
                    "id": 125
                },
                {
                    "name": "UM_Train",
                    "id": 126
                },
                {
                    "name": "UM_VGUIMenu",
                    "id": 127
                },
                {
                    "name": "UM_VoiceMask",
                    "id": 128
                },
                {
                    "name": "UM_VoiceSubtitle",
                    "id": 129
                },
                {
                    "name": "UM_SendAudio",
                    "id": 130
                },
                {
                    "name": "UM_ItemPickup",
                    "id": 131
                },
                {
                    "name": "UM_AmmoDenied",
                    "id": 132
                },
                {
                    "name": "UM_CrosshairAngle",
                    "id": 133
                },
                {
                    "name": "UM_ShowMenu",
                    "id": 134
                },
                {
                    "name": "UM_CreditsMsg",
                    "id": 135
                },
                {
                    "name": "UM_CloseCaptionPlaceholder",
                    "id": 142
                },
                {
                    "name": "UM_CameraTransition",
                    "id": 143
                },
                {
                    "name": "UM_AudioParameter",
                    "id": 144
                },
                {
                    "name": "UM_ParticleManager",
                    "id": 145
                },
                {
                    "name": "UM_HudError",
                    "id": 146
                },
                {
                    "name": "UM_CustomGameEvent_ClientToServer",
                    "id": 147
                },
                {
                    "name": "UM_CustomGameEvent_ServerToClient",
                    "id": 148
                },
                {
                    "name": "UM_TrackedControllerInput_ClientToServer",
                    "id": 149
                },
                {
                    "name": "UM_MAX_BASE",
                    "id": 200
                }
            ]
        },
        {
            "name": "EBaseEntityMessages",
            "values": [
                {
                    "name": "EM_PlayJingle",
                    "id": 136
                },
                {
                    "name": "EM_ScreenOverlay",
                    "id": 137
                },
                {
                    "name": "EM_RemoveAllDecals",
                    "id": 138
                },
                {
                    "name": "EM_PropagateForce",
                    "id": 139
                },
                {
                    "name": "EM_DoSpark",
                    "id": 140
                },
                {
                    "name": "EM_FixAngle",
                    "id": 141
                }
            ]
        },
        {
            "name": "eRollType",
            "values": [
                {
                    "name": "ROLL_NONE",
                    "id": -1
                },
                {
                    "name": "ROLL_STATS",
                    "id": 0
                },
                {
                    "name": "ROLL_CREDITS",
                    "id": 1
                },
                {
                    "name": "ROLL_LATE_JOIN_LOGO",
                    "id": 2
                },
                {
                    "name": "ROLL_OUTTRO",
                    "id": 3
                }
            ]
        },
        {
            "name": "PARTICLE_MESSAGE",
            "values": [
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_CREATE",
                    "id": 0
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE",
                    "id": 1
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD",
                    "id": 2
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION",
                    "id": 3
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK",
                    "id": 4
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT",
                    "id": 5
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET",
                    "id": 6
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_DESTROY",
                    "id": 7
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING",
                    "id": 8
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_RELEASE",
                    "id": 9
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_LATENCY",
                    "id": 10
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW",
                    "id": 11
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_FROZEN",
                    "id": 12
                },
                {
                    "name": "GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT",
                    "id": 13
                }
            ]
        }
    ],
    "services": [
        {
            "name": "Cloud",
            "options": {
                "(service_description)": "A service for Steam Cloud operations."
            },
            "rpc": {
                "GetUploadServerInfo": {
                    "request": "CCloud_GetUploadServerInfo_Request",
                    "response": "CCloud_GetUploadServerInfo_Response",
                    "options": {
                        "(method_description)": "Returns the URL of the proper cloud server for a user."
                    }
                },
                "GetFileDetails": {
                    "request": "CCloud_GetFileDetails_Request",
                    "response": "CCloud_GetFileDetails_Response",
                    "options": {
                        "(method_description)": "Returns details on a Cloud file."
                    }
                },
                "EnumerateUserFiles": {
                    "request": "CCloud_EnumerateUserFiles_Request",
                    "response": "CCloud_EnumerateUserFiles_Response",
                    "options": {
                        "(method_description)": "Enumerates Cloud files for a user of a given app ID. Returns up to 500 files at a time."
                    }
                },
                "Delete": {
                    "request": "CCloud_Delete_Request",
                    "response": "CCloud_Delete_Response",
                    "options": {
                        "(method_description)": "Deletes a file from the user's cloud."
                    }
                }
            }
        },
        {
            "name": "OAuthToken",
            "options": {
                "(service_description)": "Service containing methods to manage OAuth tokens"
            },
            "rpc": {
                "ImplicitGrantNoPrompt": {
                    "request": "COAuthToken_ImplicitGrantNoPrompt_Request",
                    "response": "COAuthToken_ImplicitGrantNoPrompt_Response",
                    "options": {
                        "(method_description)": "Grants an implicit OAuth token (grant type 'token') for the specified client ID on behalf of a user without prompting"
                    }
                }
            }
        }
    ]
}
},{}],4:[function(require,module,exports){
module.exports={
  "packets": {
    "0": "CNETMsg_NOP",
    "1": "CNETMsg_Disconnect",
    "3": "CNETMsg_SplitScreenUser",
    "4": "CNETMsg_Tick",
    "5": "CNETMsg_StringCmd",
    "6": "CNETMsg_SetConVar",
    "7": "CNETMsg_SignonState",
    "8": "CNETMsg_SpawnGroup_Load",
    "9": "CNETMsg_SpawnGroup_ManifestUpdate",
    "11": "CNETMsg_SpawnGroup_SetCreationTick",
    "12": "CNETMsg_SpawnGroup_Unload",
    "13": "CNETMsg_SpawnGroup_LoadCompleted",
    "40": "CSVCMsg_ServerInfo",
    "41": "CSVCMsg_FlattenedSerializer",
    "42": "CSVCMsg_ClassInfo",
    "43": "CSVCMsg_SetPause",
    "44": "CSVCMsg_CreateStringTable",
    "45": "CSVCMsg_UpdateStringTable",
    "46": "CSVCMsg_VoiceInit",
    "47": "CSVCMsg_VoiceData",
    "48": "CSVCMsg_Print",
    "49": "CSVCMsg_Sounds",
    "50": "CSVCMsg_SetView",
    "51": "CSVCMsg_ClearAllStringTables",
    "52": "CSVCMsg_CmdKeyValues",
    "53": "CSVCMsg_BSPDecal",
    "54": "CSVCMsg_SplitScreen",
    "55": "CSVCMsg_PacketEntities",
    "56": "CSVCMsg_Prefetch",
    "57": "CSVCMsg_Menu",
    "58": "CSVCMsg_GetCvarValue",
    "59": "CSVCMsg_StopSound",
    "60": "CSVCMsg_PeerList",
    "61": "CSVCMsg_PacketReliable",
    "62": "CSVCMsg_UserMessage",
    "63": "CSVCMsg_SendTable",
    "67": "CSVCMsg_GameEvent",
    "68": "CSVCMsg_TempEntities",
    "69": "CSVCMsg_GameEventList",
    "70": "CSVCMsg_FullFrameSplit",
    "101": "CUserMessageAchievementEvent",
    "102": "CUserMessageCloseCaption",
    "103": "CUserMessageCloseCaptionDirect",
    "104": "CUserMessageCurrentTimescale",
    "105": "CUserMessageDesiredTimescale",
    "106": "CUserMessageFade",
    "107": "CUserMessageGameTitle",
    "109": "CUserMessageHintText",
    "110": "CUserMessageHudMsg",
    "111": "CUserMessageHudText",
    "112": "CUserMessageKeyHintText",
    "113": "CUserMessageColoredText",
    "114": "CUserMessageRequestState",
    "115": "CUserMessageResetHUD",
    "116": "CUserMessageRumble",
    "117": "CUserMessageSayText",
    "118": "CUserMessageSayText2",
    "119": "CUserMessageSayTextChannel",
    "120": "CUserMessageShake",
    "121": "CUserMessageShakeDir",
    "124": "CUserMessageTextMsg",
    "125": "CUserMessageScreenTilt",
    "126": "CUserMessageTrain",
    "127": "CUserMessageVGUIMenu",
    "128": "CUserMessageVoiceMask",
    "129": "CUserMessageVoiceSubtitle",
    "130": "CUserMessageSendAudio",
    "131": "CUserMessageItemPickup",
    "132": "CUserMessageAmmoDenied",
    "133": "CUserMessageCrosshairAngle",
    "134": "CUserMessageShowMenu",
    "135": "CUserMessageCreditsMsg",
    "136": "CEntityMessagePlayJingle",
    "137": "CEntityMessageScreenOverlay",
    "138": "CEntityMessageRemoveAllDecals",
    "139": "CEntityMessagePropagateForce",
    "140": "CEntityMessageDoSpark",
    "141": "CEntityMessageFixAngle",
    "142": "CUserMessageCloseCaptionPlaceholder",
    "143": "CUserMessageCameraTransition",
    "144": "CUserMessageAudioParameter",
    "145": "CUserMessageParticleManager",
    "146": "CUserMessageHudError",
    "147": "CUserMessageCustomGameEvent_ClientToServer",
    "148": "CUserMessageCustomGameEvent_ServerToClient",
    "149": "CUserMessageTrackedControllerInput_ClientToServer",
    "200": "CMsgVDebugGameSessionIDEvent",
    "201": "CMsgPlaceDecalEvent",
    "202": "CMsgClearWorldDecalsEvent",
    "203": "CMsgClearEntityDecalsEvent",
    "204": "CMsgClearDecalsForSkeletonInstanceEvent",
    "205": "CMsgSource1LegacyGameEventList",
    "206": "CMsgSource1LegacyListenEvents",
    "207": "CMsgSource1LegacyGameEvent",
    "208": "CMsgSosStartSoundEvent",
    "209": "CMsgSosStopSoundEvent",
    "210": "CMsgSosSetSoundEventParams",
    "211": "CMsgSosSetLibraryStackFields",
    "212": "CMsgSosStopSoundEventHash",
    "464": "CDOTAUserMsg_AddUnitToSelection",
    "465": "CDOTAUserMsg_AIDebugLine",
    "466": "CDOTAUserMsg_ChatEvent",
    "467": "CDOTAUserMsg_CombatHeroPositions",
    "468": "CDOTAUserMsg_CombatLogData",
    "470": "CDOTAUserMsg_CombatLogShowDeath",
    "471": "CDOTAUserMsg_CreateLinearProjectile",
    "472": "CDOTAUserMsg_DestroyLinearProjectile",
    "473": "CDOTAUserMsg_DodgeTrackingProjectiles",
    "474": "CDOTAUserMsg_GlobalLightColor",
    "475": "CDOTAUserMsg_GlobalLightDirection",
    "476": "CDOTAUserMsg_InvalidCommand",
    "477": "CDOTAUserMsg_LocationPing",
    "478": "CDOTAUserMsg_MapLine",
    "479": "CDOTAUserMsg_MiniKillCamInfo",
    "480": "CDOTAUserMsg_MinimapDebugPoint",
    "481": "CDOTAUserMsg_MinimapEvent",
    "482": "CDOTAUserMsg_NevermoreRequiem",
    "483": "CDOTAUserMsg_OverheadEvent",
    "484": "CDOTAUserMsg_SetNextAutobuyItem",
    "485": "CDOTAUserMsg_SharedCooldown",
    "486": "CDOTAUserMsg_SpectatorPlayerClick",
    "487": "CDOTAUserMsg_TutorialTipInfo",
    "488": "CDOTAUserMsg_UnitEvent",
    "489": "CDOTAUserMsg_ParticleManager",
    "490": "CDOTAUserMsg_BotChat",
    "491": "CDOTAUserMsg_HudError",
    "492": "CDOTAUserMsg_ItemPurchased",
    "493": "CDOTAUserMsg_Ping",
    "494": "CDOTAUserMsg_ItemFound",
    "495": "CDOTAUserMsg_CharacterSpeakConcept",
    "496": "CDOTAUserMsg_SwapVerify",
    "497": "CDOTAUserMsg_WorldLine",
    "498": "CDOTAUserMsg_TournamentDrop",
    "499": "CDOTAUserMsg_ItemAlert",
    "500": "CDOTAUserMsg_HalloweenDrops",
    "501": "CDOTAUserMsg_ChatWheel",
    "502": "CDOTAUserMsg_ReceivedXmasGift",
    "503": "CDOTAUserMsg_UpdateSharedContent",
    "504": "CDOTAUserMsg_TutorialRequestExp",
    "505": "CDOTAUserMsg_TutorialPingMinimap",
    "506": "CDOTAUserMsg_GamerulesStateChanged",
    "507": "CDOTAUserMsg_ShowSurvey",
    "508": "CDOTAUserMsg_TutorialFade",
    "509": "CDOTAUserMsg_AddQuestLogEntry",
    "510": "CDOTAUserMsg_SendStatPopup",
    "511": "CDOTAUserMsg_TutorialFinish",
    "512": "CDOTAUserMsg_SendRoshanPopup",
    "513": "CDOTAUserMsg_SendGenericToolTip",
    "514": "CDOTAUserMsg_SendFinalGold",
    "515": "CDOTAUserMsg_CustomMsg",
    "516": "CDOTAUserMsg_CoachHUDPing",
    "517": "CDOTAUserMsg_ClientLoadGridNav",
    "518": "CDOTAUserMsg_TE_Projectile",
    "519": "CDOTAUserMsg_TE_ProjectileLoc",
    "520": "CDOTAUserMsg_TE_DotaBloodImpact",
    "521": "CDOTAUserMsg_TE_UnitAnimation",
    "522": "CDOTAUserMsg_TE_UnitAnimationEnd",
    "523": "CDOTAUserMsg_AbilityPing",
    "524": "CDOTAUserMsg_ShowGenericPopup",
    "525": "CDOTAUserMsg_VoteStart",
    "526": "CDOTAUserMsg_VoteUpdate",
    "527": "CDOTAUserMsg_VoteEnd",
    "528": "CDOTAUserMsg_BoosterState",
    "529": "CDOTAUserMsg_WillPurchaseAlert",
    "530": "CDOTAUserMsg_TutorialMinimapPosition",
    "531": "CDOTAUserMsg_PlayerMMR",
    "532": "CDOTAUserMsg_AbilitySteal",
    "533": "CDOTAUserMsg_CourierKilledAlert",
    "534": "CDOTAUserMsg_EnemyItemAlert",
    "535": "CDOTAUserMsg_StatsMatchDetails",
    "536": "CDOTAUserMsg_MiniTaunt",
    "537": "CDOTAUserMsg_BuyBackStateAlert",
    "538": "CDOTAUserMsg_SpeechBubble",
    "539": "CDOTAUserMsg_CustomHeaderMessage",
    "540": "CDOTAUserMsg_QuickBuyAlert",
    "541": "CDOTAUserMsg_StatsHeroDetails",
    "542": "CDOTAUserMsg_PredictionResult",
    "543": "CDOTAUserMsg_ModifierAlert",
    "544": "CDOTAUserMsg_HPManaAlert",
    "545": "CDOTAUserMsg_GlyphAlert",
    "546": "CDOTAUserMsg_BeastChat",
    "547": "CDOTAUserMsg_SpectatorPlayerUnitOrders",
    "548": "CDOTAUserMsg_CustomHudElement_Create",
    "549": "CDOTAUserMsg_CustomHudElement_Modify",
    "550": "CDOTAUserMsg_CustomHudElement_Destroy",
    "551": "CDOTAUserMsg_CompendiumState",
    "552": "CDOTAUserMsg_ProjectionAbility"
  },
  "dems": {
    "0": "CDemoStop",
    "1": "CDemoFileHeader",
    "2": "CDemoFileInfo",
    "3": "CDemoSyncTick",
    "4": "CDemoSendTables",
    "5": "CDemoClassInfo",
    "6": "CDemoStringTables",
    "7": "CDemoPacket",
    "8": "CDemoSignonPacket",
    "9": "CDemoConsoleCmd",
    "10": "CDemoCustomData",
    "11": "CDemoCustomDataCallbacks",
    "12": "CDemoUserCmd",
    "13": "CDemoFullPacket",
    "14": "CDemoSaveGame",
    "15": "CDemoSpawnGroups",
    "16": "CDemoMax",
    "64": "CDemoIsCompressed",
    "-1": "CDemoError"
  },
  "DOTA_CHAT_MESSAGE": {
    "0": "CHAT_MESSAGE_HERO_KILL",
    "1": "CHAT_MESSAGE_HERO_DENY",
    "2": "CHAT_MESSAGE_BARRACKS_KILL",
    "3": "CHAT_MESSAGE_TOWER_KILL",
    "4": "CHAT_MESSAGE_TOWER_DENY",
    "5": "CHAT_MESSAGE_FIRSTBLOOD",
    "6": "CHAT_MESSAGE_STREAK_KILL",
    "7": "CHAT_MESSAGE_BUYBACK",
    "8": "CHAT_MESSAGE_AEGIS",
    "9": "CHAT_MESSAGE_ROSHAN_KILL",
    "10": "CHAT_MESSAGE_COURIER_LOST",
    "11": "CHAT_MESSAGE_COURIER_RESPAWNED",
    "12": "CHAT_MESSAGE_GLYPH_USED",
    "13": "CHAT_MESSAGE_ITEM_PURCHASE",
    "14": "CHAT_MESSAGE_CONNECT",
    "15": "CHAT_MESSAGE_DISCONNECT",
    "16": "CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT",
    "17": "CHAT_MESSAGE_DISCONNECT_TIME_REMAINING",
    "18": "CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL",
    "19": "CHAT_MESSAGE_RECONNECT",
    "20": "CHAT_MESSAGE_PLAYER_LEFT",
    "21": "CHAT_MESSAGE_SAFE_TO_LEAVE",
    "22": "CHAT_MESSAGE_RUNE_PICKUP",
    "23": "CHAT_MESSAGE_RUNE_BOTTLE",
    "24": "CHAT_MESSAGE_INTHEBAG",
    "25": "CHAT_MESSAGE_SECRETSHOP",
    "26": "CHAT_MESSAGE_ITEM_AUTOPURCHASED",
    "27": "CHAT_MESSAGE_ITEMS_COMBINED",
    "28": "CHAT_MESSAGE_SUPER_CREEPS",
    "29": "CHAT_MESSAGE_CANT_USE_ACTION_ITEM",
    "30": "CHAT_MESSAGE_CHARGES_EXHAUSTED",
    "31": "CHAT_MESSAGE_CANTPAUSE",
    "32": "CHAT_MESSAGE_NOPAUSESLEFT",
    "33": "CHAT_MESSAGE_CANTPAUSEYET",
    "34": "CHAT_MESSAGE_PAUSED",
    "35": "CHAT_MESSAGE_UNPAUSE_COUNTDOWN",
    "36": "CHAT_MESSAGE_UNPAUSED",
    "37": "CHAT_MESSAGE_AUTO_UNPAUSED",
    "38": "CHAT_MESSAGE_YOUPAUSED",
    "39": "CHAT_MESSAGE_CANTUNPAUSETEAM",
    "41": "CHAT_MESSAGE_VOICE_TEXT_BANNED",
    "42": "CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME",
    "43": "CHAT_MESSAGE_REPORT_REMINDER",
    "44": "CHAT_MESSAGE_ECON_ITEM",
    "45": "CHAT_MESSAGE_TAUNT",
    "46": "CHAT_MESSAGE_RANDOM",
    "47": "CHAT_MESSAGE_RD_TURN",
    "49": "CHAT_MESSAGE_DROP_RATE_BONUS",
    "50": "CHAT_MESSAGE_NO_BATTLE_POINTS",
    "51": "CHAT_MESSAGE_DENIED_AEGIS",
    "52": "CHAT_MESSAGE_INFORMATIONAL",
    "53": "CHAT_MESSAGE_AEGIS_STOLEN",
    "54": "CHAT_MESSAGE_ROSHAN_CANDY",
    "55": "CHAT_MESSAGE_ITEM_GIFTED",
    "56": "CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL",
    "57": "CHAT_MESSAGE_HOLDOUT_TOWER_DESTROYED",
    "58": "CHAT_MESSAGE_HOLDOUT_WALL_DESTROYED",
    "59": "CHAT_MESSAGE_HOLDOUT_WALL_FINISHED",
    "62": "CHAT_MESSAGE_PLAYER_LEFT_LIMITED_HERO",
    "63": "CHAT_MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION",
    "64": "CHAT_MESSAGE_DISCONNECT_LIMITED_HERO",
    "65": "CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_EXPLANATION",
    "66": "CHAT_MESSAGE_RECRUITMENT_DROP_RATE_BONUS",
    "67": "CHAT_MESSAGE_FROSTIVUS_SHINING_BOOSTER_ACTIVE",
    "73": "CHAT_MESSAGE_PLAYER_LEFT_AFK",
    "74": "CHAT_MESSAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG",
    "75": "CHAT_MESSAGE_PLAYER_ABANDONED",
    "76": "CHAT_MESSAGE_PLAYER_ABANDONED_AFK",
    "77": "CHAT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_LONG",
    "78": "CHAT_MESSAGE_WILL_NOT_BE_SCORED",
    "79": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_RANKED",
    "80": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK",
    "81": "CHAT_MESSAGE_WILL_NOT_BE_SCORED_NETWORK_RANKED",
    "82": "CHAT_MESSAGE_CAN_QUIT_WITHOUT_ABANDON",
    "83": "CHAT_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET_LOSS",
    "84": "CHAT_MESSAGE_ABANDON_RANKED_BEFORE_FIRST_BLOOD_PARTY",
    "85": "CHAT_MESSAGE_COMPENDIUM_LEVEL",
    "86": "CHAT_MESSAGE_VICTORY_PREDICTION_STREAK",
    "87": "CHAT_MESSAGE_ASSASSIN_ANNOUNCE",
    "88": "CHAT_MESSAGE_ASSASSIN_SUCCESS",
    "89": "CHAT_MESSAGE_ASSASSIN_DENIED",
    "90": "CHAT_MESSAGE_VICTORY_PREDICTION_SINGLE_USER_CONFIRM",
    "91": "CHAT_MESSAGE_EFFIGY_KILL",
    "92": "CHAT_MESSAGE_VOICE_TEXT_BANNED_OVERFLOW",
    "93": "CHAT_MESSAGE_YEAR_BEAST_KILLED",
    "94": "CHAT_MESSAGE_PAUSE_COUNTDOWN",
    "-1": "CHAT_MESSAGE_INVALID"
  },
  "DOTA_COMBATLOG_TYPES": {
    "0": "DOTA_COMBATLOG_DAMAGE",
    "1": "DOTA_COMBATLOG_HEAL",
    "2": "DOTA_COMBATLOG_MODIFIER_ADD",
    "3": "DOTA_COMBATLOG_MODIFIER_REMOVE",
    "4": "DOTA_COMBATLOG_DEATH",
    "5": "DOTA_COMBATLOG_ABILITY",
    "6": "DOTA_COMBATLOG_ITEM",
    "7": "DOTA_COMBATLOG_LOCATION",
    "8": "DOTA_COMBATLOG_GOLD",
    "9": "DOTA_COMBATLOG_GAME_STATE",
    "10": "DOTA_COMBATLOG_XP",
    "11": "DOTA_COMBATLOG_PURCHASE",
    "12": "DOTA_COMBATLOG_BUYBACK",
    "13": "DOTA_COMBATLOG_ABILITY_TRIGGER",
    "14": "DOTA_COMBATLOG_PLAYERSTATS",
    "15": "DOTA_COMBATLOG_MULTIKILL",
    "16": "DOTA_COMBATLOG_KILLSTREAK",
    "17": "DOTA_COMBATLOG_TEAM_BUILDING_KILL",
    "18": "DOTA_COMBATLOG_FIRST_BLOOD",
    "19": "DOTA_COMBATLOG_MODIFIER_REFRESH"
  }
}
},{}],5:[function(require,module,exports){
(function (process,global){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () {

    var async = {};
    function noop() {}
    function identity(v) {
        return v;
    }
    function toBool(v) {
        return !!v;
    }
    function notId(v) {
        return !v;
    }

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global ||
            this;

    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        return function() {
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        };
    }

    function _once(fn) {
        return function() {
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        };
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    // Ported from underscore.js isObject
    var _isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    function _isArrayLike(arr) {
        return _isArray(arr) || (
            // has a positive integer length property
            typeof arr.length === "number" &&
            arr.length >= 0 &&
            arr.length % 1 === 0
        );
    }

    function _each(coll, iterator) {
        return _isArrayLike(coll) ?
            _arrayEach(coll, iterator) :
            _forEachOf(coll, iterator);
    }

    function _arrayEach(arr, iterator) {
        var index = -1,
            length = arr.length;

        while (++index < length) {
            iterator(arr[index], index, arr);
        }
    }

    function _map(arr, iterator) {
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iterator(arr[index], index, arr);
        }
        return result;
    }

    function _range(count) {
        return _map(Array(count), function (v, i) { return i; });
    }

    function _reduce(arr, iterator, memo) {
        _arrayEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    }

    function _forEachOf(object, iterator) {
        _arrayEach(_keys(object), function (key) {
            iterator(object[key], key);
        });
    }

    function _indexOf(arr, item) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === item) return i;
        }
        return -1;
    }

    var _keys = Object.keys || function (obj) {
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    function _keyIterator(coll) {
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) {
            len = coll.length;
            return function next() {
                i++;
                return i < len ? i : null;
            };
        } else {
            keys = _keys(coll);
            len = keys.length;
            return function next() {
                i++;
                return i < len ? keys[i] : null;
            };
        }
    }

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) {
                rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
                case 0: return func.call(this, rest);
                case 1: return func.call(this, arguments[0], rest);
            }
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) {
            //     args[index] = arguments[index];
            // }
            // args[startIndex] = rest;
            // return func.apply(this, args);
        };
    }

    function _withoutIndex(iterator) {
        return function (value, index, callback) {
            return iterator(value, callback);
        };
    }

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function(fn) {
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    } : function(fn) {
        setTimeout(fn, 0);
    };

    if (typeof process === 'object' && typeof process.nextTick === 'function') {
        async.nextTick = process.nextTick;
    } else {
        async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;


    async.forEach =
    async.each = function (arr, iterator, callback) {
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    };

    async.forEachSeries =
    async.eachSeries = function (arr, iterator, callback) {
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };


    async.forEachLimit =
    async.eachLimit = function (arr, limit, iterator, callback) {
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };

    async.forEachOf =
    async.eachOf = function (object, iterator, callback) {
        callback = _once(callback || noop);
        object = object || [];
        var size = _isArrayLike(object) ? object.length : _keys(object).length;
        var completed = 0;
        if (!size) {
            return callback(null);
        }
        _each(object, function (value, key) {
            iterator(object[key], key, only_once(done));
        });
        function done(err) {
            if (err) {
                callback(err);
            }
            else {
                completed += 1;
                if (completed >= size) {
                    callback(null);
                }
            }
        }
    };

    async.forEachOfSeries =
    async.eachOfSeries = function (obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() {
            var sync = true;
            if (key === null) {
                return callback(null);
            }
            iterator(obj[key], key, only_once(function (err) {
                if (err) {
                    callback(err);
                }
                else {
                    key = nextKey();
                    if (key === null) {
                        return callback(null);
                    } else {
                        if (sync) {
                            async.nextTick(iterate);
                        } else {
                            iterate();
                        }
                    }
                }
            }));
            sync = false;
        }
        iterate();
    };



    async.forEachOfLimit =
    async.eachOfLimit = function (obj, limit, iterator, callback) {
        _eachOfLimit(limit)(obj, iterator, callback);
    };

    function _eachOfLimit(limit) {

        return function (obj, iterator, callback) {
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) {
                return callback(null);
            }
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish () {
                if (done && running <= 0) {
                    return callback(null);
                }

                while (running < limit && !errored) {
                    var key = nextKey();
                    if (key === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) {
                        running -= 1;
                        if (err) {
                            callback(err);
                            errored = true;
                        }
                        else {
                            replenish();
                        }
                    }));
                }
            })();
        };
    }


    function doParallel(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOf, obj, iterator, callback);
        };
    }
    function doParallelLimit(fn) {
        return function (obj, limit, iterator, callback) {
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        };
    }
    function doSeries(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOfSeries, obj, iterator, callback);
        };
    }

    function _asyncMap(eachfn, arr, iterator, callback) {
        callback = _once(callback || noop);
        var results = [];
        eachfn(arr, function (value, index, callback) {
            iterator(value, function (err, v) {
                results[index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    }

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject =
    async.foldl =
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachOfSeries(arr, function (x, i, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err || null, memo);
        });
    };

    async.foldr =
    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };

    function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        eachfn(arr, function (x, index, callback) {
            iterator(x, function (v) {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            });
        }, function () {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    }

    async.select =
    async.filter = doParallel(_filter);

    async.selectLimit =
    async.filterLimit = doParallelLimit(_filter);

    async.selectSeries =
    async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) {
        _filter(eachfn, arr, function(value, cb) {
            iterator(value, function(v) {
                cb(!v);
            });
        }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) {
        return function(arr, limit, iterator, cb) {
            function done() {
                if (cb) cb(getResult(false, void 0));
            }
            function iteratee(x, _, callback) {
                if (!cb) return callback();
                iterator(x, function (v) {
                    if (cb && check(v)) {
                        cb(getResult(true, x));
                        cb = iterator = false;
                    }
                    callback();
                });
            }
            if (arguments.length > 3) {
                eachfn(arr, limit, iteratee, done);
            } else {
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            }
        };
    }

    async.any =
    async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all =
    async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) {
        return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                callback(null, _map(results.sort(comparator), function (x) {
                    return x.value;
                }));
            }

        });

        function comparator(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    };

    async.auto = function (tasks, callback) {
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        function addListener(fn) {
            listeners.unshift(fn);
        }
        function removeListener(fn) {
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        }
        function taskComplete() {
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) {
                fn();
            });
        }

        addListener(function () {
            if (!remainingTasks) {
                callback(null, results);
            }
        });

        _arrayEach(keys, function (k) {
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = _restParam(function(err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _forEachOf(results, function(val, rkey) {
                        safeResults[rkey] = val;
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            });
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) {
                if (!(dep = tasks[requires[len]])) {
                    throw new Error('Has inexistant dependency');
                }
                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                    throw new Error('Has cyclic dependencies');
                }
            }
            function ready() {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            }
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                addListener(listener);
            }
            function listener() {
                if (ready()) {
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                }
            }
        });
    };



    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = {
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        };

        function parseTimes(acc, t){
            if(typeof t === 'number'){
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            } else if(typeof t === 'object'){
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            } else {
                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
            }
        }

        var length = arguments.length;
        if (length < 1 || length > 3) {
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        } else if (length <= 2 && typeof times === 'function') {
            callback = task;
            task = times;
        }
        if (typeof times !== 'function') {
            parseTimes(opts, times);
        }
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) {
            function retryAttempt(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            }

            function retryInterval(interval){
                return function(seriesCallback){
                    setTimeout(function(){
                        seriesCallback(null);
                    }, interval);
                };
            }

            while (opts.times) {

                var finalAttempt = !(opts.times-=1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if(!finalAttempt && opts.interval > 0){
                    attempts.push(retryInterval(opts.interval));
                }
            }

            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            });
        }

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    };

    async.waterfall = function (tasks, callback) {
        callback = _once(callback || noop);
        if (!_isArray(tasks)) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        function wrapIterator(iterator) {
            return _restParam(function (err, args) {
                if (err) {
                    callback.apply(null, [err].concat(args));
                }
                else {
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    ensureAsync(iterator).apply(null, args);
                }
            });
        }
        wrapIterator(async.iterator(tasks))();
    };

    function _parallel(eachfn, tasks, callback) {
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : {};

        eachfn(tasks, function (task, key, callback) {
            task(_restParam(function (err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                results[key] = args;
                callback(err);
            }));
        }, function (err) {
            callback(err, results);
        });
    }

    async.parallel = function (tasks, callback) {
        _parallel(async.eachOf, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel(_eachOfLimit(limit), tasks, callback);
    };

    async.series = function(tasks, callback) {
        _parallel(async.eachOfSeries, tasks, callback);
    };

    async.iterator = function (tasks) {
        function makeCallback(index) {
            function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            }
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        }
        return makeCallback(0);
    };

    async.apply = _restParam(function (fn, args) {
        return _restParam(function (callArgs) {
            return fn.apply(
                null, args.concat(callArgs)
            );
        });
    });

    function _concat(eachfn, arr, fn, callback) {
        var result = [];
        eachfn(arr, function (x, index, cb) {
            fn(x, function (err, y) {
                result = result.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, result);
        });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        callback = callback || noop;
        if (test()) {
            var next = _restParam(function(err, args) {
                if (err) {
                    callback(err);
                } else if (test.apply(this, args)) {
                    iterator(next);
                } else {
                    callback(null);
                }
            });
            iterator(next);
        } else {
            callback(null);
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var calls = 0;
        return async.whilst(function() {
            return ++calls <= 1 || test.apply(this, arguments);
        }, iterator, callback);
    };

    async.until = function (test, iterator, callback) {
        return async.whilst(function() {
            return !test.apply(this, arguments);
        }, iterator, callback);
    };

    async.doUntil = function (iterator, test, callback) {
        return async.doWhilst(iterator, function() {
            return !test.apply(this, arguments);
        }, callback);
    };

    async.during = function (test, iterator, callback) {
        callback = callback || noop;

        var next = _restParam(function(err, args) {
            if (err) {
                callback(err);
            } else {
                args.push(check);
                test.apply(this, args);
            }
        });

        var check = function(err, truth) {
            if (err) {
                callback(err);
            } else if (truth) {
                iterator(next);
            } else {
                callback(null);
            }
        };

        test(check);
    };

    async.doDuring = function (iterator, test, callback) {
        var calls = 0;
        async.during(function(next) {
            if (calls++ < 1) {
                next(null, true);
            } else {
                test.apply(this, arguments);
            }
        }, iterator, callback);
    };

    function _queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        }
        else if(concurrency === 0) {
            throw new Error('Concurrency must not be zero');
        }
        function _insert(q, data, pos, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    callback: callback || noop
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
            });
            async.setImmediate(q.process);
        }
        function _next(q, tasks) {
            return function(){
                workers -= 1;
                var args = arguments;
                _arrayEach(tasks, function (task) {
                    task.callback.apply(task, args);
                });
                if (q.tasks.length + workers === 0) {
                    q.drain();
                }
                q.process();
            };
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function (data, callback) {
                _insert(q, data, false, callback);
            },
            kill: function () {
                q.drain = noop;
                q.tasks = [];
            },
            unshift: function (data, callback) {
                _insert(q, data, true, callback);
            },
            process: function () {
                if (!q.paused && workers < q.concurrency && q.tasks.length) {
                    while(workers < q.concurrency && q.tasks.length){
                        var tasks = q.payload ?
                            q.tasks.splice(0, q.payload) :
                            q.tasks.splice(0, q.tasks.length);

                        var data = _map(tasks, function (task) {
                            return task.data;
                        });

                        if (q.tasks.length === 0) {
                            q.empty();
                        }
                        workers += 1;
                        var cb = only_once(_next(q, tasks));
                        worker(data, cb);
                    }
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                q.paused = true;
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    }

    async.queue = function (worker, concurrency) {
        var q = _queue(function (items, cb) {
            worker(items[0], cb);
        }, concurrency, 1);

        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b){
            return a.priority - b.priority;
        }

        function _binarySearch(sequence, item, compare) {
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) {
                var mid = beg + ((end - beg + 1) >>> 1);
                if (compare(item, sequence[mid]) >= 0) {
                    beg = mid;
                } else {
                    end = mid - 1;
                }
            }
            return beg;
        }

        function _insert(q, data, priority, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                };

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
            _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        return _queue(worker, 1, payload);
    };

    function _console_fn(name) {
        return _restParam(function (fn, args) {
            fn.apply(null, args.concat([_restParam(function (err, args) {
                if (typeof console === 'object') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _arrayEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            })]));
        });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) {
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                async.nextTick(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) {
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, args);
                    }
                })]));
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    function _times(mapper) {
        return function (count, iterator, callback) {
            mapper(_range(count), iterator, callback);
        };
    }

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) {
        return async.mapLimit(_range(count), limit, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return _restParam(function (args) {
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') {
                args.pop();
            } else {
                callback = noop;
            }

            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                    cb(err, nextargs);
                })]));
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        });
    };

    async.compose = function (/* functions... */) {
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };


    function _applyEach(eachfn) {
        return _restParam(function(fns, args) {
            var go = _restParam(function(args) {
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) {
                    fn.apply(that, args.concat([cb]));
                },
                callback);
            });
            if (args.length) {
                return go.apply(this, args);
            }
            else {
                return go;
            }
        });
    }

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);


    async.forever = function (fn, callback) {
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) {
            if (err) {
                return done(err);
            }
            task(next);
        }
        next();
    };

    function ensureAsync(fn) {
        return _restParam(function (args) {
            var callback = args.pop();
            args.push(function () {
                var innerArgs = arguments;
                if (sync) {
                    async.setImmediate(function () {
                        callback.apply(null, innerArgs);
                    });
                } else {
                    callback.apply(null, innerArgs);
                }
            });
            var sync = true;
            fn.apply(this, args);
            sync = false;
        });
    }

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function(values) {
        var args = [null].concat(values);
        return function (callback) {
            return callback.apply(this, args);
        };
    });

    async.wrapSync =
    async.asyncify = function asyncify(func) {
        return _restParam(function (args) {
            var callback = args.pop();
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") {
                result.then(function(value) {
                    callback(null, value);
                })["catch"](function(err) {
                    callback(err.message ? err : new Error(err));
                });
            } else {
                callback(null, result);
            }
        });
    };

    // Node.js
    if (typeof module === 'object' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":12}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],9:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],10:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],11:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":12}],12:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],13:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":14}],14:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":16,"./_stream_writable":18,"core-util-is":19,"inherits":9,"process-nextick-args":20}],15:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":17,"core-util-is":19,"inherits":9}],16:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":14,"_process":12,"buffer":28,"core-util-is":19,"events":8,"inherits":9,"isarray":10,"process-nextick-args":20,"string_decoder/":27,"util":7}],17:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":14,"core-util-is":19,"inherits":9}],18:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: require('util-deprecate')(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use ' +
      '_writableState.getBuffer() instead.')
});
}catch(_){}}());


function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":14,"buffer":28,"core-util-is":19,"events":8,"inherits":9,"process-nextick-args":20,"util-deprecate":21}],19:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":28}],20:[function(require,module,exports){
(function (process){
'use strict';
module.exports = nextTick;

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < arguments.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":12}],21:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  if (!global.localStorage) return false;
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],22:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":15}],23:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":14,"./lib/_stream_passthrough.js":15,"./lib/_stream_readable.js":16,"./lib/_stream_transform.js":17,"./lib/_stream_writable.js":18}],24:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":17}],25:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":18}],26:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":8,"inherits":9,"readable-stream/duplex.js":13,"readable-stream/passthrough.js":22,"readable-stream/readable.js":23,"readable-stream/transform.js":24,"readable-stream/writable.js":25}],27:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":28}],28:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

},{"base64-js":29,"ieee754":30,"is-array":31}],29:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],30:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],31:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],32:[function(require,module,exports){
/*
 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license ByteBuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * [BUILD] ByteBufferAB - Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/ByteBuffer.js for details
 */
(function(global, factory) {


    /* CommonJS */ if (typeof require === 'function' && typeof module === "object" && module && module["exports"])
        module['exports'] = (function() {
            var Long; try { Long = require("long"); } catch (e) {}
            return factory(Long);
        })();
    /* Global */ else
        (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);

})(this, function(Long) {
    "use strict";

    /**
     * Constructs a new ByteBuffer.
     * @class The swiss army knife for binary data in JavaScript.
     * @exports ByteBuffer
     * @constructor
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @expose
     */
    var ByteBuffer = function(capacity, littleEndian, noAssert) {
        if (typeof capacity === 'undefined')
            capacity = ByteBuffer.DEFAULT_CAPACITY;
        if (typeof littleEndian === 'undefined')
            littleEndian = ByteBuffer.DEFAULT_ENDIAN;
        if (typeof noAssert === 'undefined')
            noAssert = ByteBuffer.DEFAULT_NOASSERT;
        if (!noAssert) {
            capacity = capacity | 0;
            if (capacity < 0)
                throw RangeError("Illegal capacity");
            littleEndian = !!littleEndian;
            noAssert = !!noAssert;
        }

        /**
         * Backing ArrayBuffer.
         * @type {!ArrayBuffer}
         * @expose
         */
        this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

        /**
         * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
         * @type {?Uint8Array}
         * @expose
         */
        this.view = capacity === 0 ? null : new Uint8Array(this.buffer);

        /**
         * Absolute read/write offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */
        this.offset = 0;

        /**
         * Marked offset.
         * @type {number}
         * @expose
         * @see ByteBuffer#mark
         * @see ByteBuffer#reset
         */
        this.markedOffset = -1;

        /**
         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
         * @type {number}
         * @expose
         * @see ByteBuffer#flip
         * @see ByteBuffer#clear
         */
        this.limit = capacity;

        /**
         * Whether to use little endian byte order, defaults to `false` for big endian.
         * @type {boolean}
         * @expose
         */
        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : false;

        /**
         * Whether to skip assertions of offsets and values, defaults to `false`.
         * @type {boolean}
         * @expose
         */
        this.noAssert = !!noAssert;
    };

    /**
     * ByteBuffer version.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.VERSION = "4.0.0";

    /**
     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
     * @type {boolean}
     * @const
     * @expose
     */
    ByteBuffer.LITTLE_ENDIAN = true;

    /**
     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
     * @type {boolean}
     * @const
     * @expose
     */
    ByteBuffer.BIG_ENDIAN = false;

    /**
     * Default initial capacity of `16`.
     * @type {number}
     * @expose
     */
    ByteBuffer.DEFAULT_CAPACITY = 16;

    /**
     * Default endianess of `false` for big endian.
     * @type {boolean}
     * @expose
     */
    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

    /**
     * Default no assertions flag of `false`.
     * @type {boolean}
     * @expose
     */
    ByteBuffer.DEFAULT_NOASSERT = false;

    /**
     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
     *  and int64 support is not available.
     * @type {?Long}
     * @const
     * @see https://github.com/dcodeIO/Long.js
     * @expose
     */
    ByteBuffer.Long = Long || null;

    /**
     * @alias ByteBuffer.prototype
     * @inner
     */
    var ByteBufferPrototype = ByteBuffer.prototype;

    /**
     * An indicator used to reliably determine if an object is a ByteBuffer or not.
     * @type {boolean}
     * @const
     * @expose
     * @private
     */
    ByteBufferPrototype.__isByteBuffer__;

    Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
        value: true,
        enumerable: false,
        configurable: false
    });

    // helpers

    /**
     * @type {!ArrayBuffer}
     * @inner
     */
    var EMPTY_BUFFER = new ArrayBuffer(0);

    /**
     * String.fromCharCode reference for compile-time renaming.
     * @type {function(...number):string}
     * @inner
     */
    var stringFromCharCode = String.fromCharCode;

    /**
     * Creates a source function for a string.
     * @param {string} s String to read from
     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
     *  no more characters left.
     * @throws {TypeError} If the argument is invalid
     * @inner
     */
    function stringSource(s) {
        var i=0; return function() {
            return i < s.length ? s.charCodeAt(i++) : null;
        };
    }

    /**
     * Creates a destination function for a string.
     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
     *  Returns the final string when called without arguments.
     * @inner
     */
    function stringDestination() {
        var cs = [], ps = []; return function() {
            if (arguments.length === 0)
                return ps.join('')+stringFromCharCode.apply(String, cs);
            if (cs.length + arguments.length > 1024)
                ps.push(stringFromCharCode.apply(String, cs)),
                    cs.length = 0;
            Array.prototype.push.apply(cs, arguments);
        };
    }

    /**
     * Gets the accessor type.
     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
     * @expose
     */
    ByteBuffer.accessor = function() {
        return Uint8Array;
    };
    /**
     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer}
     * @expose
     */
    ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
        return new ByteBuffer(capacity, littleEndian, noAssert);
    };

    /**
     * Concatenates multiple ByteBuffers into one.
     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
     *  defaults to "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} Concatenated ByteBuffer
     * @expose
     */
    ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
        if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        var capacity = 0;
        for (var i=0, k=buffers.length, length; i<k; ++i) {
            if (!ByteBuffer.isByteBuffer(buffers[i]))
                buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
            length = buffers[i].limit - buffers[i].offset;
            if (length > 0) capacity += length;
        }
        if (capacity === 0)
            return new ByteBuffer(0, littleEndian, noAssert);
        var bb = new ByteBuffer(capacity, littleEndian, noAssert),
            bi;
        i=0; while (i<k) {
            bi = buffers[i++];
            length = bi.limit - bi.offset;
            if (length <= 0) continue;
            bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
            bb.offset += length;
        }
        bb.limit = bb.offset;
        bb.offset = 0;
        return bb;
    };

    /**
     * Tests if the specified type is a ByteBuffer.
     * @param {*} bb ByteBuffer to test
     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
     * @expose
     */
    ByteBuffer.isByteBuffer = function(bb) {
        return (bb && bb["__isByteBuffer__"]) === true;
    };
    /**
     * Gets the backing buffer type.
     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
     * @expose
     */
    ByteBuffer.type = function() {
        return ArrayBuffer;
    };
    /**
     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
     *  {@link ByteBuffer#limit} to the length of the wrapped data.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
     *  "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
     * @expose
     */
    ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
        if (typeof encoding !== 'string') {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = undefined;
        }
        if (typeof buffer === 'string') {
            if (typeof encoding === 'undefined')
                encoding = "utf8";
            switch (encoding) {
                case "base64":
                    return ByteBuffer.fromBase64(buffer, littleEndian);
                case "hex":
                    return ByteBuffer.fromHex(buffer, littleEndian);
                case "binary":
                    return ByteBuffer.fromBinary(buffer, littleEndian);
                case "utf8":
                    return ByteBuffer.fromUTF8(buffer, littleEndian);
                case "debug":
                    return ByteBuffer.fromDebug(buffer, littleEndian);
                default:
                    throw Error("Unsupported encoding: "+encoding);
            }
        }
        if (buffer === null || typeof buffer !== 'object')
            throw TypeError("Illegal buffer");
        var bb;
        if (ByteBuffer.isByteBuffer(buffer)) {
            bb = ByteBufferPrototype.clone.call(buffer);
            bb.markedOffset = -1;
            return bb;
        }
        if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER
                bb.buffer = buffer.buffer;
                bb.offset = buffer.byteOffset;
                bb.limit = buffer.byteOffset + buffer.byteLength;
                bb.view = new Uint8Array(buffer.buffer);
            }
        } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.byteLength > 0) {
                bb.buffer = buffer;
                bb.offset = 0;
                bb.limit = buffer.byteLength;
                bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
            }
        } else if (Object.prototype.toString.call(buffer) === "[object Array]") { // Create from octets
            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
            bb.limit = buffer.length;
            for (var i=0; i<buffer.length; ++i)
                bb.view[i] = buffer[i];
        } else
            throw TypeError("Illegal buffer"); // Otherwise fail
        return bb;
    };

    /**
     * Reads the specified number of bytes.
     * @param {number} length Number of bytes to read
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */
    ByteBufferPrototype.readBytes = function(length, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + length > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
        }
        var slice = this.slice(offset, offset + length);
        if (relative) this.offset += length;
        return slice;
    };

    /**
     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
     * @function
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;

    // types/ints/int8

    /**
     * Writes an 8bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeInt8 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 1;
        var capacity0 = this.buffer.byteLength;
        if (offset > capacity0)
            this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };

    /**
     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

    /**
     * Reads an 8bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt8 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var value = this.view[offset];
        if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed
        if (relative) this.offset += 1;
        return value;
    };

    /**
     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

    /**
     * Writes an 8bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeUint8 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 1;
        var capacity1 = this.buffer.byteLength;
        if (offset > capacity1)
            this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
        offset -= 1;
        this.view[offset] = value;
        if (relative) this.offset += 1;
        return this;
    };

    /**
     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;

    /**
     * Reads an 8bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUint8 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var value = this.view[offset];
        if (relative) this.offset += 1;
        return value;
    };

    /**
     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;

    // types/ints/int16

    /**
     * Writes a 16bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeInt16 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 2;
        var capacity2 = this.buffer.byteLength;
        if (offset > capacity2)
            this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset+1] = (value & 0xFF00) >>> 8;
            this.view[offset  ] =  value & 0x00FF;
        } else {
            this.view[offset]   = (value & 0xFF00) >>> 8;
            this.view[offset+1] =  value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };

    /**
     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

    /**
     * Reads a 16bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readInt16 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset  ];
            value |= this.view[offset+1] << 8;
        } else {
            value  = this.view[offset  ] << 8;
            value |= this.view[offset+1];
        }
        if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed
        if (relative) this.offset += 2;
        return value;
    };

    /**
     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

    /**
     * Writes a 16bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeUint16 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 2;
        var capacity3 = this.buffer.byteLength;
        if (offset > capacity3)
            this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
        offset -= 2;
        if (this.littleEndian) {
            this.view[offset+1] = (value & 0xFF00) >>> 8;
            this.view[offset  ] =  value & 0x00FF;
        } else {
            this.view[offset]   = (value & 0xFF00) >>> 8;
            this.view[offset+1] =  value & 0x00FF;
        }
        if (relative) this.offset += 2;
        return this;
    };

    /**
     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;

    /**
     * Reads a 16bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readUint16 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset  ];
            value |= this.view[offset+1] << 8;
        } else {
            value  = this.view[offset  ] << 8;
            value |= this.view[offset+1];
        }
        if (relative) this.offset += 2;
        return value;
    };

    /**
     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */
    ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;

    // types/ints/int32

    /**
     * Writes a 32bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeInt32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity4 = this.buffer.byteLength;
        if (offset > capacity4)
            this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset+3] = (value >>> 24) & 0xFF;
            this.view[offset+2] = (value >>> 16) & 0xFF;
            this.view[offset+1] = (value >>>  8) & 0xFF;
            this.view[offset  ] =  value         & 0xFF;
        } else {
            this.view[offset  ] = (value >>> 24) & 0xFF;
            this.view[offset+1] = (value >>> 16) & 0xFF;
            this.view[offset+2] = (value >>>  8) & 0xFF;
            this.view[offset+3] =  value         & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

    /**
     * Reads a 32bit signed integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset+2] << 16;
            value |= this.view[offset+1] <<  8;
            value |= this.view[offset  ];
            value += this.view[offset+3] << 24 >>> 0;
        } else {
            value  = this.view[offset+1] << 16;
            value |= this.view[offset+2] <<  8;
            value |= this.view[offset+3];
            value += this.view[offset  ] << 24 >>> 0;
        }
        value |= 0; // Cast to signed
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

    /**
     * Writes a 32bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeUint32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value >>>= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity5 = this.buffer.byteLength;
        if (offset > capacity5)
            this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
        offset -= 4;
        if (this.littleEndian) {
            this.view[offset+3] = (value >>> 24) & 0xFF;
            this.view[offset+2] = (value >>> 16) & 0xFF;
            this.view[offset+1] = (value >>>  8) & 0xFF;
            this.view[offset  ] =  value         & 0xFF;
        } else {
            this.view[offset  ] = (value >>> 24) & 0xFF;
            this.view[offset+1] = (value >>> 16) & 0xFF;
            this.view[offset+2] = (value >>>  8) & 0xFF;
            this.view[offset+3] =  value         & 0xFF;
        }
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */
    ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;

    /**
     * Reads a 32bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUint32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
            value  = this.view[offset+2] << 16;
            value |= this.view[offset+1] <<  8;
            value |= this.view[offset  ];
            value += this.view[offset+3] << 24 >>> 0;
        } else {
            value  = this.view[offset+1] << 16;
            value |= this.view[offset+2] <<  8;
            value |= this.view[offset+3];
            value += this.view[offset  ] << 24 >>> 0;
        }
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */
    ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;

    // types/ints/int64

    if (Long) {

        /**
         * Writes a 64bit signed integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeInt64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            offset += 8;
            var capacity6 = this.buffer.byteLength;
            if (offset > capacity6)
                this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
            offset -= 8;
            var lo = value.low,
                hi = value.high;
            if (this.littleEndian) {
                this.view[offset+3] = (lo >>> 24) & 0xFF;
                this.view[offset+2] = (lo >>> 16) & 0xFF;
                this.view[offset+1] = (lo >>>  8) & 0xFF;
                this.view[offset  ] =  lo         & 0xFF;
                offset += 4;
                this.view[offset+3] = (hi >>> 24) & 0xFF;
                this.view[offset+2] = (hi >>> 16) & 0xFF;
                this.view[offset+1] = (hi >>>  8) & 0xFF;
                this.view[offset  ] =  hi         & 0xFF;
            } else {
                this.view[offset  ] = (hi >>> 24) & 0xFF;
                this.view[offset+1] = (hi >>> 16) & 0xFF;
                this.view[offset+2] = (hi >>>  8) & 0xFF;
                this.view[offset+3] =  hi         & 0xFF;
                offset += 4;
                this.view[offset  ] = (lo >>> 24) & 0xFF;
                this.view[offset+1] = (lo >>> 16) & 0xFF;
                this.view[offset+2] = (lo >>>  8) & 0xFF;
                this.view[offset+3] =  lo         & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };

        /**
         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

        /**
         * Reads a 64bit signed integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readInt64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
            }
            var lo = 0,
                hi = 0;
            if (this.littleEndian) {
                lo  = this.view[offset+2] << 16;
                lo |= this.view[offset+1] <<  8;
                lo |= this.view[offset  ];
                lo += this.view[offset+3] << 24 >>> 0;
                offset += 4;
                hi  = this.view[offset+2] << 16;
                hi |= this.view[offset+1] <<  8;
                hi |= this.view[offset  ];
                hi += this.view[offset+3] << 24 >>> 0;
            } else {
                hi  = this.view[offset+1] << 16;
                hi |= this.view[offset+2] <<  8;
                hi |= this.view[offset+3];
                hi += this.view[offset  ] << 24 >>> 0;
                offset += 4;
                lo  = this.view[offset+1] << 16;
                lo |= this.view[offset+2] <<  8;
                lo |= this.view[offset+3];
                lo += this.view[offset  ] << 24 >>> 0;
            }
            var value = new Long(lo, hi, false);
            if (relative) this.offset += 8;
            return value;
        };

        /**
         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

        /**
         * Writes a 64bit unsigned integer.
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeUint64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            offset += 8;
            var capacity7 = this.buffer.byteLength;
            if (offset > capacity7)
                this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
            offset -= 8;
            var lo = value.low,
                hi = value.high;
            if (this.littleEndian) {
                this.view[offset+3] = (lo >>> 24) & 0xFF;
                this.view[offset+2] = (lo >>> 16) & 0xFF;
                this.view[offset+1] = (lo >>>  8) & 0xFF;
                this.view[offset  ] =  lo         & 0xFF;
                offset += 4;
                this.view[offset+3] = (hi >>> 24) & 0xFF;
                this.view[offset+2] = (hi >>> 16) & 0xFF;
                this.view[offset+1] = (hi >>>  8) & 0xFF;
                this.view[offset  ] =  hi         & 0xFF;
            } else {
                this.view[offset  ] = (hi >>> 24) & 0xFF;
                this.view[offset+1] = (hi >>> 16) & 0xFF;
                this.view[offset+2] = (hi >>>  8) & 0xFF;
                this.view[offset+3] =  hi         & 0xFF;
                offset += 4;
                this.view[offset  ] = (lo >>> 24) & 0xFF;
                this.view[offset+1] = (lo >>> 16) & 0xFF;
                this.view[offset+2] = (lo >>>  8) & 0xFF;
                this.view[offset+3] =  lo         & 0xFF;
            }
            if (relative) this.offset += 8;
            return this;
        };

        /**
         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
         * @function
         * @param {number|!Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!ByteBuffer} this
         * @expose
         */
        ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;

        /**
         * Reads a 64bit unsigned integer.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readUint64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 8 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
            }
            var lo = 0,
                hi = 0;
            if (this.littleEndian) {
                lo  = this.view[offset+2] << 16;
                lo |= this.view[offset+1] <<  8;
                lo |= this.view[offset  ];
                lo += this.view[offset+3] << 24 >>> 0;
                offset += 4;
                hi  = this.view[offset+2] << 16;
                hi |= this.view[offset+1] <<  8;
                hi |= this.view[offset  ];
                hi += this.view[offset+3] << 24 >>> 0;
            } else {
                hi  = this.view[offset+1] << 16;
                hi |= this.view[offset+2] <<  8;
                hi |= this.view[offset+3];
                hi += this.view[offset  ] << 24 >>> 0;
                offset += 4;
                lo  = this.view[offset+1] << 16;
                lo |= this.view[offset+2] <<  8;
                lo |= this.view[offset+3];
                lo += this.view[offset  ] << 24 >>> 0;
            }
            var value = new Long(lo, hi, true);
            if (relative) this.offset += 8;
            return value;
        };

        /**
         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
         * @function
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
         * @returns {!Long}
         * @expose
         */
        ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;

    } // Long


    // types/floats/float32

    /*
     ieee754 - https://github.com/feross/ieee754

     The MIT License (MIT)

     Copyright (c) Feross Aboukhadijeh

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
    */

    /**
     * Reads an IEEE754 float from a byte array.
     * @param {!Array} buffer
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @returns {number}
     * @inner
     */
    function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
        var e, m,
            eLen = nBytes * 8 - mLen - 1,
            eMax = (1 << eLen) - 1,
            eBias = eMax >> 1,
            nBits = -7,
            i = isLE ? (nBytes - 1) : 0,
            d = isLE ? -1 : 1,
            s = buffer[offset + i];

        i += d;

        e = s & ((1 << (-nBits)) - 1);
        s >>= (-nBits);
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & ((1 << (-nBits)) - 1);
        e >>= (-nBits);
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
            e = 1 - eBias;
        } else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }

    /**
     * Writes an IEEE754 float to a byte array.
     * @param {!Array} buffer
     * @param {number} value
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @inner
     */
    function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c,
            eLen = nBytes * 8 - mLen - 1,
            eMax = (1 << eLen) - 1,
            eBias = eMax >> 1,
            rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
            i = isLE ? 0 : (nBytes - 1),
            d = isLE ? 1 : -1,
            s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
        } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
            }
            if (e + eBias >= 1) {
                value += rt / c;
            } else {
                value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
                e++;
                c /= 2;
            }

            if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
            } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
            } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
            }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = (e << mLen) | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
    }

    /**
     * Writes a 32bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number')
                throw TypeError("Illegal value: "+value+" (not a number)");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 4;
        var capacity8 = this.buffer.byteLength;
        if (offset > capacity8)
            this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
        offset -= 4;
        ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return this;
    };

    /**
     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

    /**
     * Reads a 32bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
        if (relative) this.offset += 4;
        return value;
    };

    /**
     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

    // types/floats/float64

    /**
     * Writes a 64bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeFloat64 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number')
                throw TypeError("Illegal value: "+value+" (not a number)");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        offset += 8;
        var capacity9 = this.buffer.byteLength;
        if (offset > capacity9)
            this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
        offset -= 8;
        ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return this;
    };

    /**
     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

    /**
     * Reads a 64bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readFloat64 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
        if (relative) this.offset += 8;
        return value;
    };

    /**
     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */
    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;


    // types/varints/varint32

    /**
     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
     * @type {number}
     * @const
     * @expose
     */
    ByteBuffer.MAX_VARINT32_BYTES = 5;

    /**
     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
     * @param {number} value Value to encode
     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
     * @expose
     */
    ByteBuffer.calculateVarint32 = function(value) {
        // ref: src/google/protobuf/io/coded_stream.cc
        value = value >>> 0;
             if (value < 1 << 7 ) return 1;
        else if (value < 1 << 14) return 2;
        else if (value < 1 << 21) return 3;
        else if (value < 1 << 28) return 4;
        else                      return 5;
    };

    /**
     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
     * @param {number} n Signed 32bit integer
     * @returns {number} Unsigned zigzag encoded 32bit integer
     * @expose
     */
    ByteBuffer.zigZagEncode32 = function(n) {
        return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
    };

    /**
     * Decodes a zigzag encoded signed 32bit integer.
     * @param {number} n Unsigned zigzag encoded 32bit integer
     * @returns {number} Signed 32bit integer
     * @expose
     */
    ByteBuffer.zigZagDecode32 = function(n) {
        return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h
    };

    /**
     * Writes a 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeVarint32 = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var size = ByteBuffer.calculateVarint32(value),
            b;
        offset += size;
        var capacity10 = this.buffer.byteLength;
        if (offset > capacity10)
            this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
        offset -= size;
        // ref: http://code.google.com/searchframe#WTeibokF6gE/trunk/src/google/protobuf/io/coded_stream.cc
        this.view[offset] = b = value | 0x80;
        value >>>= 0;
        if (value >= 1 << 7) {
            b = (value >> 7) | 0x80;
            this.view[offset+1] = b;
            if (value >= 1 << 14) {
                b = (value >> 14) | 0x80;
                this.view[offset+2] = b;
                if (value >= 1 << 21) {
                    b = (value >> 21) | 0x80;
                    this.view[offset+3] = b;
                    if (value >= 1 << 28) {
                        this.view[offset+4] = (value >> 28) & 0x0F;
                        size = 5;
                    } else {
                        this.view[offset+3] = b & 0x7F;
                        size = 4;
                    }
                } else {
                    this.view[offset+2] = b & 0x7F;
                    size = 3;
                }
            } else {
                this.view[offset+1] = b & 0x7F;
                size = 2;
            }
        } else {
            this.view[offset] = b & 0x7F;
            size = 1;
        }
        if (relative) {
            this.offset += size;
            return this;
        }
        return size;
    };

    /**
     * Writes a zig-zag encoded 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
    };

    /**
     * Reads a 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
     *  to fully decode the varint.
     * @expose
     */
    ByteBufferPrototype.readVarint32 = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        // ref: src/google/protobuf/io/coded_stream.cc
        var size = 0,
            value = 0 >>> 0,
            temp,
            ioffset;
        do {
            ioffset = offset+size;
            if (!this.noAssert && ioffset > this.limit) {
                var err = Error("Truncated");
                err['truncated'] = true;
                throw err;
            }
            temp = this.view[ioffset];
            if (size < 5)
                value |= ((temp&0x7F)<<(7*size)) >>> 0;
            ++size;
        } while ((temp & 0x80) === 0x80);
        value = value | 0; // Make sure to discard the higher order bits
        if (relative) {
            this.offset += size;
            return value;
        }
        return {
            "value": value,
            "length": size
        };
    };

    /**
     * Reads a zig-zag encoded 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint
     * @expose
     */
    ByteBufferPrototype.readVarint32ZigZag = function(offset) {
        var val = this.readVarint32(offset);
        if (typeof val === 'object')
            val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
        else
            val = ByteBuffer.zigZagDecode32(val);
        return val;
    };

    // types/varints/varint64

    if (Long) {

        /**
         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
         * @type {number}
         * @const
         * @expose
         */
        ByteBuffer.MAX_VARINT64_BYTES = 10;

        /**
         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
         * @param {number|!Long} value Value to encode
         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
         * @expose
         */
        ByteBuffer.calculateVarint64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value);
            else if (typeof value === 'string')
                value = Long.fromString(value);
            // ref: src/google/protobuf/io/coded_stream.cc
            var part0 = value.toInt() >>> 0,
                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            if (part2 == 0) {
                if (part1 == 0) {
                    if (part0 < 1 << 14)
                        return part0 < 1 << 7 ? 1 : 2;
                    else
                        return part0 < 1 << 21 ? 3 : 4;
                } else {
                    if (part1 < 1 << 14)
                        return part1 < 1 << 7 ? 5 : 6;
                    else
                        return part1 < 1 << 21 ? 7 : 8;
                }
            } else
                return part2 < 1 << 7 ? 9 : 10;
        };

        /**
         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
         * @param {number|!Long} value Signed long
         * @returns {!Long} Unsigned zigzag encoded long
         * @expose
         */
        ByteBuffer.zigZagEncode64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
        };

        /**
         * Decodes a zigzag encoded signed 64bit integer.
         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
         * @returns {!Long} Signed long
         * @expose
         */
        ByteBuffer.zigZagDecode64 = function(value) {
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            // ref: src/google/protobuf/wire_format_lite.h
            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
        };

        /**
         * Writes a 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */
        ByteBufferPrototype.writeVarint64 = function(value, offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof value === 'number')
                    value = Long.fromNumber(value);
                else if (typeof value === 'string')
                    value = Long.fromString(value);
                else if (!(value && value instanceof Long))
                    throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 0 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
            }
            if (typeof value === 'number')
                value = Long.fromNumber(value, false);
            else if (typeof value === 'string')
                value = Long.fromString(value, false);
            else if (value.unsigned !== false) value = value.toSigned();
            var size = ByteBuffer.calculateVarint64(value),
                part0 = value.toInt() >>> 0,
                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            offset += size;
            var capacity11 = this.buffer.byteLength;
            if (offset > capacity11)
                this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
            offset -= size;
            switch (size) {
                case 10: this.view[offset+9] = (part2 >>>  7) & 0x01;
                case 9 : this.view[offset+8] = size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F;
                case 8 : this.view[offset+7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;
                case 7 : this.view[offset+6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;
                case 6 : this.view[offset+5] = size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F;
                case 5 : this.view[offset+4] = size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F;
                case 4 : this.view[offset+3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;
                case 3 : this.view[offset+2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;
                case 2 : this.view[offset+1] = size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F;
                case 1 : this.view[offset  ] = size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F;
            }
            if (relative) {
                this.offset += size;
                return this;
            } else {
                return size;
            }
        };

        /**
         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
         * @param {number|Long} value Value to write
         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  written if omitted.
         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
         * @expose
         */
        ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
        };

        /**
         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */
        ByteBufferPrototype.readVarint64 = function(offset) {
            var relative = typeof offset === 'undefined';
            if (relative) offset = this.offset;
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + 1 > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
            }
            // ref: src/google/protobuf/io/coded_stream.cc
            var start = offset,
                part0 = 0,
                part1 = 0,
                part2 = 0,
                b  = 0;
            b = this.view[offset++]; part0  = (b & 0x7F)      ; if ( b & 0x80                                                   ) {
            b = this.view[offset++]; part0 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part0 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part0 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part1 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part2  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            b = this.view[offset++]; part2 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
            throw Error("Buffer overrun"); }}}}}}}}}}
            var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);
            if (relative) {
                this.offset = offset;
                return value;
            } else {
                return {
                    'value': value,
                    'length': offset-start
                };
            }
        };

        /**
         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
         *  read if omitted.
         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
         *  the actual number of bytes read.
         * @throws {Error} If it's not a valid varint
         * @expose
         */
        ByteBufferPrototype.readVarint64ZigZag = function(offset) {
            var val = this.readVarint64(offset);
            if (val && val['value'] instanceof Long)
                val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
            else
                val = ByteBuffer.zigZagDecode64(val);
            return val;
        };

    } // Long


    // types/strings/cstring

    /**
     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
     *  characters itself.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  contained in `str` + 1 if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
     * @expose
     */
    ByteBufferPrototype.writeCString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        var i,
            k = str.length;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            for (i=0; i<k; ++i) {
                if (str.charCodeAt(i) === 0)
                    throw RangeError("Illegal str: Contains NULL-characters");
            }
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        // UTF8 strings do not contain zero bytes in between except for the zero character, so:
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k+1;
        var capacity12 = this.buffer.byteLength;
        if (offset > capacity12)
            this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
        offset -= k+1;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        this.view[offset++] = 0;
        if (relative) {
            this.offset = offset;
            return this;
        }
        return k;
    };

    /**
     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
     *  itself.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readCString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            temp;
        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
        var sd, b = -1;
        utfx.decodeUTF8toUTF16(function() {
            if (b === 0) return null;
            if (offset >= this.limit)
                throw RangeError("Illegal range: Truncated data, "+offset+" < "+this.limit);
            b = this.view[offset++];
            return b === 0 ? null : b;
        }.bind(this), sd = stringDestination(), true);
        if (relative) {
            this.offset = offset;
            return sd();
        } else {
            return {
                "string": sd(),
                "length": offset - start
            };
        }
    };

    // types/strings/istring

    /**
     * Writes a length as uint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */
    ByteBufferPrototype.writeIString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            k;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        offset += 4+k;
        var capacity13 = this.buffer.byteLength;
        if (offset > capacity13)
            this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
        offset -= 4+k;
        if (this.littleEndian) {
            this.view[offset+3] = (k >>> 24) & 0xFF;
            this.view[offset+2] = (k >>> 16) & 0xFF;
            this.view[offset+1] = (k >>>  8) & 0xFF;
            this.view[offset  ] =  k         & 0xFF;
        } else {
            this.view[offset  ] = (k >>> 24) & 0xFF;
            this.view[offset+1] = (k >>> 16) & 0xFF;
            this.view[offset+2] = (k >>>  8) & 0xFF;
            this.view[offset+3] =  k         & 0xFF;
        }
        offset += 4;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (offset !== start + 4 + k)
            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+4+k));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Reads a length as uint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */
    ByteBufferPrototype.readIString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
        }
        var temp = 0,
            start = offset,
            str;
        if (this.littleEndian) {
            temp  = this.view[offset+2] << 16;
            temp |= this.view[offset+1] <<  8;
            temp |= this.view[offset  ];
            temp += this.view[offset+3] << 24 >>> 0;
        } else {
            temp  = this.view[offset+1] << 16;
            temp |= this.view[offset+2] <<  8;
            temp |= this.view[offset+3];
            temp += this.view[offset  ] << 24 >>> 0;
        }
        offset += 4;
        var k = offset + temp,
            sd;
        utfx.decodeUTF8toUTF16(function() {
            return offset < k ? this.view[offset++] : null;
        }.bind(this), sd = stringDestination(), this.noAssert);
        str = sd();
        if (relative) {
            this.offset = offset;
            return str;
        } else {
            return {
                'string': str,
                'length': offset - start
            };
        }
    };

    // types/strings/utf8string

    /**
     * Metrics representing number of UTF8 characters. Evaluates to `c`.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.METRICS_CHARS = 'c';

    /**
     * Metrics representing number of bytes. Evaluates to `b`.
     * @type {string}
     * @const
     * @expose
     */
    ByteBuffer.METRICS_BYTES = 'b';

    /**
     * Writes an UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */
    ByteBufferPrototype.writeUTF8String = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var k;
        var start = offset;
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k;
        var capacity14 = this.buffer.byteLength;
        if (offset > capacity14)
            this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
        offset -= k;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
     * @function
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */
    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

    /**
     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 characters
     * @expose
     */
    ByteBuffer.calculateUTF8Chars = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
    };

    /**
     * Calculates the number of UTF8 bytes of a string.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */
    ByteBuffer.calculateUTF8Bytes = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
    };

    /**
     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
     * @function
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */
    ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;

    /**
     * Reads an UTF8 encoded string.
     * @param {number} length Number of characters or bytes to read.
     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
        if (typeof metrics === 'number') {
            offset = metrics;
            metrics = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
        if (!this.noAssert) {
            if (typeof length !== 'number' || length % 1 !== 0)
                throw TypeError("Illegal length: "+length+" (not an integer)");
            length |= 0;
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var i = 0,
            start = offset,
            sd;
        if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser
            sd = stringDestination();
            utfx.decodeUTF8(function() {
                return i < length && offset < this.limit ? this.view[offset++] : null;
            }.bind(this), function(cp) {
                ++i; utfx.UTF8toUTF16(cp, sd);
            });
            if (i !== length)
                throw RangeError("Illegal range: Truncated data, "+i+" == "+length);
            if (relative) {
                this.offset = offset;
                return sd();
            } else {
                return {
                    "string": sd(),
                    "length": offset - start
                };
            }
        } else if (metrics === ByteBuffer.METRICS_BYTES) {
            if (!this.noAssert) {
                if (typeof offset !== 'number' || offset % 1 !== 0)
                    throw TypeError("Illegal offset: "+offset+" (not an integer)");
                offset >>>= 0;
                if (offset < 0 || offset + length > this.buffer.byteLength)
                    throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
            }
            var k = offset + length;
            utfx.decodeUTF8toUTF16(function() {
                return offset < k ? this.view[offset++] : null;
            }.bind(this), sd = stringDestination(), this.noAssert);
            if (offset !== k)
                throw RangeError("Illegal range: Truncated data, "+offset+" == "+k);
            if (relative) {
                this.offset = offset;
                return sd();
            } else {
                return {
                    'string': sd(),
                    'length': offset - start
                };
            }
        } else
            throw TypeError("Unsupported metrics: "+metrics);
    };

    /**
     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
     * @function
     * @param {number} length Number of characters or bytes to read
     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */
    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

    // types/strings/vstring

    /**
     * Writes a length as varint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */
    ByteBufferPrototype.writeVString = function(str, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        var start = offset,
            k, l;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        l = ByteBuffer.calculateVarint32(k);
        offset += l+k;
        var capacity15 = this.buffer.byteLength;
        if (offset > capacity15)
            this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
        offset -= l+k;
        offset += this.writeVarint32(k, offset);
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
        }.bind(this));
        if (offset !== start+k+l)
            throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+k+l));
        if (relative) {
            this.offset = offset;
            return this;
        }
        return offset - start;
    };

    /**
     * Reads a length as varint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */
    ByteBufferPrototype.readVString = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
        }
        var temp = this.readVarint32(offset),
            start = offset,
            str;
        offset += temp['length'];
        temp = temp['value'];
        var k = offset + temp,
            sd = stringDestination();
        utfx.decodeUTF8toUTF16(function() {
            return offset < k ? this.view[offset++] : null;
        }.bind(this), sd, this.noAssert);
        str = sd();
        if (relative) {
            this.offset = offset;
            return str;
        } else {
            return {
                'string': str,
                'length': offset - start
            };
        }
    };


    /**
     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
     *  data's length.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
     */
    ByteBufferPrototype.append = function(source, encoding, offset) {
        if (typeof encoding === 'number' || typeof encoding !== 'string') {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
        var length = source.limit - source.offset;
        if (length <= 0) return this; // Nothing to append
        offset += length;
        var capacity16 = this.buffer.byteLength;
        if (offset > capacity16)
            this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
        offset -= length;
        this.view.set(source.view.subarray(source.offset, source.limit), offset);
        source.offset += length;
        if (relative) this.offset += length;
        return this;
    };

    /**
     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
        specified offset up to the length of this ByteBuffer's data.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#append
     */
    ByteBufferPrototype.appendTo = function(target, offset) {
        target.append(this, offset);
        return this;
    };

    /**
     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
     *  disable them if your code already makes sure that everything is valid.
     * @param {boolean} assert `true` to enable assertions, otherwise `false`
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.assert = function(assert) {
        this.noAssert = !assert;
        return this;
    };

    /**
     * Gets the capacity of this ByteBuffer's backing buffer.
     * @returns {number} Capacity of the backing buffer
     * @expose
     */
    ByteBufferPrototype.capacity = function() {
        return this.buffer.byteLength;
    };

    /**
     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.clear = function() {
        this.offset = 0;
        this.limit = this.buffer.byteLength;
        this.markedOffset = -1;
        return this;
    };

    /**
     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
     * @returns {!ByteBuffer} Cloned instance
     * @expose
     */
    ByteBufferPrototype.clone = function(copy) {
        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
        if (copy) {
            bb.buffer = new ArrayBuffer(this.buffer.byteLength);
            bb.view = new Uint8Array(bb.buffer);
        } else {
            bb.buffer = this.buffer;
            bb.view = this.view;
        }
        bb.offset = this.offset;
        bb.markedOffset = this.markedOffset;
        bb.limit = this.limit;
        return bb;
    };

    /**
     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.compact = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === 0 && end === this.buffer.byteLength)
            return this; // Already compacted
        var len = end - begin;
        if (len === 0) {
            this.buffer = EMPTY_BUFFER;
            this.view = null;
            if (this.markedOffset >= 0) this.markedOffset -= begin;
            this.offset = 0;
            this.limit = 0;
            return this;
        }
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        view.set(this.view.subarray(begin, end));
        this.buffer = buffer;
        this.view = view;
        if (this.markedOffset >= 0) this.markedOffset -= begin;
        this.offset = 0;
        this.limit = len;
        return this;
    };

    /**
     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Copy
     * @expose
     */
    ByteBufferPrototype.copy = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === end)
            return new ByteBuffer(0, this.littleEndian, this.noAssert);
        var capacity = end - begin,
            bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
        bb.offset = 0;
        bb.limit = capacity;
        if (bb.markedOffset >= 0) bb.markedOffset -= begin;
        this.copyTo(bb, 0, begin, end);
        return bb;
    };

    /**
     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
     *  by the number of bytes copied if omitted.
     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
     *  number of bytes copied if omitted.
     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
        var relative,
            targetRelative;
        if (!this.noAssert) {
            if (!ByteBuffer.isByteBuffer(target))
                throw TypeError("Illegal target: Not a ByteBuffer");
        }
        targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
        sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
        sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

        if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
            throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.byteLength);
        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
            throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.byteLength);

        var len = sourceLimit - sourceOffset;
        if (len === 0)
            return target; // Nothing to copy

        target.ensureCapacity(targetOffset + len);

        target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);

        if (relative) this.offset += len;
        if (targetRelative) target.offset += len;

        return this;
    };

    /**
     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
     *  the required capacity will be used instead.
     * @param {number} capacity Required capacity
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.ensureCapacity = function(capacity) {
        var current = this.buffer.byteLength;
        if (current < capacity)
            return this.resize((current *= 2) > capacity ? current : capacity);
        return this;
    };

    /**
     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted. defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} this
     * @expose
     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
     */
    ByteBufferPrototype.fill = function(value, begin, end) {
        var relative = typeof begin === 'undefined';
        if (relative) begin = this.offset;
        if (typeof value === 'string' && value.length > 0)
            value = value.charCodeAt(0);
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof value !== 'number' || value % 1 !== 0)
                throw TypeError("Illegal value: "+value+" (not an integer)");
            value |= 0;
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin >= end)
            return this; // Nothing to fill
        while (begin < end) this.view[begin++] = value;
        if (relative) this.offset = begin;
        return this;
    };

    /**
     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.flip = function() {
        this.limit = this.offset;
        this.offset = 0;
        return this;
    };
    /**
     * Marks an offset on this ByteBuffer to be used later.
     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @see ByteBuffer#reset
     * @expose
     */
    ByteBufferPrototype.mark = function(offset) {
        offset = typeof offset === 'undefined' ? this.offset : offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        this.markedOffset = offset;
        return this;
    };
    /**
     * Sets the byte order.
     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.order = function(littleEndian) {
        if (!this.noAssert) {
            if (typeof littleEndian !== 'boolean')
                throw TypeError("Illegal littleEndian: Not a boolean");
        }
        this.littleEndian = !!littleEndian;
        return this;
    };

    /**
     * Switches (to) little endian byte order.
     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.LE = function(littleEndian) {
        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
        return this;
    };

    /**
     * Switches (to) big endian byte order.
     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.BE = function(bigEndian) {
        this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
        return this;
    };
    /**
     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
     *  modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
     */
    ByteBufferPrototype.prepend = function(source, encoding, offset) {
        if (typeof encoding === 'number' || typeof encoding !== 'string') {
            offset = encoding;
            encoding = undefined;
        }
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: "+offset+" (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }
        if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
        var len = source.limit - source.offset;
        if (len <= 0) return this; // Nothing to prepend
        var diff = len - offset;
        if (diff > 0) { // Not enough space before offset, so resize + move
            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
            var view = new Uint8Array(buffer);
            view.set(this.view.subarray(offset, this.buffer.byteLength), len);
            this.buffer = buffer;
            this.view = view;
            this.offset += diff;
            if (this.markedOffset >= 0) this.markedOffset += diff;
            this.limit += diff;
            offset += diff;
        } else {
            var arrayView = new Uint8Array(this.buffer);
        }
        this.view.set(source.view.subarray(source.offset, source.limit), offset - len);

        source.offset = source.limit;
        if (relative)
            this.offset -= len;
        return this;
    };

    /**
     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#prepend
     */
    ByteBufferPrototype.prependTo = function(target, offset) {
        target.prepend(this, offset);
        return this;
    };
    /**
     * Prints debug information about this ByteBuffer's contents.
     * @param {function(string)=} out Output function to call, defaults to console.log
     * @expose
     */
    ByteBufferPrototype.printDebug = function(out) {
        if (typeof out !== 'function') out = console.log.bind(console);
        out(
            this.toString()+"\n"+
            "-------------------------------------------------------------------\n"+
            this.toDebug(/* columns */ true)
        );
    };

    /**
     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
     * @expose
     */
    ByteBufferPrototype.remaining = function() {
        return this.limit - this.offset;
    };
    /**
     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
     *  marked, sets `offset = 0`.
     * @returns {!ByteBuffer} this
     * @see ByteBuffer#mark
     * @expose
     */
    ByteBufferPrototype.reset = function() {
        if (this.markedOffset >= 0) {
            this.offset = this.markedOffset;
            this.markedOffset = -1;
        } else {
            this.offset = 0;
        }
        return this;
    };
    /**
     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
     *  large or larger.
     * @param {number} capacity Capacity required
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `capacity` is not a number
     * @throws {RangeError} If `capacity < 0`
     * @expose
     */
    ByteBufferPrototype.resize = function(capacity) {
        if (!this.noAssert) {
            if (typeof capacity !== 'number' || capacity % 1 !== 0)
                throw TypeError("Illegal capacity: "+capacity+" (not an integer)");
            capacity |= 0;
            if (capacity < 0)
                throw RangeError("Illegal capacity: 0 <= "+capacity);
        }
        if (this.buffer.byteLength < capacity) {
            var buffer = new ArrayBuffer(capacity);
            var view = new Uint8Array(buffer);
            view.set(this.view);
            this.buffer = buffer;
            this.view = view;
        }
        return this;
    };
    /**
     * Reverses this ByteBuffer's contents.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.reverse = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === end)
            return this; // Nothing to reverse
        Array.prototype.reverse.call(this.view.subarray(begin, end));
        return this;
    };
    /**
     * Skips the next `length` bytes. This will just advance
     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
     * @returns {!ByteBuffer} this
     * @expose
     */
    ByteBufferPrototype.skip = function(length) {
        if (!this.noAssert) {
            if (typeof length !== 'number' || length % 1 !== 0)
                throw TypeError("Illegal length: "+length+" (not an integer)");
            length |= 0;
        }
        var offset = this.offset + length;
        if (!this.noAssert) {
            if (offset < 0 || offset > this.buffer.byteLength)
                throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.byteLength);
        }
        this.offset = offset;
        return this;
    };

    /**
     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
     * @expose
     */
    ByteBufferPrototype.slice = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var bb = this.clone();
        bb.offset = begin;
        bb.limit = end;
        return bb;
    };
    /**
     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
     *  possible. Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */
    ByteBufferPrototype.toBuffer = function(forceCopy) {
        var offset = this.offset,
            limit = this.limit;
        if (!this.noAssert) {
            if (typeof offset !== 'number' || offset % 1 !== 0)
                throw TypeError("Illegal offset: Not an integer");
            offset >>>= 0;
            if (typeof limit !== 'number' || limit % 1 !== 0)
                throw TypeError("Illegal limit: Not an integer");
            limit >>>= 0;
            if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.byteLength);
        }
        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
            return this.buffer;
        if (offset === limit)
            return EMPTY_BUFFER;
        var buffer = new ArrayBuffer(limit - offset);
        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
        return buffer;
    };

    /**
     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
     * @function
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
     *  Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */
    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

    /**
     * Converts the ByteBuffer's contents to a string.
     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
     *  highlighted offsets.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {string} String representation
     * @throws {Error} If `encoding` is invalid
     * @expose
     */
    ByteBufferPrototype.toString = function(encoding, begin, end) {
        if (typeof encoding === 'undefined')
            return "ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";
        if (typeof encoding === 'number')
            encoding = "utf8",
            begin = encoding,
            end = begin;
        switch (encoding) {
            case "utf8":
                return this.toUTF8(begin, end);
            case "base64":
                return this.toBase64(begin, end);
            case "hex":
                return this.toHex(begin, end);
            case "binary":
                return this.toBinary(begin, end);
            case "debug":
                return this.toDebug();
            case "columns":
                return this.toColumns();
            default:
                throw Error("Unsupported encoding: "+encoding);
        }
    };

    // lxiv-embeddable

    /**
     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/lxiv for details
     */
    var lxiv = function() {
        "use strict";

        /**
         * lxiv namespace.
         * @type {!Object.<string,*>}
         * @exports lxiv
         */
        var lxiv = {};

        /**
         * Character codes for output.
         * @type {!Array.<number>}
         * @inner
         */
        var aout = [
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,
            103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
            119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47
        ];

        /**
         * Character codes for input.
         * @type {!Array.<number>}
         * @inner
         */
        var ain = [];
        for (var i=0, k=aout.length; i<k; ++i)
            ain[aout[i]] = i;

        /**
         * Encodes bytes to base64 char codes.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
         *  there are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
         *  code.
         */
        lxiv.encode = function(src, dst) {
            var b, t;
            while ((b = src()) !== null) {
                dst(aout[(b>>2)&0x3f]);
                t = (b&0x3)<<4;
                if ((b = src()) !== null) {
                    t |= (b>>4)&0xf;
                    dst(aout[(t|((b>>4)&0xf))&0x3f]);
                    t = (b&0xf)<<2;
                    if ((b = src()) !== null)
                        dst(aout[(t|((b>>6)&0x3))&0x3f]),
                        dst(aout[b&0x3f]);
                    else
                        dst(aout[t&0x3f]),
                        dst(61);
                } else
                    dst(aout[t&0x3f]),
                    dst(61),
                    dst(61);
            }
        };

        /**
         * Decodes base64 char codes to bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         * @throws {Error} If a character code is invalid
         */
        lxiv.decode = function(src, dst) {
            var c, t1, t2;
            function fail(c) {
                throw Error("Illegal character code: "+c);
            }
            while ((c = src()) !== null) {
                t1 = ain[c];
                if (typeof t1 === 'undefined') fail(c);
                if ((c = src()) !== null) {
                    t2 = ain[c];
                    if (typeof t2 === 'undefined') fail(c);
                    dst((t1<<2)>>>0|(t2&0x30)>>4);
                    if ((c = src()) !== null) {
                        t1 = ain[c];
                        if (typeof t1 === 'undefined')
                            if (c === 61) break; else fail(c);
                        dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);
                        if ((c = src()) !== null) {
                            t2 = ain[c];
                            if (typeof t2 === 'undefined')
                                if (c === 61) break; else fail(c);
                            dst(((t1&0x3)<<6)>>>0|t2);
                        }
                    }
                }
            }
        };

        /**
         * Tests if a string is valid base64.
         * @param {string} str String to test
         * @returns {boolean} `true` if valid, otherwise `false`
         */
        lxiv.test = function(str) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
        };

        return lxiv;
    }();

    // encodings/base64

    /**
     * Encodes this ByteBuffer's contents to a base64 encoded string.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
     * @returns {string} Base64 encoded string
     * @expose
     */
    ByteBufferPrototype.toBase64 = function(begin, end) {
        if (typeof begin === 'undefined')
            begin = this.offset;
        if (typeof end === 'undefined')
            end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var sd; lxiv.encode(function() {
            return begin < end ? this.view[begin++] : null;
        }.bind(this), sd = stringDestination());
        return sd();
    };

    /**
     * Decodes a base64 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromBase64 = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (str.length % 4 !== 0)
                throw TypeError("Illegal str: Length not a multiple of 4");
        }
        var bb = new ByteBuffer(str.length/4*3, littleEndian, noAssert),
            i = 0;
        lxiv.decode(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };

    /**
     * Encodes a binary string to base64 like `window.btoa` does.
     * @param {string} str Binary string
     * @returns {string} Base64 encoded string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
     * @expose
     */
    ByteBuffer.btoa = function(str) {
        return ByteBuffer.fromBinary(str).toBase64();
    };

    /**
     * Decodes a base64 encoded string to binary like `window.atob` does.
     * @param {string} b64 Base64 encoded string
     * @returns {string} Binary string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
     * @expose
     */
    ByteBuffer.atob = function(b64) {
        return ByteBuffer.fromBase64(b64).toBinary();
    };

    // encodings/binary

    /**
     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Binary encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */
    ByteBufferPrototype.toBinary = function(begin, end) {
        begin = typeof begin === 'undefined' ? this.offset : begin;
        end = typeof end === 'undefined' ? this.limit : end;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        if (begin === end)
            return "";
        var cc = [], pt = [];
        while (begin < end) {
            cc.push(this.view[begin++]);
            if (cc.length >= 1024)
                pt.push(String.fromCharCode.apply(String, cc)),
                cc = [];
        }
        return pt.join('') + String.fromCharCode.apply(String, cc);
    };

    /**
     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromBinary = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
        }
        var i = 0, k = str.length, charCode,
            bb = new ByteBuffer(k, littleEndian, noAssert);
        while (i<k) {
            charCode = str.charCodeAt(i);
            if (!noAssert && charCode > 255)
                throw RangeError("Illegal charCode at "+i+": 0 <= "+charCode+" <= 255");
            bb.view[i++] = charCode;
        }
        bb.limit = k;
        return bb;
    };

    // encodings/debug

    /**
     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
     * * `<` : offset,
     * * `'` : markedOffset,
     * * `>` : limit,
     * * `|` : offset and limit,
     * * `[` : offset and markedOffset,
     * * `]` : markedOffset and limit,
     * * `!` : offset, markedOffset and limit
     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
     * @expose
     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
     */
    ByteBufferPrototype.toDebug = function(columns) {
        var i = -1,
            k = this.buffer.byteLength,
            b,
            hex = "",
            asc = "",
            out = "";
        while (i<k) {
            if (i !== -1) {
                b = this.view[i];
                if (b < 0x10) hex += "0"+b.toString(16).toUpperCase();
                else hex += b.toString(16).toUpperCase();
                if (columns) {
                    asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
                }
            }
            ++i;
            if (columns) {
                if (i > 0 && i % 16 === 0 && i !== k) {
                    while (hex.length < 3*16+3) hex += " ";
                    out += hex+asc+"\n";
                    hex = asc = "";
                }
            }
            if (i === this.offset && i === this.limit)
                hex += i === this.markedOffset ? "!" : "|";
            else if (i === this.offset)
                hex += i === this.markedOffset ? "[" : "<";
            else if (i === this.limit)
                hex += i === this.markedOffset ? "]" : ">";
            else
                hex += i === this.markedOffset ? "'" : (columns || (i !== 0 && i !== k) ? " " : "");
        }
        if (columns && hex !== " ") {
            while (hex.length < 3*16+3) hex += " ";
            out += hex+asc+"\n";
        }
        return columns ? out : hex;
    };

    /**
     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
     * @param {string} str Debug string to decode (not be generated with `columns = true`)
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     * @see ByteBuffer#toDebug
     */
    ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
        var k = str.length,
            bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);
        var i = 0, j = 0, ch, b,
            rs = false, // Require symbol next
            ho = false, hm = false, hl = false, // Already has offset, markedOffset, limit?
            fail = false;
        while (i<k) {
            switch (ch = str.charAt(i++)) {
                case '!':
                    if (!noAssert) {
                        if (ho || hm || hl) {
                            fail = true; break;
                        }
                        ho = hm = hl = true;
                    }
                    bb.offset = bb.markedOffset = bb.limit = j;
                    rs = false;
                    break;
                case '|':
                    if (!noAssert) {
                        if (ho || hl) {
                            fail = true; break;
                        }
                        ho = hl = true;
                    }
                    bb.offset = bb.limit = j;
                    rs = false;
                    break;
                case '[':
                    if (!noAssert) {
                        if (ho || hm) {
                            fail = true; break;
                        }
                        ho = hm = true;
                    }
                    bb.offset = bb.markedOffset = j;
                    rs = false;
                    break;
                case '<':
                    if (!noAssert) {
                        if (ho) {
                            fail = true; break;
                        }
                        ho = true;
                    }
                    bb.offset = j;
                    rs = false;
                    break;
                case ']':
                    if (!noAssert) {
                        if (hl || hm) {
                            fail = true; break;
                        }
                        hl = hm = true;
                    }
                    bb.limit = bb.markedOffset = j;
                    rs = false;
                    break;
                case '>':
                    if (!noAssert) {
                        if (hl) {
                            fail = true; break;
                        }
                        hl = true;
                    }
                    bb.limit = j;
                    rs = false;
                    break;
                case "'":
                    if (!noAssert) {
                        if (hm) {
                            fail = true; break;
                        }
                        hm = true;
                    }
                    bb.markedOffset = j;
                    rs = false;
                    break;
                case ' ':
                    rs = false;
                    break;
                default:
                    if (!noAssert) {
                        if (rs) {
                            fail = true; break;
                        }
                    }
                    b = parseInt(ch+str.charAt(i++), 16);
                    if (!noAssert) {
                        if (isNaN(b) || b < 0 || b > 255)
                            throw TypeError("Illegal str: Not a debug encoded string");
                    }
                    bb.view[j++] = b;
                    rs = true;
            }
            if (fail)
                throw TypeError("Illegal str: Invalid symbol at "+i);
        }
        if (!noAssert) {
            if (!ho || !hl)
                throw TypeError("Illegal str: Missing offset or limit");
            if (j<bb.buffer.byteLength)
                throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);
        }
        return bb;
    };

    // encodings/hex

    /**
     * Encodes this ByteBuffer's contents to a hex encoded string.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Hex encoded string
     * @expose
     */
    ByteBufferPrototype.toHex = function(begin, end) {
        begin = typeof begin === 'undefined' ? this.offset : begin;
        end = typeof end === 'undefined' ? this.limit : end;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var out = new Array(end - begin),
            b;
        while (begin < end) {
            b = this.view[begin++];
            if (b < 0x10)
                out.push("0", b.toString(16));
            else out.push(b.toString(16));
        }
        return out.join('');
    };

    /**
     * Decodes a hex encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
        if (!noAssert) {
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
            if (str.length % 2 !== 0)
                throw TypeError("Illegal str: Length not a multiple of 2");
        }
        var k = str.length,
            bb = new ByteBuffer((k / 2) | 0, littleEndian),
            b;
        for (var i=0, j=0; i<k; i+=2) {
            b = parseInt(str.substring(i, i+2), 16);
            if (!noAssert)
                if (!isFinite(b) || b < 0 || b > 255)
                    throw TypeError("Illegal str: Contains non-hex characters");
            bb.view[j++] = b;
        }
        bb.limit = j;
        return bb;
    };

    // utfx-embeddable

    /**
     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/utfx for details
     */
    var utfx = function() {
        "use strict";

        /**
         * utfx namespace.
         * @inner
         * @type {!Object.<string,*>}
         */
        var utfx = {};

        /**
         * Maximum valid code point.
         * @type {number}
         * @const
         */
        utfx.MAX_CODEPOINT = 0x10FFFF;

        /**
         * Encodes UTF8 code points to UTF8 bytes.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
         */
        utfx.encodeUTF8 = function(src, dst) {
            var cp = null;
            if (typeof src === 'number')
                cp = src,
                src = function() { return null; };
            while (cp !== null || (cp = src()) !== null) {
                if (cp < 0x80)
                    dst(cp&0x7F);
                else if (cp < 0x800)
                    dst(((cp>>6)&0x1F)|0xC0),
                    dst((cp&0x3F)|0x80);
                else if (cp < 0x10000)
                    dst(((cp>>12)&0x0F)|0xE0),
                    dst(((cp>>6)&0x3F)|0x80),
                    dst((cp&0x3F)|0x80);
                else
                    dst(((cp>>18)&0x07)|0xF0),
                    dst(((cp>>12)&0x3F)|0x80),
                    dst(((cp>>6)&0x3F)|0x80),
                    dst((cp&0x3F)|0x80);
                cp = null;
            }
        };

        /**
         * Decodes UTF8 bytes to UTF8 code points.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
         *  remaining bytes.
         */
        utfx.decodeUTF8 = function(src, dst) {
            var a, b, c, d, fail = function(b) {
                b = b.slice(0, b.indexOf(null));
                var err = Error(b.toString());
                err.name = "TruncatedError";
                err['bytes'] = b;
                throw err;
            };
            while ((a = src()) !== null) {
                if ((a&0x80) === 0)
                    dst(a);
                else if ((a&0xE0) === 0xC0)
                    ((b = src()) === null) && fail([a, b]),
                    dst(((a&0x1F)<<6) | (b&0x3F));
                else if ((a&0xF0) === 0xE0)
                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
                else if ((a&0xF8) === 0xF0)
                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
                else throw RangeError("Illegal starting byte: "+a);
            }
        };

        /**
         * Converts UTF16 characters to UTF8 code points.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
         *  point.
         */
        utfx.UTF16toUTF8 = function(src, dst) {
            var c1, c2 = null;
            while (true) {
                if ((c1 = c2 !== null ? c2 : src()) === null)
                    break;
                if (c1 >= 0xD800 && c1 <= 0xDFFF) {
                    if ((c2 = src()) !== null) {
                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
                            c2 = null; continue;
                        }
                    }
                }
                dst(c1);
            }
            if (c2 !== null) dst(c2);
        };

        /**
         * Converts UTF8 code points to UTF16 characters.
         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
         *  respectively `null` if there are no more code points left or a single numeric code point.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a code point is out of range
         */
        utfx.UTF8toUTF16 = function(src, dst) {
            var cp = null;
            if (typeof src === 'number')
                cp = src, src = function() { return null; };
            while (cp !== null || (cp = src()) !== null) {
                if (cp <= 0xFFFF)
                    dst(cp);
                else
                    cp -= 0x10000,
                    dst((cp>>10)+0xD800),
                    dst((cp%0x400)+0xDC00);
                cp = null;
            }
        };

        /**
         * Converts and encodes UTF16 characters to UTF8 bytes.
         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
         *  if there are no more characters left.
         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
         */
        utfx.encodeUTF16toUTF8 = function(src, dst) {
            utfx.UTF16toUTF8(src, function(cp) {
                utfx.encodeUTF8(cp, dst);
            });
        };

        /**
         * Decodes and converts UTF8 bytes to UTF16 characters.
         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
         *  are no more bytes left.
         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
         * @throws {RangeError} If a starting byte is invalid in UTF8
         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
         */
        utfx.decodeUTF8toUTF16 = function(src, dst) {
            utfx.decodeUTF8(src, function(cp) {
                utfx.UTF8toUTF16(cp, dst);
            });
        };

        /**
         * Calculates the byte length of an UTF8 code point.
         * @param {number} cp UTF8 code point
         * @returns {number} Byte length
         */
        utfx.calculateCodePoint = function(cp) {
            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
        };

        /**
         * Calculates the number of UTF8 bytes required to store UTF8 code points.
         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
         *  `null` if there are no more code points left.
         * @returns {number} The number of UTF8 bytes required
         */
        utfx.calculateUTF8 = function(src) {
            var cp, l=0;
            while ((cp = src()) !== null)
                l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
            return l;
        };

        /**
         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
         *  `null` if there are no more characters left.
         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
         */
        utfx.calculateUTF16asUTF8 = function(src) {
            var n=0, l=0;
            utfx.UTF16toUTF8(src, function(cp) {
                ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
            });
            return [n,l];
        };

        return utfx;
    }();

    // encodings/utf8

    /**
     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
     *  string.
     * @returns {string} Hex encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */
    ByteBufferPrototype.toUTF8 = function(begin, end) {
        if (typeof begin === 'undefined') begin = this.offset;
        if (typeof end === 'undefined') end = this.limit;
        if (!this.noAssert) {
            if (typeof begin !== 'number' || begin % 1 !== 0)
                throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== 'number' || end % 1 !== 0)
                throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
                throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
        }
        var sd; try {
            utfx.decodeUTF8toUTF16(function() {
                return begin < end ? this.view[begin++] : null;
            }.bind(this), sd = stringDestination());
        } catch (e) {
            if (begin !== end)
                throw RangeError("Illegal range: Truncated data, "+begin+" != "+end);
        }
        return sd();
    };

    /**
     * Decodes an UTF8 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */
    ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
        if (!noAssert)
            if (typeof str !== 'string')
                throw TypeError("Illegal str: Not a string");
        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
            i = 0;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
    };

    return ByteBuffer;
});

},{"long":33}],33:[function(require,module,exports){
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/Long.js for details
 */
(function(global) {
    "use strict";

    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @constructor
     */
    var Long = function(low, high, unsigned) {

        /**
         * The low 32 bits as a signed value.
         * @type {number}
         * @expose
         */
        this.low = low|0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         * @expose
         */
        this.high = high|0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         * @expose
         */
        this.unsigned = !!unsigned;
    };

    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * Tests if the specified object is a Long.
     * @param {*} obj Object
     * @returns {boolean}
     * @expose
     */
    Long.isLong = function(obj) {
        return (obj && obj instanceof Long) === true;
    };

    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */
    var UINT_CACHE = {};

    /**
     * Returns a Long representing the given 32 bit integer value.
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */
    Long.fromInt = function(value, unsigned) {
        var obj, cachedObj;
        if (!unsigned) {
            value = value | 0;
            if (-128 <= value && value < 128) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = new Long(value, value < 0 ? -1 : 0, false);
            if (-128 <= value && value < 128)
                INT_CACHE[value] = obj;
            return obj;
        } else {
            value = value >>> 0;
            if (0 <= value && value < 256) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);
            if (0 <= value && value < 256)
                UINT_CACHE[value] = obj;
            return obj;
        }
    };

    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */
    Long.fromNumber = function(value, unsigned) {
        unsigned = !!unsigned;
        if (isNaN(value) || !isFinite(value))
            return Long.ZERO;
        if (!unsigned && value <= -TWO_PWR_63_DBL)
            return Long.MIN_VALUE;
        if (!unsigned && value + 1 >= TWO_PWR_63_DBL)
            return Long.MAX_VALUE;
        if (unsigned && value >= TWO_PWR_64_DBL)
            return Long.MAX_UNSIGNED_VALUE;
        if (value < 0)
            return Long.fromNumber(-value, unsigned).negate();
        return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    };

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */
    Long.fromBits = function(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    };

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     * @expose
     */
    Long.fromString = function(str, unsigned, radix) {
        if (str.length === 0)
            throw Error('number format error: empty string');
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return Long.ZERO;
        if (typeof unsigned === 'number') // For goog.math.long compatibility
            radix = unsigned,
            unsigned = false;
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw Error('radix out of range: ' + radix);

        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('number format error: interior "-" character: ' + str);
        else if (p === 0)
            return Long.fromString(str.substring(1), unsigned, radix).negate();

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 8));

        var result = Long.ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = Long.fromNumber(Math.pow(radix, size));
                result = result.multiply(power).add(Long.fromNumber(value));
            } else {
                result = result.multiply(radixToPower);
                result = result.add(Long.fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    };

    /**
     * Converts the specified value to a Long.
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @returns {!Long}
     * @expose
     */
    Long.fromValue = function(val) {
        if (typeof val === 'number')
            return Long.fromNumber(val);
        if (typeof val === 'string')
            return Long.fromString(val);
        if (Long.isLong(val))
            return val;
        // Throws for not an object (undefined, null):
        return new Long(val.low, val.high, val.unsigned);
    };

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     * @const
     * @inner
     */
    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);

    /**
     * Signed zero.
     * @type {!Long}
     * @expose
     */
    Long.ZERO = Long.fromInt(0);

    /**
     * Unsigned zero.
     * @type {!Long}
     * @expose
     */
    Long.UZERO = Long.fromInt(0, true);

    /**
     * Signed one.
     * @type {!Long}
     * @expose
     */
    Long.ONE = Long.fromInt(1);

    /**
     * Unsigned one.
     * @type {!Long}
     * @expose
     */
    Long.UONE = Long.fromInt(1, true);

    /**
     * Signed negative one.
     * @type {!Long}
     * @expose
     */
    Long.NEG_ONE = Long.fromInt(-1);

    /**
     * Maximum signed value.
     * @type {!Long}
     * @expose
     */
    Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

    /**
     * Maximum unsigned value.
     * @type {!Long}
     * @expose
     */
    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

    /**
     * Minimum signed value.
     * @type {!Long}
     * @expose
     */
    Long.MIN_VALUE = Long.fromBits(0, 0x80000000|0, false);

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     * @expose
     */
    Long.prototype.toInt = function() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     * @expose
     */
    Long.prototype.toNumber = function() {
        if (this.unsigned) {
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        }
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     * @expose
     */
    Long.prototype.toString = function(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix out of range: ' + radix);
        if (this.isZero())
            return '0';
        var rem;
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.equals(Long.MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = Long.fromNumber(radix);
                var div = this.div(radixLong);
                rem = div.multiply(radixLong).subtract(this);
                return div.toString(radix) + rem.toInt().toString(radix);
            } else
                return '-' + this.negate().toString(radix);
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
        rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower),
                intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,
                digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
                return digits + result;
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };

    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     * @expose
     */
    Long.prototype.getHighBits = function() {
        return this.high;
    };

    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     * @expose
     */
    Long.prototype.getHighBitsUnsigned = function() {
        return this.high >>> 0;
    };

    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     * @expose
     */
    Long.prototype.getLowBits = function() {
        return this.low;
    };

    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     * @expose
     */
    Long.prototype.getLowBitsUnsigned = function() {
        return this.low >>> 0;
    };

    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     * @expose
     */
    Long.prototype.getNumBitsAbs = function() {
        if (this.isNegative()) // Unsigned Longs are never negative
            return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) != 0)
                break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };

    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     * @expose
     */
    Long.prototype.isZero = function() {
        return this.high === 0 && this.low === 0;
    };

    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     * @expose
     */
    Long.prototype.isNegative = function() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     * @expose
     */
    Long.prototype.isPositive = function() {
        return this.unsigned || this.high >= 0;
    };

    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     * @expose
     */
    Long.prototype.isOdd = function() {
        return (this.low & 1) === 1;
    };

    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     * @expose
     */
    Long.prototype.isEven = function() {
        return (this.low & 1) === 0;
    };

    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.equals = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };

    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.notEquals = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return !this.equals(other);
    };

    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.lessThan = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return this.compare(other) < 0;
    };

    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.lessThanOrEqual = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return this.compare(other) <= 0;
    };

    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.greaterThan = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return this.compare(other) > 0;
    };

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */
    Long.prototype.greaterThanOrEqual = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return this.compare(other) >= 0;
    };

    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     * @expose
     */
    Long.prototype.compare = function(other) {
        if (this.equals(other))
            return 0;
        var thisNeg = this.isNegative(),
            otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.subtract(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
    };

    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     * @expose
     */
    Long.prototype.negate = function() {
        if (!this.unsigned && this.equals(Long.MIN_VALUE))
            return Long.MIN_VALUE;
        return this.not().add(Long.ONE);
    };

    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     * @expose
     */
    Long.prototype.add = function(addend) {
        if (!Long.isLong(addend))
            addend = Long.fromValue(addend);

        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     * @expose
     */
    Long.prototype.subtract = function(subtrahend) {
        if (!Long.isLong(subtrahend))
            subtrahend = Long.fromValue(subtrahend);
        return this.add(subtrahend.negate());
    };

    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     * @expose
     */
    Long.prototype.multiply = function(multiplier) {
        if (this.isZero())
            return Long.ZERO;
        if (!Long.isLong(multiplier))
            multiplier = Long.fromValue(multiplier);
        if (multiplier.isZero())
            return Long.ZERO;
        if (this.equals(Long.MIN_VALUE))
            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (multiplier.equals(Long.MIN_VALUE))
            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;

        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.negate().multiply(multiplier.negate());
            else
                return this.negate().multiply(multiplier).negate();
        } else if (multiplier.isNegative())
            return this.multiply(multiplier.negate()).negate();

        // If both longs are small, use float multiplication
        if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24))
            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns this Long divided by the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     * @expose
     */
    Long.prototype.div = function(divisor) {
        if (!Long.isLong(divisor))
            divisor = Long.fromValue(divisor);
        if (divisor.isZero())
            throw(new Error('division by zero'));
        if (this.isZero())
            return this.unsigned ? Long.UZERO : Long.ZERO;
        var approx, rem, res;
        if (this.equals(Long.MIN_VALUE)) {
            if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE))
                return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.equals(Long.MIN_VALUE))
                return Long.ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shiftRight(1);
                approx = halfThis.div(divisor).shiftLeft(1);
                if (approx.equals(Long.ZERO)) {
                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
                } else {
                    rem = this.subtract(divisor.multiply(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.equals(Long.MIN_VALUE))
            return this.unsigned ? Long.UZERO : Long.ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.negate().div(divisor.negate());
            return this.negate().div(divisor).negate();
        } else if (divisor.isNegative())
            return this.div(divisor.negate()).negate();

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        res = Long.ZERO;
        rem = this;
        while (rem.greaterThanOrEqual(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48),

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
                approxRes = Long.fromNumber(approx),
                approxRem = approxRes.multiply(divisor);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
                approx -= delta;
                approxRes = Long.fromNumber(approx, this.unsigned);
                approxRem = approxRes.multiply(divisor);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = Long.ONE;

            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     * @expose
     */
    Long.prototype.modulo = function(divisor) {
        if (!Long.isLong(divisor))
            divisor = Long.fromValue(divisor);
        return this.subtract(this.div(divisor).multiply(divisor));
    };

    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     * @expose
     */
    Long.prototype.not = function() {
        return Long.fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */
    Long.prototype.and = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */
    Long.prototype.or = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */
    Long.prototype.xor = function(other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */
    Long.prototype.shiftLeft = function(numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);
    };

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */
    Long.prototype.shiftRight = function(numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */
    Long.prototype.shiftRightUnsigned = function(numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits === 32)
                return Long.fromBits(high, 0, this.unsigned);
            else
                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };

    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     * @expose
     */
    Long.prototype.toSigned = function() {
        if (!this.unsigned)
            return this;
        return new Long(this.low, this.high, false);
    };

    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     * @expose
     */
    Long.prototype.toUnsigned = function() {
        if (this.unsigned)
            return this;
        return new Long(this.low, this.high, true);
    };

    /* CommonJS */ if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports)
        module["exports"] = Long;
    /* AMD */ else if (typeof define === 'function' && define["amd"])
        define(function() { return Long; });
    /* Global */ else
        (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = Long;

})(this);

},{}],34:[function(require,module,exports){
(function (process){
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * @license ProtoBuf.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/ProtoBuf.js for details
 */
(function(global, factory) {

    /* AMD */ if (typeof define === 'function' && define["amd"])
        define(["ByteBuffer"], factory);
    /* CommonJS */ else if (typeof require === "function" && typeof module === "object" && module && module["exports"])
        module["exports"] = factory(require("bytebuffer"));
    /* Global */ else
        (global["dcodeIO"] = global["dcodeIO"] || {})["ProtoBuf"] = factory(global["dcodeIO"]["ByteBuffer"]);

})(this, function(ByteBuffer) {
    "use strict";

    /**
     * The ProtoBuf namespace.
     * @exports ProtoBuf
     * @namespace
     * @expose
     */
    var ProtoBuf = {};

    /**
     * @type {!function(new: ByteBuffer, ...[*])}
     * @expose
     */
    ProtoBuf.ByteBuffer = ByteBuffer;

    /**
     * @type {?function(new: Long, ...[*])}
     * @expose
     */
    ProtoBuf.Long = ByteBuffer.Long || null;

    /**
     * ProtoBuf.js version.
     * @type {string}
     * @const
     * @expose
     */
    ProtoBuf.VERSION = "4.0.0";

    /**
     * Wire types.
     * @type {Object.<string,number>}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES = {};

    /**
     * Varint wire type.
     * @type {number}
     * @expose
     */
    ProtoBuf.WIRE_TYPES.VARINT = 0;

    /**
     * Fixed 64 bits wire type.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES.BITS64 = 1;

    /**
     * Length delimited wire type.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES.LDELIM = 2;

    /**
     * Start group wire type.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES.STARTGROUP = 3;

    /**
     * End group wire type.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES.ENDGROUP = 4;

    /**
     * Fixed 32 bits wire type.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.WIRE_TYPES.BITS32 = 5;

    /**
     * Packable wire types.
     * @type {!Array.<number>}
     * @const
     * @expose
     */
    ProtoBuf.PACKABLE_WIRE_TYPES = [
        ProtoBuf.WIRE_TYPES.VARINT,
        ProtoBuf.WIRE_TYPES.BITS64,
        ProtoBuf.WIRE_TYPES.BITS32
    ];

    /**
     * Types.
     * @dict
     * @type {!Object.<string,{name: string, wireType: number, defaultValue: *}>}
     * @const
     * @expose
     */
    ProtoBuf.TYPES = {
        // According to the protobuf spec.
        "int32": {
            name: "int32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
        },
        "uint32": {
            name: "uint32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
        },
        "sint32": {
            name: "sint32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
        },
        "int64": {
            name: "int64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
        },
        "uint64": {
            name: "uint64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.UZERO : undefined
        },
        "sint64": {
            name: "sint64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
        },
        "bool": {
            name: "bool",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: false
        },
        "double": {
            name: "double",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue: 0
        },
        "string": {
            name: "string",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: ""
        },
        "bytes": {
            name: "bytes",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: null // overridden in the code, must be a unique instance
        },
        "fixed32": {
            name: "fixed32",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
        },
        "sfixed32": {
            name: "sfixed32",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
        },
        "fixed64": {
            name: "fixed64",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue:  ProtoBuf.Long ? ProtoBuf.Long.UZERO : undefined
        },
        "sfixed64": {
            name: "sfixed64",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
        },
        "float": {
            name: "float",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
        },
        "enum": {
            name: "enum",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
        },
        "message": {
            name: "message",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: null
        },
        "group": {
            name: "group",
            wireType: ProtoBuf.WIRE_TYPES.STARTGROUP,
            defaultValue: null
        }
    };

    /**
     * Valid map key types.
     * @type {!Array.<!Object.<string,{name: string, wireType: number, defaultValue: *}>>}
     * @const
     * @expose
     */
    ProtoBuf.MAP_KEY_TYPES = [
        ProtoBuf.TYPES["int32"],
        ProtoBuf.TYPES["sint32"],
        ProtoBuf.TYPES["sfixed32"],
        ProtoBuf.TYPES["uint32"],
        ProtoBuf.TYPES["fixed32"],
        ProtoBuf.TYPES["int64"],
        ProtoBuf.TYPES["sint64"],
        ProtoBuf.TYPES["sfixed64"],
        ProtoBuf.TYPES["uint64"],
        ProtoBuf.TYPES["fixed64"],
        ProtoBuf.TYPES["bool"],
        ProtoBuf.TYPES["string"],
        ProtoBuf.TYPES["bytes"]
    ];

    /**
     * Minimum field id.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.ID_MIN = 1;

    /**
     * Maximum field id.
     * @type {number}
     * @const
     * @expose
     */
    ProtoBuf.ID_MAX = 0x1FFFFFFF;

    /**
     * If set to `true`, field names will be converted from underscore notation to camel case. Defaults to `false`.
     *  Must be set prior to parsing.
     * @type {boolean}
     * @expose
     */
    ProtoBuf.convertFieldsToCamelCase = false;

    /**
     * By default, messages are populated with (setX, set_x) accessors for each field. This can be disabled by
     *  setting this to `false` prior to building messages.
     * @type {boolean}
     * @expose
     */
    ProtoBuf.populateAccessors = true;

    /**
     * By default, messages are populated with default values if a field is not present on the wire. To disable
     *  this behavior, set this setting to `false`.
     * @type {boolean}
     * @expose
     */
    ProtoBuf.populateDefaults = true;

    /**
     * @alias ProtoBuf.Util
     * @expose
     */
    ProtoBuf.Util = (function() {
        "use strict";

        /**
         * ProtoBuf utilities.
         * @exports ProtoBuf.Util
         * @namespace
         */
        var Util = {};

        /**
         * Flag if running in node or not.
         * @type {boolean}
         * @const
         * @expose
         */
        Util.IS_NODE = !!(
            // Feature detection causes packaging for the browser to fail or include
            // redundant modules.
            // * Works for browserify because node-process does not implement toString
            //   https://github.com/defunctzombie/node-process
            typeof process === 'object' &&
            process+'' === '[object process]'
        );

        /**
         * Constructs a XMLHttpRequest object.
         * @return {XMLHttpRequest}
         * @throws {Error} If XMLHttpRequest is not supported
         * @expose
         */
        Util.XHR = function() {
            // No dependencies please, ref: http://www.quirksmode.org/js/xmlhttp.html
            var XMLHttpFactories = [
                function () {return new XMLHttpRequest()},
                function () {return new ActiveXObject("Msxml2.XMLHTTP")},
                function () {return new ActiveXObject("Msxml3.XMLHTTP")},
                function () {return new ActiveXObject("Microsoft.XMLHTTP")}
            ];
            /** @type {?XMLHttpRequest} */
            var xhr = null;
            for (var i=0;i<XMLHttpFactories.length;i++) {
                try { xhr = XMLHttpFactories[i](); }
                catch (e) { continue; }
                break;
            }
            if (!xhr)
                throw Error("XMLHttpRequest is not supported");
            return xhr;
        };

        /**
         * Fetches a resource.
         * @param {string} path Resource path
         * @param {function(?string)=} callback Callback receiving the resource's contents. If omitted the resource will
         *   be fetched synchronously. If the request failed, contents will be null.
         * @return {?string|undefined} Resource contents if callback is omitted (null if the request failed), else undefined.
         * @expose
         */
        Util.fetch = function(path, callback) {
            if (callback && typeof callback != 'function')
                callback = null;
            if (Util.IS_NODE) {
                if (callback) {
                    require("fs").readFile(path, function(err, data) {
                        if (err)
                            callback(null);
                        else
                            callback(""+data);
                    });
                } else
                    try {
                        return require("fs").readFileSync(path);
                    } catch (e) {
                        return null;
                    }
            } else {
                var xhr = Util.XHR();
                xhr.open('GET', path, callback ? true : false);
                // xhr.setRequestHeader('User-Agent', 'XMLHTTP/1.0');
                xhr.setRequestHeader('Accept', 'text/plain');
                if (typeof xhr.overrideMimeType === 'function') xhr.overrideMimeType('text/plain');
                if (callback) {
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState != 4) return;
                        if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))
                            callback(xhr.responseText);
                        else
                            callback(null);
                    };
                    if (xhr.readyState == 4)
                        return;
                    xhr.send(null);
                } else {
                    xhr.send(null);
                    if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))
                        return xhr.responseText;
                    return null;
                }
            }
        };

        /**
         * Converts a string to camel case.
         * @param {string} str
         * @returns {string}
         * @expose
         */
        Util.toCamelCase = function(str) {
            return str.replace(/_([a-zA-Z])/g, function ($0, $1) {
                return $1.toUpperCase();
            });
        };

        return Util;
    })();

    /**
     * Language expressions.
     * @type {!Object.<string,string|!RegExp>}
     * @expose
     */
    ProtoBuf.Lang = {
        OPEN: "{",
        CLOSE: "}",
        OPTOPEN: "[",
        OPTCLOSE: "]",
        OPTEND: ",",
        EQUAL: "=",
        END: ";",
        COMMA: ",",
        STRINGOPEN: '"',
        STRINGCLOSE: '"',
        STRINGOPEN_SQ: "'",
        STRINGCLOSE_SQ: "'",
        COPTOPEN: '(',
        COPTCLOSE: ')',
        LT: '<',
        GT: '>',
        DELIM: /[\s\{\}=;\[\],'"\(\)<>]/g,
        // KEYWORD: /^(?:package|option|import|message|enum|extend|service|syntax|extensions|group)$/,
        RULE: /^(?:required|optional|repeated|map)$/,
        TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,
        NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,
        TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,
        TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,
        FQTYPEREF: /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/,
        NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/,
        NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,
        NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/,
        NUMBER_OCT: /^0[0-7]+$/,
        NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/,
        ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
        NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
        WHITESPACE: /\s/,
        STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,
        BOOL: /^(?:true|false)$/i
    };

    /**
     * @alias ProtoBuf.DotProto
     * @expose
     */
    ProtoBuf.DotProto = (function(ProtoBuf, Lang) {
        "use strict";

        /**
         * Utilities to parse .proto files.
         * @exports ProtoBuf.DotProto
         * @namespace
         */
        var DotProto = {};

        /**
         * Constructs a new Tokenizer.
         * @exports ProtoBuf.DotProto.Tokenizer
         * @class prototype tokenizer
         * @param {string} proto Proto to tokenize
         * @constructor
         */
        var Tokenizer = function(proto) {

            /**
             * Source to parse.
             * @type {string}
             * @expose
             */
            this.source = ""+proto; // In case it's a buffer

            /**
             * Current index.
             * @type {number}
             * @expose
             */
            this.index = 0;

            /**
             * Current line.
             * @type {number}
             * @expose
             */
            this.line = 1;

            /**
             * Stacked values.
             * @type {!Array.<string>}
             * @expose
             */
            this.stack = [];

            /**
             * Whether currently reading a string or not.
             * @type {boolean}
             * @expose
             */
            this.readingString = false;

            /**
             * Whatever character ends the string. Either a single or double quote character.
             * @type {string}
             * @expose
             */
            this.stringEndsWith = Lang.STRINGCLOSE;
        };

        /**
         * @alias ProtoBuf.DotProto.Tokenizer.prototype
         * @inner
         */
        var TokenizerPrototype = Tokenizer.prototype;

        /**
         * Reads a string beginning at the current index.
         * @return {string} The string
         * @throws {Error} If it's not a valid string
         * @private
         */
        TokenizerPrototype._readString = function() {
            Lang.STRING.lastIndex = this.index-1; // Include the open quote
            var match;
            if ((match = Lang.STRING.exec(this.source)) !== null) {
                var s = typeof match[1] !== 'undefined' ? match[1] : match[2];
                this.index = Lang.STRING.lastIndex;
                this.stack.push(this.stringEndsWith);
                return s;
            }
            throw Error("Unterminated string at line "+this.line+", index "+this.index);
        };

        /**
         * Gets the next token and advances by one.
         * @return {?string} Token or `null` on EOF
         * @throws {Error} If it's not a valid proto file
         * @expose
         */
        TokenizerPrototype.next = function() {
            if (this.stack.length > 0)
                return this.stack.shift();
            if (this.index >= this.source.length)
                return null; // No more tokens
            if (this.readingString) {
                this.readingString = false;
                return this._readString();
            }
            var repeat, last;
            do {
                repeat = false;
                // Strip white spaces
                while (Lang.WHITESPACE.test(last = this.source.charAt(this.index))) {
                    this.index++;
                    if (last === "\n")
                        this.line++;
                    if (this.index === this.source.length)
                        return null;
                }
                // Strip comments
                if (this.source.charAt(this.index) === '/') {
                    if (this.source.charAt(++this.index) === '/') { // Single line
                        while (this.source.charAt(this.index) !== "\n") {
                            this.index++;
                            if (this.index == this.source.length)
                                return null;
                        }
                        this.index++;
                        this.line++;
                        repeat = true;
                    } else if (this.source.charAt(this.index) === '*') { /* Block */
                        last = '';
                        while (last+(last=this.source.charAt(this.index)) !== '*/') {
                            this.index++;
                            if (last === "\n")
                                this.line++;
                            if (this.index === this.source.length)
                                return null;
                        }
                        this.index++;
                        repeat = true;
                    } else
                        throw Error("Unterminated comment at line "+this.line+": /"+this.source.charAt(this.index));
                }
            } while (repeat);
            if (this.index === this.source.length) return null;

            // Read the next token
            var end = this.index;
            Lang.DELIM.lastIndex = 0;
            var delim = Lang.DELIM.test(this.source.charAt(end));
            if (!delim) {
                ++end;
                while(end < this.source.length && !Lang.DELIM.test(this.source.charAt(end)))
                    end++;
            } else
                ++end;
            var token = this.source.substring(this.index, this.index = end);
            if (token === Lang.STRINGOPEN)
                this.readingString = true,
                this.stringEndsWith = Lang.STRINGCLOSE;
            else if (token === Lang.STRINGOPEN_SQ)
                this.readingString = true,
                this.stringEndsWith = Lang.STRINGCLOSE_SQ;
            return token;
        };

        /**
         * Peeks for the next token.
         * @return {?string} Token or `null` on EOF
         * @throws {Error} If it's not a valid proto file
         * @expose
         */
        TokenizerPrototype.peek = function() {
            if (this.stack.length === 0) {
                var token = this.next();
                if (token === null)
                    return null;
                this.stack.push(token);
            }
            return this.stack[0];
        };

        /**
         * Returns a string representation of this object.
         * @return {string} String representation as of "Tokenizer(index/length)"
         * @expose
         */
        TokenizerPrototype.toString = function() {
            return "Tokenizer("+this.index+"/"+this.source.length+" at line "+this.line+")";
        };

        /**
         * @alias ProtoBuf.DotProto.Tokenizer
         * @expose
         */
        DotProto.Tokenizer = Tokenizer;

        /**
         * Constructs a new Parser.
         * @exports ProtoBuf.DotProto.Parser
         * @class prototype parser
         * @param {string} proto Protocol source
         * @constructor
         */
        var Parser = function(proto) {

            /**
             * Tokenizer.
             * @type {ProtoBuf.DotProto.Tokenizer}
             * @expose
             */
            this.tn = new Tokenizer(proto);
        };

        /**
         * @alias ProtoBuf.DotProto.Parser.prototype
         * @inner
         */
        var ParserPrototype = Parser.prototype;

        /**
         * Runs the parser.
         * @return {{package: string|null, messages: Array.<object>, enums: Array.<object>, imports: Array.<string>, options: object<string,*>}}
         * @throws {Error} If the source cannot be parsed
         * @expose
         */
        ParserPrototype.parse = function() {
            var topLevel = {
                "name": "[ROOT]", // temporary
                "package": null,
                "messages": [],
                "enums": [],
                "imports": [],
                "options": {},
                "services": []
            };
            var token, head = true;
            while(token = this.tn.next()) {
                switch (token) {
                    case 'package':
                        if (!head || topLevel["package"] !== null)
                            throw Error("Unexpected package at line "+this.tn.line);
                        topLevel["package"] = this._parsePackage(token);
                        break;
                    case 'import':
                        if (!head)
                            throw Error("Unexpected import at line "+this.tn.line);
                        topLevel.imports.push(this._parseImport(token));
                        break;
                    case 'message':
                        this._parseMessage(topLevel, null, token);
                        head = false;
                        break;
                    case 'enum':
                        this._parseEnum(topLevel, token);
                        head = false;
                        break;
                    case 'option':
                        this._parseOption(topLevel, token);
                        break;
                    case 'service':
                        this._parseService(topLevel, token);
                        break;
                    case 'extend':
                        this._parseExtend(topLevel, token);
                        break;
                    case 'syntax':
                        topLevel["syntax"] = this._parseSyntax(topLevel);
                        break;
                    default:
                        throw Error("Unexpected token at line "+this.tn.line+": "+token);
                }
            }
            delete topLevel["name"];
            return topLevel;
        };

        /**
         * Parses a number value.
         * @param {string} val Number value to parse
         * @return {number} Number
         * @throws {Error} If the number value is invalid
         * @private
         */
        ParserPrototype._parseNumber = function(val) {
            var sign = 1;
            if (val.charAt(0) == '-')
                sign = -1,
                val = val.substring(1);
            if (Lang.NUMBER_DEC.test(val))
                return sign*parseInt(val, 10);
            else if (Lang.NUMBER_HEX.test(val))
                return sign*parseInt(val.substring(2), 16);
            else if (Lang.NUMBER_OCT.test(val))
                return sign*parseInt(val.substring(1), 8);
            else if (Lang.NUMBER_FLT.test(val)) {
                if(val === 'inf')
                    return sign*Infinity;
                else if (val === 'nan')
                    return NaN;
                else
                    return sign*parseFloat(val);
            }

            throw Error("Illegal number at line "+this.tn.line+": "+(sign < 0 ? '-' : '')+val);
        };

        /**
         * Parses a (possibly multiline) string.
         * @returns {string}
         * @private
         */
        ParserPrototype._parseString = function() {
            var value = "", token, delim;
            do {
                delim = this.tn.next();
                value += this.tn.next();
                token = this.tn.next();
                if (token !== delim)
                    throw Error("Illegal end of string at line "+this.tn.line+": "+token);
                token = this.tn.peek();
            } while (token === Lang.STRINGOPEN || token === Lang.STRINGOPEN_SQ);
            return value;
        };

        /**
         * Parses an ID value.
         * @param {string} val ID value to parse
         * @param {boolean=} neg Whether the ID may be negative, defaults to `false`
         * @returns {number} ID
         * @throws {Error} If the ID value is invalid
         * @private
         */
        ParserPrototype._parseId = function(val, neg) {
            var id = -1;
            var sign = 1;
            if (val.charAt(0) == '-')
                sign = -1,
                val = val.substring(1);
            if (Lang.NUMBER_DEC.test(val))
                id = parseInt(val);
            else if (Lang.NUMBER_HEX.test(val))
                id = parseInt(val.substring(2), 16);
            else if (Lang.NUMBER_OCT.test(val))
                id = parseInt(val.substring(1), 8);
            else
                throw Error("Illegal id at line "+this.tn.line+": "+(sign < 0 ? '-' : '')+val);
            id = (sign*id)|0; // Force to 32bit
            if (!neg && id < 0)
                throw Error("Illegal id at line "+this.tn.line+": "+(sign < 0 ? '-' : '')+val);
            return id;
        };

        /**
         * Parses the package definition.
         * @param {string} token Initial token
         * @return {string} Package name
         * @throws {Error} If the package definition cannot be parsed
         * @private
         */
        ParserPrototype._parsePackage = function(token) {
            token = this.tn.next();
            if (!Lang.TYPEREF.test(token))
                throw Error("Illegal package name at line "+this.tn.line+": "+token);
            var pkg = token;
            token = this.tn.next();
            if (token != Lang.END)
                throw Error("Illegal end of package at line "+this.tn.line+": "+token);
            return pkg;
        };

        /**
         * Parses an import definition.
         * @param {string} token Initial token
         * @return {string} Import file name
         * @throws {Error} If the import definition cannot be parsed
         * @private
         */
        ParserPrototype._parseImport = function(token) {
            token = this.tn.peek();
            if (token === "public")
                this.tn.next(),
                token = this.tn.peek();
            if (token !== Lang.STRINGOPEN && token !== Lang.STRINGOPEN_SQ)
                throw Error("Illegal start of import at line "+this.tn.line+": "+token);
            var imported = this._parseString();
            token = this.tn.next();
            if (token !== Lang.END)
                throw Error("Illegal end of import at line "+this.tn.line+": "+token);
            return imported;
        };

        /**
         * Parses a namespace option.
         * @param {Object} parent Parent definition
         * @param {string} token Initial token
         * @throws {Error} If the option cannot be parsed
         * @private
         */
        ParserPrototype._parseOption = function(parent, token) {
            token = this.tn.next();
            var custom = false;
            if (token == Lang.COPTOPEN)
                custom = true,
                token = this.tn.next();
            if (!Lang.TYPEREF.test(token))
                // we can allow options of the form google.protobuf.* since they will just get ignored anyways
                if (!/google\.protobuf\./.test(token))
                    throw Error("Illegal option name in message "+parent.name+" at line "+this.tn.line+": "+token);
            var name = token;
            token = this.tn.next();
            if (custom) { // (my_method_option).foo, (my_method_option), some_method_option, (foo.my_option).bar
                if (token !== Lang.COPTCLOSE)
                    throw Error("Illegal end in message "+parent.name+", option "+name+" at line "+this.tn.line+": "+token);
                name = '('+name+')';
                token = this.tn.next();
                if (Lang.FQTYPEREF.test(token))
                    name += token,
                    token = this.tn.next();
            }
            if (token !== Lang.EQUAL)
                throw Error("Illegal operator in message "+parent.name+", option "+name+" at line "+this.tn.line+": "+token);
            var value;
            token = this.tn.peek();
            if (token === Lang.STRINGOPEN || token === Lang.STRINGOPEN_SQ)
                value = this._parseString();
            else {
                this.tn.next();
                if (Lang.NUMBER.test(token))
                    value = this._parseNumber(token, true);
                else if (Lang.BOOL.test(token))
                    value = token === 'true';
                else if (Lang.TYPEREF.test(token))
                    value = token;
                else
                    throw Error("Illegal option value in message "+parent.name+", option "+name+" at line "+this.tn.line+": "+token);
            }
            token = this.tn.next();
            if (token !== Lang.END)
                throw Error("Illegal end of option in message "+parent.name+", option "+name+" at line "+this.tn.line+": "+token);
            parent["options"][name] = value;
        };

        /**
         * Parses an ignored statement of the form ['keyword', ..., ';'].
         * @param {Object} parent Parent definition
         * @param {string} keyword Initial token
         * @throws {Error} If the directive cannot be parsed
         * @private
         */
        ParserPrototype._parseIgnoredStatement = function(parent, keyword) {
            var token;
            do {
                token = this.tn.next();
                if (token === null)
                    throw Error("Unexpected EOF in "+parent.name+", "+keyword+" at line "+this.tn.line);
                if (token === Lang.END)
                    break;
            } while (true);
        };

        /**
         * Parses a service definition.
         * @param {Object} parent Parent definition
         * @param {string} token Initial token
         * @throws {Error} If the service cannot be parsed
         * @private
         */
        ParserPrototype._parseService = function(parent, token) {
            token = this.tn.next();
            if (!Lang.NAME.test(token))
                throw Error("Illegal service name at line "+this.tn.line+": "+token);
            var name = token;
            var svc = {
                "name": name,
                "rpc": {},
                "options": {}
            };
            token = this.tn.next();
            if (token !== Lang.OPEN)
                throw Error("Illegal start of service "+name+" at line "+this.tn.line+": "+token);
            do {
                token = this.tn.next();
                if (token === "option")
                    this._parseOption(svc, token);
                else if (token === 'rpc')
                    this._parseServiceRPC(svc, token);
                else if (token !== Lang.CLOSE)
                    throw Error("Illegal type of service "+name+" at line "+this.tn.line+": "+token);
            } while (token !== Lang.CLOSE);
            parent["services"].push(svc);
        };

        /**
         * Parses a RPC service definition of the form ['rpc', name, (request), 'returns', (response)].
         * @param {Object} svc Parent definition
         * @param {string} token Initial token
         * @private
         */
        ParserPrototype._parseServiceRPC = function(svc, token) {
            var type = token;
            token = this.tn.next();
            if (!Lang.NAME.test(token))
                throw Error("Illegal method name in service "+svc["name"]+" at line "+this.tn.line+": "+token);
            var name = token;
            var method = {
                "request": null,
                "response": null,
                "request_stream": false,
                "response_stream": false,
                "options": {}
            };
            token = this.tn.next();
            if (token !== Lang.COPTOPEN)
                throw Error("Illegal start of request type in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token.toLowerCase() === "stream") {
              method["request_stream"] = true;
              token = this.tn.next();
            }
            if (!Lang.TYPEREF.test(token))
                throw Error("Illegal request type in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            method["request"] = token;
            token = this.tn.next();
            if (token != Lang.COPTCLOSE)
                throw Error("Illegal end of request type in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token.toLowerCase() !== "returns")
                throw Error("Illegal delimiter in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token != Lang.COPTOPEN)
                throw Error("Illegal start of response type in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token.toLowerCase() === "stream") {
              method["response_stream"] = true;
              token = this.tn.next();
            }
            method["response"] = token;
            token = this.tn.next();
            if (token !== Lang.COPTCLOSE)
                throw Error("Illegal end of response type in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token === Lang.OPEN) {
                do {
                    token = this.tn.next();
                    if (token === 'option')
                        this._parseOption(method, token); // <- will fail for the custom-options example
                    else if (token !== Lang.CLOSE)
                        throw Error("Illegal start of option inservice "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
                } while (token !== Lang.CLOSE);
                if (this.tn.peek() === Lang.END)
                    this.tn.next();
            } else if (token !== Lang.END)
                throw Error("Illegal delimiter in service "+svc["name"]+"#"+name+" at line "+this.tn.line+": "+token);
            if (typeof svc[type] === 'undefined')
                svc[type] = {};
            svc[type][name] = method;
        };

        /**
         * Parses a message definition.
         * @param {Object} parent Parent definition
         * @param {Object} fld Field definition if this is a group, otherwise `null`
         * @param {string} token First token
         * @return {Object}
         * @throws {Error} If the message cannot be parsed
         * @private
         */
        ParserPrototype._parseMessage = function(parent, fld, token) {
            /** @dict */
            var msg = {}; // Note: At some point we might want to exclude the parser, so we need a dict.
            var isGroup = token === "group";
            token = this.tn.next();
            if (!Lang.NAME.test(token))
                throw Error("Illegal "+(isGroup ? "group" : "message")+" name"+(parent ? " in message "+parent["name"] : "")+" at line "+this.tn.line+": "+token);
            msg["name"] = token;
            if (isGroup) {
                token = this.tn.next();
                if (token !== Lang.EQUAL)
                    throw Error("Illegal id assignment after group "+msg.name+" at line "+this.tn.line+": "+token);
                token = this.tn.next();
                try {
                    fld["id"] = this._parseId(token);
                } catch (e) {
                    throw Error("Illegal field id value for group "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                }
                msg["isGroup"] = true;
            }
            msg["fields"] = []; // Note: Using arrays to support also browser that cannot preserve order of object keys.
            msg["enums"] = [];
            msg["messages"] = [];
            msg["options"] = {};
            msg["oneofs"] = {};
            token = this.tn.next();
            if (token === Lang.OPTOPEN && fld)
                this._parseFieldOptions(msg, fld, token),
                token = this.tn.next();
            if (token !== Lang.OPEN)
                throw Error("Illegal start of "+(isGroup ? "group" : "message")+" "+msg.name+" at line "+this.tn.line+": "+token);
            // msg["extensions"] = undefined
            do {
                token = this.tn.next();
                if (token === Lang.CLOSE) {
                    token = this.tn.peek();
                    if (token === Lang.END)
                        this.tn.next();
                    break;
                } else if (Lang.RULE.test(token))
                    this._parseMessageField(msg, token);
                else if (token === "oneof")
                    this._parseMessageOneOf(msg, token);
                else if (token === "enum")
                    this._parseEnum(msg, token);
                else if (token === "message")
                    this._parseMessage(msg, null, token);
                else if (token === "option")
                    this._parseOption(msg, token);
                else if (token === "extensions")
                    msg["extensions"] = this._parseExtensions(msg, token);
                else if (token === "extend")
                    this._parseExtend(msg, token);
                else if (Lang.TYPEREF.test(token))
                    this._parseMessageField(msg, "optional", token);
                else
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);
            } while (true);
            parent["messages"].push(msg);
            return msg;
        };

        /**
         * Parses a message field.
         * @param {Object} msg Message definition
         * @param {string} token Initial token
         * @param {string=} nextToken Next token, if any
         * @returns {!Object} Field descriptor
         * @throws {Error} If the message field cannot be parsed
         * @private
         */
        ParserPrototype._parseMessageField = function(msg, token, nextToken) {
            /** @dict */
            var fld = {}, grp = null;
            fld["rule"] = token;
            /** @dict */
            fld["options"] = {};
            token = typeof nextToken !== 'undefined' ? nextToken : this.tn.next();
            if (fld["rule"] === "map") {
                if (token !== Lang.LT)  // <
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);
                token = this.tn.next();
                if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);
                fld["keytype"] = token;

                token = this.tn.next();
                if (token !== Lang.COMMA)
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);

                token = this.tn.next();
                if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);
                fld["type"] = token;

                token = this.tn.next();
                if (token !== Lang.GT)  // >
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);

                token = this.tn.next();
                if (!Lang.NAME.test(token))
                    throw Error("Illegal token in message "+msg.name+" at line "+this.tn.line+": "+token);
                fld["name"] = token;

                token = this.tn.next();
                if (token !== Lang.EQUAL)
                    throw Error("Illegal token in field "+msg.name+"#"+fld.name+" at line "+this.line+": "+token);
                token = this.tn.next();
                try {
                    fld["id"] = this._parseId(token);
                } catch (e) {
                    throw Error("Illegal field id in message "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                }

                token = this.tn.next();
                if (token === Lang.OPTOPEN) {
                    this._parseFieldOptions(msg, fld, token);
                    token = this.tn.next();
                }
                if (token !== Lang.END)
                    throw Error("Illegal delimiter in message "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
            } else if (token === "group") {
                // "A [legacy] group simply combines a nested message type and a field into a single declaration. In your
                // code, you can treat this message just as if it had a Result type field called result (the latter name is
                // converted to lower-case so that it does not conflict with the former)."
                grp = this._parseMessage(msg, fld, token);
                if (!/^[A-Z]/.test(grp["name"]))
                    throw Error('Group names must start with a capital letter');
                fld["type"] = grp["name"];
                fld["name"] = grp["name"].toLowerCase();
                token = this.tn.peek();
                if (token === Lang.END)
                    this.tn.next();
            } else {
                if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                    throw Error("Illegal field type in message "+msg.name+" at line "+this.tn.line+": "+token);
                fld["type"] = token;
                token = this.tn.next();
                if (!Lang.NAME.test(token))
                    throw Error("Illegal field name in message "+msg.name+" at line "+this.tn.line+": "+token);
                fld["name"] = token;
                token = this.tn.next();
                if (token !== Lang.EQUAL)
                    throw Error("Illegal token in field "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                token = this.tn.next();
                try {
                    fld["id"] = this._parseId(token);
                } catch (e) {
                    throw Error("Illegal field id in message "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                }
                token = this.tn.next();
                if (token === Lang.OPTOPEN)
                    this._parseFieldOptions(msg, fld, token),
                    token = this.tn.next();
                if (token !== Lang.END)
                    throw Error("Illegal delimiter in message "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
            }
            msg["fields"].push(fld);
            return fld;
        };

        /**
         * Parses a message oneof.
         * @param {Object} msg Message definition
         * @param {string} token Initial token
         * @throws {Error} If the message oneof cannot be parsed
         * @private
         */
        ParserPrototype._parseMessageOneOf = function(msg, token) {
            token = this.tn.next();
            if (!Lang.NAME.test(token))
                throw Error("Illegal oneof name in message "+msg.name+" at line "+this.tn.line+": "+token);
            var name = token,
                fld;
            var fields = [];
            token = this.tn.next();
            if (token !== Lang.OPEN)
                throw Error("Illegal start of oneof "+name+" at line "+this.tn.line+": "+token);
            while (this.tn.peek() !== Lang.CLOSE) {
                fld = this._parseMessageField(msg, "optional");
                fld["oneof"] = name;
                fields.push(fld["id"]);
            }
            this.tn.next();
            msg["oneofs"][name] = fields;
        };

        /**
         * Parses a set of field option definitions.
         * @param {Object} msg Message definition
         * @param {Object} fld Field definition
         * @param {string} token Initial token
         * @throws {Error} If the message field options cannot be parsed
         * @private
         */
        ParserPrototype._parseFieldOptions = function(msg, fld, token) {
            var first = true;
            do {
                token = this.tn.next();
                if (token === Lang.OPTCLOSE)
                    break;
                else if (token === Lang.OPTEND) {
                    if (first)
                        throw Error("Illegal start of options in message "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                    token = this.tn.next();
                }
                this._parseFieldOption(msg, fld, token);
                first = false;
            } while (true);
        };

        /**
         * Parses a single field option.
         * @param {Object} msg Message definition
         * @param {Object} fld Field definition
         * @param {string} token Initial token
         * @throws {Error} If the mesage field option cannot be parsed
         * @private
         */
        ParserPrototype._parseFieldOption = function(msg, fld, token) {
            var custom = false;
            if (token === Lang.COPTOPEN)
                token = this.tn.next(),
                custom = true;
            if (!Lang.TYPEREF.test(token))
                throw Error("Illegal field option in "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
            var name = token;
            token = this.tn.next();
            if (custom) {
                if (token !== Lang.COPTCLOSE)
                    throw Error("Illegal delimiter in "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
                name = '('+name+')';
                token = this.tn.next();
                if (Lang.FQTYPEREF.test(token))
                    name += token,
                    token = this.tn.next();
            }
            if (token !== Lang.EQUAL)
                throw Error("Illegal token in "+msg.name+"#"+fld.name+" at line "+this.tn.line+": "+token);
            var value;
            token = this.tn.peek();
            if (token === Lang.STRINGOPEN || token === Lang.STRINGOPEN_SQ) {
                value = this._parseString();
            } else if (Lang.NUMBER.test(token, true))
                value = this._parseNumber(this.tn.next(), true);
            else if (Lang.BOOL.test(token))
                value = this.tn.next().toLowerCase() === 'true';
            else if (Lang.TYPEREF.test(token))
                value = this.tn.next(); // TODO: Resolve?
            else
                throw Error("Illegal value in message "+msg.name+"#"+fld.name+", option "+name+" at line "+this.tn.line+": "+token);
            fld["options"][name] = value;
        };

        /**
         * Parses an enum.
         * @param {Object} msg Message definition
         * @param {string} token Initial token
         * @throws {Error} If the enum cannot be parsed
         * @private
         */
        ParserPrototype._parseEnum = function(msg, token) {
            /** @dict */
            var enm = {};
            token = this.tn.next();
            if (!Lang.NAME.test(token))
                throw Error("Illegal enum name in message "+msg.name+" at line "+this.tn.line+": "+token);
            enm["name"] = token;
            token = this.tn.next();
            if (token !== Lang.OPEN)
                throw Error("Illegal start of enum "+enm.name+" at line "+this.tn.line+": "+token);
            enm["values"] = [];
            enm["options"] = {};
            do {
                token = this.tn.next();
                if (token === Lang.CLOSE) {
                    token = this.tn.peek();
                    if (token === Lang.END)
                        this.tn.next();
                    break;
                }
                if (token == 'option')
                    this._parseOption(enm, token);
                else {
                    if (!Lang.NAME.test(token))
                        throw Error("Illegal name in enum "+enm.name+" at line "+this.tn.line+": "+token);
                    this._parseEnumValue(enm, token);
                }
            } while (true);
            msg["enums"].push(enm);
        };

        /**
         * Parses an enum value.
         * @param {Object} enm Enum definition
         * @param {string} token Initial token
         * @throws {Error} If the enum value cannot be parsed
         * @private
         */
        ParserPrototype._parseEnumValue = function(enm, token) {
            /** @dict */
            var val = {};
            val["name"] = token;
            token = this.tn.next();
            if (token !== Lang.EQUAL)
                throw Error("Illegal token in enum "+enm.name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            try {
                val["id"] = this._parseId(token, true);
            } catch (e) {
                throw Error("Illegal id in enum "+enm.name+" at line "+this.tn.line+": "+token);
            }
            enm["values"].push(val);
            token = this.tn.next();
            if (token === Lang.OPTOPEN) {
                var opt = { 'options' : {} }; // TODO: Actually expose them somehow.
                this._parseFieldOptions(enm, opt, token);
                token = this.tn.next();
            }
            if (token !== Lang.END)
                throw Error("Illegal delimiter in enum "+enm.name+" at line "+this.tn.line+": "+token);
        };

        /**
         * Parses an extensions statement.
         * @param {Object} msg Message object
         * @param {string} token Initial token
         * @throws {Error} If the extensions statement cannot be parsed
         * @private
         */
        ParserPrototype._parseExtensions = function(msg, token) {
            /** @type {Array.<number>} */
            var range = [];
            token = this.tn.next();
            if (token === "min") // FIXME: Does the official implementation support this?
                range.push(ProtoBuf.ID_MIN);
            else if (token === "max")
                range.push(ProtoBuf.ID_MAX);
            else
                range.push(this._parseNumber(token));
            token = this.tn.next();
            if (token !== 'to')
                throw Error("Illegal extensions delimiter in message "+msg.name+" at line "+this.tn.line+": "+token);
            token = this.tn.next();
            if (token === "min")
                range.push(ProtoBuf.ID_MIN);
            else if (token === "max")
                range.push(ProtoBuf.ID_MAX);
            else
                range.push(this._parseNumber(token));
            token = this.tn.next();
            if (token !== Lang.END)
                throw Error("Illegal extensions delimiter in message "+msg.name+" at line "+this.tn.line+": "+token);
            return range;
        };

        /**
         * Parses an extend block.
         * @param {Object} parent Parent object
         * @param {string} token Initial token
         * @throws {Error} If the extend block cannot be parsed
         * @private
         */
        ParserPrototype._parseExtend = function(parent, token) {
            token = this.tn.next();
            if (!Lang.TYPEREF.test(token))
                throw Error("Illegal message name at line "+this.tn.line+": "+token);
            /** @dict */
            var ext = {};
            ext["ref"] = token;
            ext["fields"] = [];
            token = this.tn.next();
            if (token !== Lang.OPEN)
                throw Error("Illegal start of extend "+ext.name+" at line "+this.tn.line+": "+token);
            do {
                token = this.tn.next();
                if (token === Lang.CLOSE) {
                    token = this.tn.peek();
                    if (token == Lang.END)
                        this.tn.next();
                    break;
                } else if (Lang.RULE.test(token))
                    this._parseMessageField(ext, token);
                else if (Lang.TYPEREF.test(token))
                    this._parseMessageField(ext, "optional", token);
                else
                    throw Error("Illegal token in extend "+ext.name+" at line "+this.tn.line+": "+token);
            } while (true);
            parent["messages"].push(ext);
            return ext;
        };

        /**
         * Parses a syntax statement.
         * @param {Object} parent Parent object
         * @throws {Error} If the syntax statement cannot be parsed
         * @private
         */
        ParserPrototype._parseSyntax = function(parent) {
            var token = this.tn.next();
            if (token !== Lang.EQUAL)
                throw Error("Illegal token at line "+this.tn.line+": "+token);
            token = this.tn.peek();
            if (token !== Lang.STRINGOPEN && token !== Lang.STRINGOPEN_SQ)
                throw Error("Illegal token at line "+this.tn.line+": "+token);
            var syntax_str = this._parseString();
            token = this.tn.next();
            if (token !== Lang.END)
                throw Error("Illegal token at line "+this.tn.line+": "+token);
            return syntax_str;
        };

        /**
         * Returns a string representation of this object.
         * @returns {string} String representation as of "Parser"
         */
        ParserPrototype.toString = function() {
            return "Parser";
        };

        /**
         * @alias ProtoBuf.DotProto.Parser
         * @expose
         */
        DotProto.Parser = Parser;

        return DotProto;

    })(ProtoBuf, ProtoBuf.Lang);

    /**
     * @alias ProtoBuf.Reflect
     * @expose
     */
    ProtoBuf.Reflect = (function(ProtoBuf) {
        "use strict";

        /**
         * Reflection types.
         * @exports ProtoBuf.Reflect
         * @namespace
         */
        var Reflect = {};

        /**
         * Constructs a Reflect base class.
         * @exports ProtoBuf.Reflect.T
         * @constructor
         * @abstract
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {?ProtoBuf.Reflect.T} parent Parent object
         * @param {string} name Object name
         */
        var T = function(builder, parent, name) {

            /**
             * Builder reference.
             * @type {!ProtoBuf.Builder}
             * @expose
             */
            this.builder = builder;

            /**
             * Parent object.
             * @type {?ProtoBuf.Reflect.T}
             * @expose
             */
            this.parent = parent;

            /**
             * Object name in namespace.
             * @type {string}
             * @expose
             */
            this.name = name;

            /**
             * Fully qualified class name
             * @type {string}
             * @expose
             */
            this.className;
        };

        /**
         * @alias ProtoBuf.Reflect.T.prototype
         * @inner
         */
        var TPrototype = T.prototype;

        /**
         * Returns the fully qualified name of this object.
         * @returns {string} Fully qualified name as of ".PATH.TO.THIS"
         * @expose
         */
        TPrototype.fqn = function() {
            var name = this.name,
                ptr = this;
            do {
                ptr = ptr.parent;
                if (ptr == null)
                    break;
                name = ptr.name+"."+name;
            } while (true);
            return name;
        };

        /**
         * Returns a string representation of this Reflect object (its fully qualified name).
         * @param {boolean=} includeClass Set to true to include the class name. Defaults to false.
         * @return String representation
         * @expose
         */
        TPrototype.toString = function(includeClass) {
            return (includeClass ? this.className + " " : "") + this.fqn();
        };

        /**
         * Builds this type.
         * @throws {Error} If this type cannot be built directly
         * @expose
         */
        TPrototype.build = function() {
            throw Error(this.toString(true)+" cannot be built directly");
        };

        /**
         * @alias ProtoBuf.Reflect.T
         * @expose
         */
        Reflect.T = T;

        /**
         * Constructs a new Namespace.
         * @exports ProtoBuf.Reflect.Namespace
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {?ProtoBuf.Reflect.Namespace} parent Namespace parent
         * @param {string} name Namespace name
         * @param {Object.<string,*>=} options Namespace options
         * @param {string?} syntax The syntax level of this definition (e.g., proto3)
         * @constructor
         * @extends ProtoBuf.Reflect.T
         */
        var Namespace = function(builder, parent, name, options, syntax) {
            T.call(this, builder, parent, name);

            /**
             * @override
             */
            this.className = "Namespace";

            /**
             * Children inside the namespace.
             * @type {!Array.<ProtoBuf.Reflect.T>}
             */
            this.children = [];

            /**
             * Options.
             * @type {!Object.<string, *>}
             */
            this.options = options || {};

            /**
             * Syntax level (e.g., proto2 or proto3).
             * @type {!string}
             */
            this.syntax = syntax || "proto2";
        };

        /**
         * @alias ProtoBuf.Reflect.Namespace.prototype
         * @inner
         */
        var NamespacePrototype = Namespace.prototype = Object.create(T.prototype);

        /**
         * Returns an array of the namespace's children.
         * @param {ProtoBuf.Reflect.T=} type Filter type (returns instances of this type only). Defaults to null (all children).
         * @return {Array.<ProtoBuf.Reflect.T>}
         * @expose
         */
        NamespacePrototype.getChildren = function(type) {
            type = type || null;
            if (type == null)
                return this.children.slice();
            var children = [];
            for (var i=0, k=this.children.length; i<k; ++i)
                if (this.children[i] instanceof type)
                    children.push(this.children[i]);
            return children;
        };

        /**
         * Adds a child to the namespace.
         * @param {ProtoBuf.Reflect.T} child Child
         * @throws {Error} If the child cannot be added (duplicate)
         * @expose
         */
        NamespacePrototype.addChild = function(child) {
            var other;
            if (other = this.getChild(child.name)) {
                // Try to revert camelcase transformation on collision
                if (other instanceof Message.Field && other.name !== other.originalName && this.getChild(other.originalName) === null)
                    other.name = other.originalName; // Revert previous first (effectively keeps both originals)
                else if (child instanceof Message.Field && child.name !== child.originalName && this.getChild(child.originalName) === null)
                    child.name = child.originalName;
                else
                    throw Error("Duplicate name in namespace "+this.toString(true)+": "+child.name);
            }
            this.children.push(child);
        };

        /**
         * Gets a child by its name or id.
         * @param {string|number} nameOrId Child name or id
         * @return {?ProtoBuf.Reflect.T} The child or null if not found
         * @expose
         */
        NamespacePrototype.getChild = function(nameOrId) {
            var key = typeof nameOrId === 'number' ? 'id' : 'name';
            for (var i=0, k=this.children.length; i<k; ++i)
                if (this.children[i][key] === nameOrId)
                    return this.children[i];
            return null;
        };

        /**
         * Resolves a reflect object inside of this namespace.
         * @param {string|!Array.<string>} qn Qualified name to resolve
         * @param {boolean=} excludeNonNamespace Excludes non-namespace types, defaults to `false`
         * @return {?ProtoBuf.Reflect.Namespace} The resolved type or null if not found
         * @expose
         */
        NamespacePrototype.resolve = function(qn, excludeNonNamespace) {
            var part = typeof qn === 'string' ? qn.split(".") : qn,
                ptr = this,
                i = 0;
            if (part[i] === "") { // Fully qualified name, e.g. ".My.Message'
                while (ptr.parent !== null)
                    ptr = ptr.parent;
                i++;
            }
            var child;
            do {
                do {
                    if (!(ptr instanceof Reflect.Namespace)) {
                        ptr = null;
                        break;
                    }
                    child = ptr.getChild(part[i]);
                    if (!child || !(child instanceof Reflect.T) || (excludeNonNamespace && !(child instanceof Reflect.Namespace))) {
                        ptr = null;
                        break;
                    }
                    ptr = child; i++;
                } while (i < part.length);
                if (ptr != null)
                    break; // Found
                // Else search the parent
                if (this.parent !== null)
                    return this.parent.resolve(qn, excludeNonNamespace);
            } while (ptr != null);
            return ptr;
        };

        /**
         * Determines the shortest qualified name of the specified type, if any, relative to this namespace.
         * @param {!ProtoBuf.Reflect.T} t Reflection type
         * @returns {string} The shortest qualified name or, if there is none, the fqn
         * @expose
         */
        NamespacePrototype.qn = function(t) {
            var part = [], ptr = t;
            do {
                part.unshift(ptr.name);
                ptr = ptr.parent;
            } while (ptr !== null);
            for (var len=1; len <= part.length; len++) {
                var qn = part.slice(part.length-len);
                if (t === this.resolve(qn, t instanceof Reflect.Namespace))
                    return qn.join(".");
            }
            return t.fqn();
        };

        /**
         * Builds the namespace and returns the runtime counterpart.
         * @return {Object.<string,Function|Object>} Runtime namespace
         * @expose
         */
        NamespacePrototype.build = function() {
            /** @dict */
            var ns = {};
            var children = this.children;
            for (var i=0, k=children.length, child; i<k; ++i) {
                child = children[i];
                if (child instanceof Namespace)
                    ns[child.name] = child.build();
            }
            if (Object.defineProperty)
                Object.defineProperty(ns, "$options", { "value": this.buildOpt() });
            return ns;
        };

        /**
         * Builds the namespace's '$options' property.
         * @return {Object.<string,*>}
         */
        NamespacePrototype.buildOpt = function() {
            var opt = {},
                keys = Object.keys(this.options);
            for (var i=0, k=keys.length; i<k; ++i) {
                var key = keys[i],
                    val = this.options[keys[i]];
                // TODO: Options are not resolved, yet.
                // if (val instanceof Namespace) {
                //     opt[key] = val.build();
                // } else {
                opt[key] = val;
                // }
            }
            return opt;
        };

        /**
         * Gets the value assigned to the option with the specified name.
         * @param {string=} name Returns the option value if specified, otherwise all options are returned.
         * @return {*|Object.<string,*>}null} Option value or NULL if there is no such option
         */
        NamespacePrototype.getOption = function(name) {
            if (typeof name === 'undefined')
                return this.options;
            return typeof this.options[name] !== 'undefined' ? this.options[name] : null;
        };

        /**
         * @alias ProtoBuf.Reflect.Namespace
         * @expose
         */
        Reflect.Namespace = Namespace;

        /**
         * Constructs a new Element implementation that checks and converts values for a
         * particular field type, as appropriate.
         *
         * An Element represents a single value: either the value of a singular field,
         * or a value contained in one entry of a repeated field or map field. This
         * class does not implement these higher-level concepts; it only encapsulates
         * the low-level typechecking and conversion.
         *
         * @exports ProtoBuf.Reflect.Element
         * @param {{name: string, wireType: number}} type Resolved data type
         * @param {ProtoBuf.Reflect.T|null} resolvedType Resolved type, if relevant
         * (e.g. submessage field).
         * @param {boolean} isMapKey Is this element a Map key? The value will be
         * converted to string form if so.
         * @param {string} syntax Syntax level of defining message type, e.g.,
         * proto2 or proto3.
         * @constructor
         */
        var Element = function(type, resolvedType, isMapKey, syntax) {

            /**
             * Element type, as a string (e.g., int32).
             * @type {{name: string, wireType: number}}
             */
            this.type = type;

            /**
             * Element type reference to submessage or enum definition, if needed.
             * @type {ProtoBuf.Reflect.T|null}
             */
            this.resolvedType = resolvedType;

            /**
             * Element is a map key.
             * @type {boolean}
             */
            this.isMapKey = isMapKey;

            /**
             * Syntax level of defining message type, e.g., proto2 or proto3.
             * @type {string}
             */
            this.syntax = syntax;

            if (isMapKey && ProtoBuf.MAP_KEY_TYPES.indexOf(type) < 0)
                throw Error("Invalid map key type: " + type.name);
        };

        var ElementPrototype = Element.prototype;

        /**
         * Obtains a (new) default value for the specified type.
         * @param type {string|{name: string, wireType: number}} Field type
         * @returns {*} Default value
         * @inner
         */
        function mkDefault(type) {
            if (typeof type === 'string')
                type = ProtoBuf.TYPES[type];
            if (typeof type.defaultValue === 'undefined')
                throw Error("default value for type "+type.name+" is not supported");
            if (type == ProtoBuf.TYPES["bytes"])
                return new ByteBuffer(0);
            return type.defaultValue;
        }

        /**
         * Returns the default value for this field in proto3.
         * @function
         * @param type {string|{name: string, wireType: number}} the field type
         * @returns {*} Default value
         */
        ElementPrototype.defaultFieldValue = mkDefault;

        /**
         * Makes a Long from a value.
         * @param {{low: number, high: number, unsigned: boolean}|string|number} value Value
         * @param {boolean=} unsigned Whether unsigned or not, defaults to reuse it from Long-like objects or to signed for
         *  strings and numbers
         * @returns {!Long}
         * @throws {Error} If the value cannot be converted to a Long
         * @inner
         */
        function mkLong(value, unsigned) {
            if (value && typeof value.low === 'number' && typeof value.high === 'number' && typeof value.unsigned === 'boolean'
                && value.low === value.low && value.high === value.high)
                return new ProtoBuf.Long(value.low, value.high, typeof unsigned === 'undefined' ? value.unsigned : unsigned);
            if (typeof value === 'string')
                return ProtoBuf.Long.fromString(value, unsigned || false, 10);
            if (typeof value === 'number')
                return ProtoBuf.Long.fromNumber(value, unsigned || false);
            throw Error("not convertible to Long");
        }

        /**
         * Checks if the given value can be set for an element of this type (singular
         * field or one element of a repeated field or map).
         * @param {*} value Value to check
         * @return {*} Verified, maybe adjusted, value
         * @throws {Error} If the value cannot be verified for this element slot
         * @expose
         */
        ElementPrototype.verifyValue = function(value) {
            var fail = function(val, msg) {
                throw Error("Illegal value for "+this.toString(true)+" of type "+this.type.name+": "+val+" ("+msg+")");
            }.bind(this);
            switch (this.type) {
                // Signed 32bit
                case ProtoBuf.TYPES["int32"]:
                case ProtoBuf.TYPES["sint32"]:
                case ProtoBuf.TYPES["sfixed32"]:
                    // Account for !NaN: value === value
                    if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                        fail(typeof value, "not an integer");
                    return value > 4294967295 ? value | 0 : value;

                // Unsigned 32bit
                case ProtoBuf.TYPES["uint32"]:
                case ProtoBuf.TYPES["fixed32"]:
                    if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                        fail(typeof value, "not an integer");
                    return value < 0 ? value >>> 0 : value;

                // Signed 64bit
                case ProtoBuf.TYPES["int64"]:
                case ProtoBuf.TYPES["sint64"]:
                case ProtoBuf.TYPES["sfixed64"]: {
                    if (ProtoBuf.Long)
                        try {
                            return mkLong(value, false);
                        } catch (e) {
                            fail(typeof value, e.message);
                        }
                    else
                        fail(typeof value, "requires Long.js");
                }

                // Unsigned 64bit
                case ProtoBuf.TYPES["uint64"]:
                case ProtoBuf.TYPES["fixed64"]: {
                    if (ProtoBuf.Long)
                        try {
                            return mkLong(value, true);
                        } catch (e) {
                            fail(typeof value, e.message);
                        }
                    else
                        fail(typeof value, "requires Long.js");
                }

                // Bool
                case ProtoBuf.TYPES["bool"]:
                    if (typeof value !== 'boolean')
                        fail(typeof value, "not a boolean");
                    return value;

                // Float
                case ProtoBuf.TYPES["float"]:
                case ProtoBuf.TYPES["double"]:
                    if (typeof value !== 'number')
                        fail(typeof value, "not a number");
                    return value;

                // Length-delimited string
                case ProtoBuf.TYPES["string"]:
                    if (typeof value !== 'string' && !(value && value instanceof String))
                        fail(typeof value, "not a string");
                    return ""+value; // Convert String object to string

                // Length-delimited bytes
                case ProtoBuf.TYPES["bytes"]:
                    if (ByteBuffer.isByteBuffer(value))
                        return value;
                    return ByteBuffer.wrap(value, "base64");

                // Constant enum value
                case ProtoBuf.TYPES["enum"]: {
                    var values = this.resolvedType.getChildren(ProtoBuf.Reflect.Enum.Value);
                    for (i=0; i<values.length; i++)
                        if (values[i].name == value)
                            return values[i].id;
                        else if (values[i].id == value)
                            return values[i].id;

                    if (this.syntax === 'proto3') {
                        // proto3: just make sure it's an integer.
                        if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                            fail(typeof value, "not an integer");
                        if (value > 4294967295 || value < 0)
                            fail(typeof value, "not in range for uint32")
                        return value;
                    } else {
                        // proto2 requires enum values to be valid.
                        fail(value, "not a valid enum value");
                    }
                }
                // Embedded message
                case ProtoBuf.TYPES["group"]:
                case ProtoBuf.TYPES["message"]: {
                    if (!value || typeof value !== 'object')
                        fail(typeof value, "object expected");
                    if (value instanceof this.resolvedType.clazz)
                        return value;
                    if (value instanceof ProtoBuf.Builder.Message) {
                        // Mismatched type: Convert to object (see: https://github.com/dcodeIO/ProtoBuf.js/issues/180)
                        var obj = {};
                        for (var i in value)
                            if (value.hasOwnProperty(i))
                                obj[i] = value[i];
                        value = obj;
                    }
                    // Else let's try to construct one from a key-value object
                    return new (this.resolvedType.clazz)(value); // May throw for a hundred of reasons
                }
            }

            // We should never end here
            throw Error("[INTERNAL] Illegal value for "+this.toString(true)+": "+value+" (undefined type "+this.type+")");
        };

        /**
         * Calculates the byte length of an element on the wire.
         * @param {number} id Field number
         * @param {*} value Field value
         * @returns {number} Byte length
         * @throws {Error} If the value cannot be calculated
         * @expose
         */
        ElementPrototype.calculateLength = function(id, value) {
            if (value === null) return 0; // Nothing to encode
            // Tag has already been written
            var n;
            switch (this.type) {
                case ProtoBuf.TYPES["int32"]:
                    return value < 0 ? ByteBuffer.calculateVarint64(value) : ByteBuffer.calculateVarint32(value);
                case ProtoBuf.TYPES["uint32"]:
                    return ByteBuffer.calculateVarint32(value);
                case ProtoBuf.TYPES["sint32"]:
                    return ByteBuffer.calculateVarint32(ByteBuffer.zigZagEncode32(value));
                case ProtoBuf.TYPES["fixed32"]:
                case ProtoBuf.TYPES["sfixed32"]:
                case ProtoBuf.TYPES["float"]:
                    return 4;
                case ProtoBuf.TYPES["int64"]:
                case ProtoBuf.TYPES["uint64"]:
                    return ByteBuffer.calculateVarint64(value);
                case ProtoBuf.TYPES["sint64"]:
                    return ByteBuffer.calculateVarint64(ByteBuffer.zigZagEncode64(value));
                case ProtoBuf.TYPES["fixed64"]:
                case ProtoBuf.TYPES["sfixed64"]:
                    return 8;
                case ProtoBuf.TYPES["bool"]:
                    return 1;
                case ProtoBuf.TYPES["enum"]:
                    return ByteBuffer.calculateVarint32(value);
                case ProtoBuf.TYPES["double"]:
                    return 8;
                case ProtoBuf.TYPES["string"]:
                    n = ByteBuffer.calculateUTF8Bytes(value);
                    return ByteBuffer.calculateVarint32(n) + n;
                case ProtoBuf.TYPES["bytes"]:
                    if (value.remaining() < 0)
                        throw Error("Illegal value for "+this.toString(true)+": "+value.remaining()+" bytes remaining");
                    return ByteBuffer.calculateVarint32(value.remaining()) + value.remaining();
                case ProtoBuf.TYPES["message"]:
                    n = this.resolvedType.calculate(value);
                    return ByteBuffer.calculateVarint32(n) + n;
                case ProtoBuf.TYPES["group"]:
                    n = this.resolvedType.calculate(value);
                    return n + ByteBuffer.calculateVarint32((id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);
            }
            // We should never end here
            throw Error("[INTERNAL] Illegal value to encode in "+this.toString(true)+": "+value+" (unknown type)");
        };

        /**
         * Encodes a value to the specified buffer. Does not encode the key.
         * @param {number} id Field number
         * @param {*} value Field value
         * @param {ByteBuffer} buffer ByteBuffer to encode to
         * @return {ByteBuffer} The ByteBuffer for chaining
         * @throws {Error} If the value cannot be encoded
         * @expose
         */
        ElementPrototype.encodeValue = function(id, value, buffer) {
            if (value === null) return buffer; // Nothing to encode
            // Tag has already been written

            switch (this.type) {
                // 32bit signed varint
                case ProtoBuf.TYPES["int32"]:
                    // "If you use int32 or int64 as the type for a negative number, the resulting varint is always ten bytes
                    // long – it is, effectively, treated like a very large unsigned integer." (see #122)
                    if (value < 0)
                        buffer.writeVarint64(value);
                    else
                        buffer.writeVarint32(value);
                    break;

                // 32bit unsigned varint
                case ProtoBuf.TYPES["uint32"]:
                    buffer.writeVarint32(value);
                    break;

                // 32bit varint zig-zag
                case ProtoBuf.TYPES["sint32"]:
                    buffer.writeVarint32ZigZag(value);
                    break;

                // Fixed unsigned 32bit
                case ProtoBuf.TYPES["fixed32"]:
                    buffer.writeUint32(value);
                    break;

                // Fixed signed 32bit
                case ProtoBuf.TYPES["sfixed32"]:
                    buffer.writeInt32(value);
                    break;

                // 64bit varint as-is
                case ProtoBuf.TYPES["int64"]:
                case ProtoBuf.TYPES["uint64"]:
                    buffer.writeVarint64(value); // throws
                    break;

                // 64bit varint zig-zag
                case ProtoBuf.TYPES["sint64"]:
                    buffer.writeVarint64ZigZag(value); // throws
                    break;

                // Fixed unsigned 64bit
                case ProtoBuf.TYPES["fixed64"]:
                    buffer.writeUint64(value); // throws
                    break;

                // Fixed signed 64bit
                case ProtoBuf.TYPES["sfixed64"]:
                    buffer.writeInt64(value); // throws
                    break;

                // Bool
                case ProtoBuf.TYPES["bool"]:
                    if (typeof value === 'string')
                        buffer.writeVarint32(value.toLowerCase() === 'false' ? 0 : !!value);
                    else
                        buffer.writeVarint32(value ? 1 : 0);
                    break;

                // Constant enum value
                case ProtoBuf.TYPES["enum"]:
                    buffer.writeVarint32(value);
                    break;

                // 32bit float
                case ProtoBuf.TYPES["float"]:
                    buffer.writeFloat32(value);
                    break;

                // 64bit float
                case ProtoBuf.TYPES["double"]:
                    buffer.writeFloat64(value);
                    break;

                // Length-delimited string
                case ProtoBuf.TYPES["string"]:
                    buffer.writeVString(value);
                    break;

                // Length-delimited bytes
                case ProtoBuf.TYPES["bytes"]:
                    if (value.remaining() < 0)
                        throw Error("Illegal value for "+this.toString(true)+": "+value.remaining()+" bytes remaining");
                    var prevOffset = value.offset;
                    buffer.writeVarint32(value.remaining());
                    buffer.append(value);
                    value.offset = prevOffset;
                    break;

                // Embedded message
                case ProtoBuf.TYPES["message"]:
                    var bb = new ByteBuffer().LE();
                    this.resolvedType.encode(value, bb);
                    buffer.writeVarint32(bb.offset);
                    buffer.append(bb.flip());
                    break;

                // Legacy group
                case ProtoBuf.TYPES["group"]:
                    this.resolvedType.encode(value, buffer);
                    buffer.writeVarint32((id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);
                    break;

                default:
                    // We should never end here
                    throw Error("[INTERNAL] Illegal value to encode in "+this.toString(true)+": "+value+" (unknown type)");
            }
            return buffer;
        };

        /**
         * Decode one element value from the specified buffer.
         * @param {ByteBuffer} buffer ByteBuffer to decode from
         * @param {number} wireType The field wire type
         * @param {number} id The field number
         * @return {*} Decoded value
         * @throws {Error} If the field cannot be decoded
         * @expose
         */
        ElementPrototype.decode = function(buffer, wireType, id) {
            if (wireType != this.type.wireType)
                throw Error("Unexpected wire type for element");

            var value, nBytes;
            switch (this.type) {
                // 32bit signed varint
                case ProtoBuf.TYPES["int32"]:
                    return buffer.readVarint32() | 0;

                // 32bit unsigned varint
                case ProtoBuf.TYPES["uint32"]:
                    return buffer.readVarint32() >>> 0;

                // 32bit signed varint zig-zag
                case ProtoBuf.TYPES["sint32"]:
                    return buffer.readVarint32ZigZag() | 0;

                // Fixed 32bit unsigned
                case ProtoBuf.TYPES["fixed32"]:
                    return buffer.readUint32() >>> 0;

                case ProtoBuf.TYPES["sfixed32"]:
                    return buffer.readInt32() | 0;

                // 64bit signed varint
                case ProtoBuf.TYPES["int64"]:
                    return buffer.readVarint64();

                // 64bit unsigned varint
                case ProtoBuf.TYPES["uint64"]:
                    return buffer.readVarint64().toUnsigned();

                // 64bit signed varint zig-zag
                case ProtoBuf.TYPES["sint64"]:
                    return buffer.readVarint64ZigZag();

                // Fixed 64bit unsigned
                case ProtoBuf.TYPES["fixed64"]:
                    return buffer.readUint64();

                // Fixed 64bit signed
                case ProtoBuf.TYPES["sfixed64"]:
                    return buffer.readInt64();

                // Bool varint
                case ProtoBuf.TYPES["bool"]:
                    return !!buffer.readVarint32();

                // Constant enum value (varint)
                case ProtoBuf.TYPES["enum"]:
                    // The following Builder.Message#set will already throw
                    return buffer.readVarint32();

                // 32bit float
                case ProtoBuf.TYPES["float"]:
                    return buffer.readFloat();

                // 64bit float
                case ProtoBuf.TYPES["double"]:
                    return buffer.readDouble();

                // Length-delimited string
                case ProtoBuf.TYPES["string"]:
                    return buffer.readVString();

                // Length-delimited bytes
                case ProtoBuf.TYPES["bytes"]: {
                    nBytes = buffer.readVarint32();
                    if (buffer.remaining() < nBytes)
                        throw Error("Illegal number of bytes for "+this.toString(true)+": "+nBytes+" required but got only "+buffer.remaining());
                    value = buffer.clone(); // Offset already set
                    value.limit = value.offset+nBytes;
                    buffer.offset += nBytes;
                    return value;
                }

                // Length-delimited embedded message
                case ProtoBuf.TYPES["message"]: {
                    nBytes = buffer.readVarint32();
                    return this.resolvedType.decode(buffer, nBytes);
                }

                // Legacy group
                case ProtoBuf.TYPES["group"]:
                    return this.resolvedType.decode(buffer, -1, id);
            }

            // We should never end here
            throw Error("[INTERNAL] Illegal decode type");
        };

        /**
         * Converts a value from a string to the canonical element type.
         *
         * Legal only when isMapKey is true.
         *
         * @param {string} str The string value
         * @returns {*} The value
         */
        ElementPrototype.valueFromString = function(str) {
            if (!this.isMapKey) {
                throw Error("valueFromString() called on non-map-key element");
            }

            switch (this.type) {
                case ProtoBuf.TYPES["int32"]:
                case ProtoBuf.TYPES["sint32"]:
                case ProtoBuf.TYPES["sfixed32"]:
                case ProtoBuf.TYPES["uint32"]:
                case ProtoBuf.TYPES["fixed32"]:
                    return this.verifyValue(parseInt(str));

                case ProtoBuf.TYPES["int64"]:
                case ProtoBuf.TYPES["sint64"]:
                case ProtoBuf.TYPES["sfixed64"]:
                case ProtoBuf.TYPES["uint64"]:
                case ProtoBuf.TYPES["fixed64"]:
                      // Long-based fields support conversions from string already.
                      return this.verifyValue(str);

                case ProtoBuf.TYPES["bool"]:
                      return str === "true";

                case ProtoBuf.TYPES["string"]:
                      return this.verifyValue(str);

                case ProtoBuf.TYPES["bytes"]:
                      return ByteBuffer.fromBinary(str);
            }
        };

        /**
         * Converts a value from the canonical element type to a string.
         *
         * It should be the case that `valueFromString(valueToString(val))` returns
         * a value equivalent to `verifyValue(val)` for every legal value of `val`
         * according to this element type.
         *
         * This may be used when the element must be stored or used as a string,
         * e.g., as a map key on an Object.
         *
         * Legal only when isMapKey is true.
         *
         * @param {*} val The value
         * @returns {string} The string form of the value.
         */
        ElementPrototype.valueToString = function(value) {
            if (!this.isMapKey) {
                throw Error("valueToString() called on non-map-key element");
            }

            if (this.type === ProtoBuf.TYPES["bytes"]) {
                return value.toString("binary");
            } else {
                return value.toString();
            }
        };

        /**
         * @alias ProtoBuf.Reflect.Element
         * @expose
         */
        Reflect.Element = Element;

        /**
         * Constructs a new Message.
         * @exports ProtoBuf.Reflect.Message
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Namespace} parent Parent message or namespace
         * @param {string} name Message name
         * @param {Object.<string,*>=} options Message options
         * @param {boolean=} isGroup `true` if this is a legacy group
         * @param {string?} syntax The syntax level of this definition (e.g., proto3)
         * @constructor
         * @extends ProtoBuf.Reflect.Namespace
         */
        var Message = function(builder, parent, name, options, isGroup, syntax) {
            Namespace.call(this, builder, parent, name, options, syntax);

            /**
             * @override
             */
            this.className = "Message";

            /**
             * Extensions range.
             * @type {!Array.<number>}
             * @expose
             */
            this.extensions = [ProtoBuf.ID_MIN, ProtoBuf.ID_MAX];

            /**
             * Runtime message class.
             * @type {?function(new:ProtoBuf.Builder.Message)}
             * @expose
             */
            this.clazz = null;

            /**
             * Whether this is a legacy group or not.
             * @type {boolean}
             * @expose
             */
            this.isGroup = !!isGroup;

            // The following cached collections are used to efficiently iterate over or look up fields when decoding.

            /**
             * Cached fields.
             * @type {?Array.<!ProtoBuf.Reflect.Message.Field>}
             * @private
             */
            this._fields = null;

            /**
             * Cached fields by id.
             * @type {?Object.<number,!ProtoBuf.Reflect.Message.Field>}
             * @private
             */
            this._fieldsById = null;

            /**
             * Cached fields by name.
             * @type {?Object.<string,!ProtoBuf.Reflect.Message.Field>}
             * @private
             */
            this._fieldsByName = null;
        };

        /**
         * @alias ProtoBuf.Reflect.Message.prototype
         * @inner
         */
        var MessagePrototype = Message.prototype = Object.create(Namespace.prototype);

        /**
         * Builds the message and returns the runtime counterpart, which is a fully functional class.
         * @see ProtoBuf.Builder.Message
         * @param {boolean=} rebuild Whether to rebuild or not, defaults to false
         * @return {ProtoBuf.Reflect.Message} Message class
         * @throws {Error} If the message cannot be built
         * @expose
         */
        MessagePrototype.build = function(rebuild) {
            if (this.clazz && !rebuild)
                return this.clazz;

            // Create the runtime Message class in its own scope
            var clazz = (function(ProtoBuf, T) {

                var fields = T.getChildren(ProtoBuf.Reflect.Message.Field),
                    oneofs = T.getChildren(ProtoBuf.Reflect.Message.OneOf);

                /**
                 * Constructs a new runtime Message.
                 * @name ProtoBuf.Builder.Message
                 * @class Barebone of all runtime messages.
                 * @param {!Object.<string,*>|string} values Preset values
                 * @param {...string} var_args
                 * @constructor
                 * @throws {Error} If the message cannot be created
                 */
                var Message = function(values, var_args) {
                    ProtoBuf.Builder.Message.call(this);

                    // Create virtual oneof properties
                    for (var i=0, k=oneofs.length; i<k; ++i)
                        this[oneofs[i].name] = null;
                    // Create fields and set default values
                    for (i=0, k=fields.length; i<k; ++i) {
                        var field = fields[i];
                        this[field.name] =
                            field.repeated ? [] :
                            (field.map ? new ProtoBuf.Map(field) : null);
                        if ((field.required || T.syntax === 'proto3') &&
                            field.defaultValue !== null)
                            this[field.name] = field.defaultValue;
                    }

                    if (arguments.length > 0) {
                        var value;
                        // Set field values from a values object
                        if (arguments.length === 1 && values !== null && typeof values === 'object' &&
                            /* not _another_ Message */ (typeof values.encode !== 'function' || values instanceof Message) &&
                            /* not a repeated field */ !Array.isArray(values) &&
                            /* not a Map */ !(values instanceof ProtoBuf.Map) &&
                            /* not a ByteBuffer */ !ByteBuffer.isByteBuffer(values) &&
                            /* not an ArrayBuffer */ !(values instanceof ArrayBuffer) &&
                            /* not a Long */ !(ProtoBuf.Long && values instanceof ProtoBuf.Long)) {
                            this.$set(values);
                        } else // Set field values from arguments, in declaration order
                            for (i=0, k=arguments.length; i<k; ++i)
                                if (typeof (value = arguments[i]) !== 'undefined')
                                    this.$set(fields[i].name, value); // May throw
                    }
                };

                /**
                 * @alias ProtoBuf.Builder.Message.prototype
                 * @inner
                 */
                var MessagePrototype = Message.prototype = Object.create(ProtoBuf.Builder.Message.prototype);

                /**
                 * Adds a value to a repeated field.
                 * @name ProtoBuf.Builder.Message#add
                 * @function
                 * @param {string} key Field name
                 * @param {*} value Value to add
                 * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)
                 * @returns {!ProtoBuf.Builder.Message} this
                 * @throws {Error} If the value cannot be added
                 * @expose
                 */
                MessagePrototype.add = function(key, value, noAssert) {
                    var field = T._fieldsByName[key];
                    if (!noAssert) {
                        if (!field)
                            throw Error(this+"#"+key+" is undefined");
                        if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                            throw Error(this+"#"+key+" is not a field: "+field.toString(true)); // May throw if it's an enum or embedded message
                        if (!field.repeated)
                            throw Error(this+"#"+key+" is not a repeated field");
                        value = field.verifyValue(value, true);
                    }
                    if (this[key] === null)
                        this[key] = [];
                    this[key].push(value);
                    return this;
                };

                /**
                 * Adds a value to a repeated field. This is an alias for {@link ProtoBuf.Builder.Message#add}.
                 * @name ProtoBuf.Builder.Message#$add
                 * @function
                 * @param {string} key Field name
                 * @param {*} value Value to add
                 * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)
                 * @returns {!ProtoBuf.Builder.Message} this
                 * @throws {Error} If the value cannot be added
                 * @expose
                 */
                MessagePrototype.$add = MessagePrototype.add;

                /**
                 * Sets a field's value.
                 * @name ProtoBuf.Builder.Message#set
                 * @function
                 * @param {string|!Object.<string,*>} keyOrObj String key or plain object holding multiple values
                 * @param {(*|boolean)=} value Value to set if key is a string, otherwise omitted
                 * @param {boolean=} noAssert Whether to not assert for an actual field / proper value type, defaults to `false`
                 * @returns {!ProtoBuf.Builder.Message} this
                 * @throws {Error} If the value cannot be set
                 * @expose
                 */
                MessagePrototype.set = function(keyOrObj, value, noAssert) {
                    if (keyOrObj && typeof keyOrObj === 'object') {
                        noAssert = value;
                        for (var ikey in keyOrObj)
                            if (keyOrObj.hasOwnProperty(ikey) && typeof (value = keyOrObj[ikey]) !== 'undefined')
                                this.$set(ikey, value, noAssert);
                        return this;
                    }
                    var field = T._fieldsByName[keyOrObj];
                    if (!noAssert) {
                        if (!field)
                            throw Error(this+"#"+keyOrObj+" is not a field: undefined");
                        if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                            throw Error(this+"#"+keyOrObj+" is not a field: "+field.toString(true));
                        this[field.name] = (value = field.verifyValue(value)); // May throw
                    } else
                        this[keyOrObj] = value;
                    if (field && field.oneof) {
                        if (value !== null) {
                            if (this[field.oneof.name] !== null)
                                this[this[field.oneof.name]] = null; // Unset the previous (field name is the oneof field's value)
                            this[field.oneof.name] = field.name;
                        } else if (field.oneof.name === keyOrObj)
                            this[field.oneof.name] = null;
                    }
                    return this;
                };

                /**
                 * Sets a field's value. This is an alias for [@link ProtoBuf.Builder.Message#set}.
                 * @name ProtoBuf.Builder.Message#$set
                 * @function
                 * @param {string|!Object.<string,*>} keyOrObj String key or plain object holding multiple values
                 * @param {(*|boolean)=} value Value to set if key is a string, otherwise omitted
                 * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                 * @throws {Error} If the value cannot be set
                 * @expose
                 */
                MessagePrototype.$set = MessagePrototype.set;

                /**
                 * Gets a field's value.
                 * @name ProtoBuf.Builder.Message#get
                 * @function
                 * @param {string} key Key
                 * @param {boolean=} noAssert Whether to not assert for an actual field, defaults to `false`
                 * @return {*} Value
                 * @throws {Error} If there is no such field
                 * @expose
                 */
                MessagePrototype.get = function(key, noAssert) {
                    if (noAssert)
                        return this[key];
                    var field = T._fieldsByName[key];
                    if (!field || !(field instanceof ProtoBuf.Reflect.Message.Field))
                        throw Error(this+"#"+key+" is not a field: undefined");
                    if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                        throw Error(this+"#"+key+" is not a field: "+field.toString(true));
                    return this[field.name];
                };

                /**
                 * Gets a field's value. This is an alias for {@link ProtoBuf.Builder.Message#$get}.
                 * @name ProtoBuf.Builder.Message#$get
                 * @function
                 * @param {string} key Key
                 * @return {*} Value
                 * @throws {Error} If there is no such field
                 * @expose
                 */
                MessagePrototype.$get = MessagePrototype.get;

                // Getters and setters

                for (var i=0; i<fields.length; i++) {
                    var field = fields[i];
                    // no setters for extension fields as these are named by their fqn
                    if (field instanceof ProtoBuf.Reflect.Message.ExtensionField)
                        continue;

                    if (T.builder.options['populateAccessors'])
                        (function(field) {
                            // set/get[SomeValue]
                            var Name = field.originalName.replace(/(_[a-zA-Z])/g, function(match) {
                                return match.toUpperCase().replace('_','');
                            });
                            Name = Name.substring(0,1).toUpperCase() + Name.substring(1);

                            // set/get_[some_value] FIXME: Do we really need these?
                            var name = field.originalName.replace(/([A-Z])/g, function(match) {
                                return "_"+match;
                            });

                            /**
                             * The current field's unbound setter function.
                             * @function
                             * @param {*} value
                             * @param {boolean=} noAssert
                             * @returns {!ProtoBuf.Builder.Message}
                             * @inner
                             */
                            var setter = function(value, noAssert) {
                                this[field.name] = noAssert ? value : field.verifyValue(value);
                                return this;
                            };

                            /**
                             * The current field's unbound getter function.
                             * @function
                             * @returns {*}
                             * @inner
                             */
                            var getter = function() {
                                return this[field.name];
                            };

                            if (T.getChild("set"+Name) === null)
                                /**
                                 * Sets a value. This method is present for each field, but only if there is no name conflict with
                                 *  another field.
                                 * @name ProtoBuf.Builder.Message#set[SomeField]
                                 * @function
                                 * @param {*} value Value to set
                                 * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                                 * @returns {!ProtoBuf.Builder.Message} this
                                 * @abstract
                                 * @throws {Error} If the value cannot be set
                                 */
                                MessagePrototype["set"+Name] = setter;

                            if (T.getChild("set_"+name) === null)
                                /**
                                 * Sets a value. This method is present for each field, but only if there is no name conflict with
                                 *  another field.
                                 * @name ProtoBuf.Builder.Message#set_[some_field]
                                 * @function
                                 * @param {*} value Value to set
                                 * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                                 * @returns {!ProtoBuf.Builder.Message} this
                                 * @abstract
                                 * @throws {Error} If the value cannot be set
                                 */
                                MessagePrototype["set_"+name] = setter;

                            if (T.getChild("get"+Name) === null)
                                /**
                                 * Gets a value. This method is present for each field, but only if there is no name conflict with
                                 *  another field.
                                 * @name ProtoBuf.Builder.Message#get[SomeField]
                                 * @function
                                 * @abstract
                                 * @return {*} The value
                                 */
                                MessagePrototype["get"+Name] = getter;

                            if (T.getChild("get_"+name) === null)
                                /**
                                 * Gets a value. This method is present for each field, but only if there is no name conflict with
                                 *  another field.
                                 * @name ProtoBuf.Builder.Message#get_[some_field]
                                 * @function
                                 * @return {*} The value
                                 * @abstract
                                 */
                                MessagePrototype["get_"+name] = getter;

                        })(field);
                }

                // En-/decoding

                /**
                 * Encodes the message.
                 * @name ProtoBuf.Builder.Message#$encode
                 * @function
                 * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                 * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
                 * @return {!ByteBuffer} Encoded message as a ByteBuffer
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded ByteBuffer in the `encoded` property on the error.
                 * @expose
                 * @see ProtoBuf.Builder.Message#encode64
                 * @see ProtoBuf.Builder.Message#encodeHex
                 * @see ProtoBuf.Builder.Message#encodeAB
                 */
                MessagePrototype.encode = function(buffer, noVerify) {
                    if (typeof buffer === 'boolean')
                        noVerify = buffer,
                        buffer = undefined;
                    var isNew = false;
                    if (!buffer)
                        buffer = new ByteBuffer(),
                        isNew = true;
                    var le = buffer.littleEndian;
                    try {
                        T.encode(this, buffer.LE(), noVerify);
                        return (isNew ? buffer.flip() : buffer).LE(le);
                    } catch (e) {
                        buffer.LE(le);
                        throw(e);
                    }
                };

                /**
                 * Encodes a message using the specified data payload.
                 * @param {!Object.<string,*>} data Data payload
                 * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                 * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
                 * @return {!ByteBuffer} Encoded message as a ByteBuffer
                 * @expose
                 */
                Message.encode = function(data, buffer, noVerify) {
                    return new Message(data).encode(buffer, noVerify);
                };

                /**
                 * Calculates the byte length of the message.
                 * @name ProtoBuf.Builder.Message#calculate
                 * @function
                 * @returns {number} Byte length
                 * @throws {Error} If the message cannot be calculated or if required fields are missing.
                 * @expose
                 */
                MessagePrototype.calculate = function() {
                    return T.calculate(this);
                };

                /**
                 * Encodes the varint32 length-delimited message.
                 * @name ProtoBuf.Builder.Message#encodeDelimited
                 * @function
                 * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                 * @return {!ByteBuffer} Encoded message as a ByteBuffer
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded ByteBuffer in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.encodeDelimited = function(buffer) {
                    var isNew = false;
                    if (!buffer)
                        buffer = new ByteBuffer(),
                        isNew = true;
                    var enc = new ByteBuffer().LE();
                    T.encode(this, enc).flip();
                    buffer.writeVarint32(enc.remaining());
                    buffer.append(enc);
                    return isNew ? buffer.flip() : buffer;
                };

                /**
                 * Directly encodes the message to an ArrayBuffer.
                 * @name ProtoBuf.Builder.Message#encodeAB
                 * @function
                 * @return {ArrayBuffer} Encoded message as ArrayBuffer
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded ArrayBuffer in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.encodeAB = function() {
                    try {
                        return this.encode().toArrayBuffer();
                    } catch (e) {
                        if (e["encoded"]) e["encoded"] = e["encoded"].toArrayBuffer();
                        throw(e);
                    }
                };

                /**
                 * Returns the message as an ArrayBuffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeAB}.
                 * @name ProtoBuf.Builder.Message#toArrayBuffer
                 * @function
                 * @return {ArrayBuffer} Encoded message as ArrayBuffer
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded ArrayBuffer in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.toArrayBuffer = MessagePrototype.encodeAB;

                /**
                 * Directly encodes the message to a node Buffer.
                 * @name ProtoBuf.Builder.Message#encodeNB
                 * @function
                 * @return {!Buffer}
                 * @throws {Error} If the message cannot be encoded, not running under node.js or if required fields are
                 *  missing. The later still returns the encoded node Buffer in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.encodeNB = function() {
                    try {
                        return this.encode().toBuffer();
                    } catch (e) {
                        if (e["encoded"]) e["encoded"] = e["encoded"].toBuffer();
                        throw(e);
                    }
                };

                /**
                 * Returns the message as a node Buffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeNB}.
                 * @name ProtoBuf.Builder.Message#toBuffer
                 * @function
                 * @return {!Buffer}
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded node Buffer in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.toBuffer = MessagePrototype.encodeNB;

                /**
                 * Directly encodes the message to a base64 encoded string.
                 * @name ProtoBuf.Builder.Message#encode64
                 * @function
                 * @return {string} Base64 encoded string
                 * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later
                 *  still returns the encoded base64 string in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.encode64 = function() {
                    try {
                        return this.encode().toBase64();
                    } catch (e) {
                        if (e["encoded"]) e["encoded"] = e["encoded"].toBase64();
                        throw(e);
                    }
                };

                /**
                 * Returns the message as a base64 encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encode64}.
                 * @name ProtoBuf.Builder.Message#toBase64
                 * @function
                 * @return {string} Base64 encoded string
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded base64 string in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.toBase64 = MessagePrototype.encode64;

                /**
                 * Directly encodes the message to a hex encoded string.
                 * @name ProtoBuf.Builder.Message#encodeHex
                 * @function
                 * @return {string} Hex encoded string
                 * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later
                 *  still returns the encoded hex string in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.encodeHex = function() {
                    try {
                        return this.encode().toHex();
                    } catch (e) {
                        if (e["encoded"]) e["encoded"] = e["encoded"].toHex();
                        throw(e);
                    }
                };

                /**
                 * Returns the message as a hex encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encodeHex}.
                 * @name ProtoBuf.Builder.Message#toHex
                 * @function
                 * @return {string} Hex encoded string
                 * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                 *  returns the encoded hex string in the `encoded` property on the error.
                 * @expose
                 */
                MessagePrototype.toHex = MessagePrototype.encodeHex;

                /**
                 * Clones a message object or field value to a raw object.
                 * @param {*} obj Object to clone
                 * @param {boolean} binaryAsBase64 Whether to include binary data as base64 strings or as a buffer otherwise
                 * @param {boolean} longsAsStrings Whether to encode longs as strings
                 * @param {{name: string, wireType: number}} fieldType The field type, if
                 * appropriate
                 * @param {ProtoBuf.Reflect.T} resolvedType The resolved field type, if appropriate
                 * @returns {*} Cloned object
                 * @inner
                 */
                function cloneRaw(obj, binaryAsBase64, longsAsStrings, fieldType, resolvedType) {
                    var clone = undefined;
                    if (obj === null || typeof obj !== 'object') {
                        if (fieldType == ProtoBuf.TYPES["enum"]) {
                            var values = resolvedType.getChildren(ProtoBuf.Reflect.Enum.Value);
                            for (var i = 0; i < values.length; i++) {
                                if (values[i]['id'] === obj) {
                                    obj = values[i]['name'];
                                    break;
                                }
                            }
                        }
                        clone = obj;
                    } else if (ByteBuffer.isByteBuffer(obj)) {
                        if (binaryAsBase64) {
                            clone = obj.toBase64();
                        } else {
                            clone = obj.toBuffer();
                        }
                    } else if (Array.isArray(obj)) {
                        var src = obj;
                        clone = [];
                        for (var idx = 0; idx < src.length; idx++)
                            clone.push(cloneRaw(src[idx], binaryAsBase64, longsAsStrings, fieldType, resolvedType));
                    } else if (obj instanceof ProtoBuf.Map) {
                        var it = obj.entries();
                        clone = {};
                        for (var e = it.next(); !e.done; e = it.next())
                            clone[obj.keyElem.valueToString(e.value[0])] = cloneRaw(e.value[1], binaryAsBase64, longsAsStrings, obj.valueElem.type, obj.valueElem.resolvedType);
                    } else if (obj instanceof ProtoBuf.Long) {
                        if (longsAsStrings)
                            // int64s are encoded as strings
                            clone = obj.toString();
                        else
                            clone = new ProtoBuf.Long(obj);
                    } else { // is a non-null object
                        clone = {};
                        var type = obj.$type;
                        var field = undefined;
                        for (var i in obj) {
                            if (obj.hasOwnProperty(i)) {
                                var value = obj[i];
                                if (type) {
                                    field = type.getChild(i);
                                }
                                clone[i] = cloneRaw(value, binaryAsBase64, longsAsStrings, field.type, field.resolvedType);
                            }
                        }
                    }
                    return clone;
                }

                /**
                 * Returns the message's raw payload.
                 * @param {boolean=} binaryAsBase64 Whether to include binary data as base64 strings instead of Buffers, defaults to `false`
                 * @param {boolean} longsAsStrings Whether to encode longs as strings
                 * @returns {Object.<string,*>} Raw payload
                 * @expose
                 */
                MessagePrototype.toRaw = function(binaryAsBase64, longsAsStrings) {
                    return cloneRaw(this, !!binaryAsBase64, !!longsAsStrings, ProtoBuf.TYPES["message"], this.$type);
                };

                /**
                 * Encodes a message to JSON.
                 * @returns {string} JSON string
                 * @expose
                 */
                MessagePrototype.encodeJSON = function() {
                    return JSON.stringify(
                        cloneRaw(this,
                             /* binary-as-base64 */ true,
                             /* longs-as-strings */ true,
                             ProtoBuf.TYPES["message"],
                             this.$type
                        )
                    );
                };

                /**
                 * Decodes a message from the specified buffer or string.
                 * @name ProtoBuf.Builder.Message.decode
                 * @function
                 * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from
                 * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64
                 * @return {!ProtoBuf.Builder.Message} Decoded message
                 * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                 *  returns the decoded message with missing fields in the `decoded` property on the error.
                 * @expose
                 * @see ProtoBuf.Builder.Message.decode64
                 * @see ProtoBuf.Builder.Message.decodeHex
                 */
                Message.decode = function(buffer, enc) {
                    if (typeof buffer === 'string')
                        buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                    buffer = ByteBuffer.isByteBuffer(buffer) ? buffer : ByteBuffer.wrap(buffer); // May throw
                    var le = buffer.littleEndian;
                    try {
                        var msg = T.decode(buffer.LE());
                        buffer.LE(le);
                        return msg;
                    } catch (e) {
                        buffer.LE(le);
                        throw(e);
                    }
                };

                /**
                 * Decodes a varint32 length-delimited message from the specified buffer or string.
                 * @name ProtoBuf.Builder.Message.decodeDelimited
                 * @function
                 * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from
                 * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64
                 * @return {ProtoBuf.Builder.Message} Decoded message or `null` if not enough bytes are available yet
                 * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                 *  returns the decoded message with missing fields in the `decoded` property on the error.
                 * @expose
                 */
                Message.decodeDelimited = function(buffer, enc) {
                    if (typeof buffer === 'string')
                        buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                    buffer = ByteBuffer.isByteBuffer(buffer) ? buffer : ByteBuffer.wrap(buffer); // May throw
                    if (buffer.remaining() < 1)
                        return null;
                    var off = buffer.offset,
                        len = buffer.readVarint32();
                    if (buffer.remaining() < len) {
                        buffer.offset = off;
                        return null;
                    }
                    try {
                        var msg = T.decode(buffer.slice(buffer.offset, buffer.offset + len).LE());
                        buffer.offset += len;
                        return msg;
                    } catch (err) {
                        buffer.offset += len;
                        throw err;
                    }
                };

                /**
                 * Decodes the message from the specified base64 encoded string.
                 * @name ProtoBuf.Builder.Message.decode64
                 * @function
                 * @param {string} str String to decode from
                 * @return {!ProtoBuf.Builder.Message} Decoded message
                 * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                 *  returns the decoded message with missing fields in the `decoded` property on the error.
                 * @expose
                 */
                Message.decode64 = function(str) {
                    return Message.decode(str, "base64");
                };

                /**
                 * Decodes the message from the specified hex encoded string.
                 * @name ProtoBuf.Builder.Message.decodeHex
                 * @function
                 * @param {string} str String to decode from
                 * @return {!ProtoBuf.Builder.Message} Decoded message
                 * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                 *  returns the decoded message with missing fields in the `decoded` property on the error.
                 * @expose
                 */
                Message.decodeHex = function(str) {
                    return Message.decode(str, "hex");
                };

                /**
                 * Decodes the message from a JSON string.
                 * @name ProtoBuf.Builder.Message.decodeJSON
                 * @function
                 * @param {string} str String to decode from
                 * @return {!ProtoBuf.Builder.Message} Decoded message
                 * @throws {Error} If the message cannot be decoded or if required fields are
                 * missing.
                 * @expose
                 */
                Message.decodeJSON = function(str) {
                    return new Message(JSON.parse(str));
                };

                // Utility

                /**
                 * Returns a string representation of this Message.
                 * @name ProtoBuf.Builder.Message#toString
                 * @function
                 * @return {string} String representation as of ".Fully.Qualified.MessageName"
                 * @expose
                 */
                MessagePrototype.toString = function() {
                    return T.toString();
                };

                // Properties

                /**
                 * Message options.
                 * @name ProtoBuf.Builder.Message.$options
                 * @type {Object.<string,*>}
                 * @expose
                 */
                var $optionsS; // cc needs this

                /**
                 * Message options.
                 * @name ProtoBuf.Builder.Message#$options
                 * @type {Object.<string,*>}
                 * @expose
                 */
                var $options;

                /**
                 * Reflection type.
                 * @name ProtoBuf.Builder.Message.$type
                 * @type {!ProtoBuf.Reflect.Message}
                 * @expose
                 */
                var $typeS;

                /**
                 * Reflection type.
                 * @name ProtoBuf.Builder.Message#$type
                 * @type {!ProtoBuf.Reflect.Message}
                 * @expose
                 */
                var $type;

                if (Object.defineProperty)
                    Object.defineProperty(Message, '$options', { "value": T.buildOpt() }),
                    Object.defineProperty(MessagePrototype, "$options", { "value": Message["$options"] }),
                    Object.defineProperty(Message, "$type", { "value": T }),
                    Object.defineProperty(MessagePrototype, "$type", { "value": T });

                return Message;

            })(ProtoBuf, this);

            // Static enums and prototyped sub-messages / cached collections
            this._fields = [];
            this._fieldsById = {};
            this._fieldsByName = {};
            for (var i=0, k=this.children.length, child; i<k; i++) {
                child = this.children[i];
                if (child instanceof Enum || child instanceof Message || child instanceof Service) {
                    if (clazz.hasOwnProperty(child.name))
                        throw Error("Illegal reflect child of "+this.toString(true)+": "+child.toString(true)+" cannot override static property '"+child.name+"'");
                    clazz[child.name] = child.build();
                } else if (child instanceof Message.Field)
                    child.build(),
                    this._fields.push(child),
                    this._fieldsById[child.id] = child,
                    this._fieldsByName[child.name] = child;
                else if (!(child instanceof Message.OneOf) && !(child instanceof Extension)) // Not built
                    throw Error("Illegal reflect child of "+this.toString(true)+": "+this.children[i].toString(true));
            }

            return this.clazz = clazz;
        };

        /**
         * Encodes a runtime message's contents to the specified buffer.
         * @param {!ProtoBuf.Builder.Message} message Runtime message to encode
         * @param {ByteBuffer} buffer ByteBuffer to write to
         * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
         * @return {ByteBuffer} The ByteBuffer for chaining
         * @throws {Error} If required fields are missing or the message cannot be encoded for another reason
         * @expose
         */
        MessagePrototype.encode = function(message, buffer, noVerify) {
            var fieldMissing = null,
                field;
            for (var i=0, k=this._fields.length, val; i<k; ++i) {
                field = this._fields[i];
                val = message[field.name];
                if (field.required && val === null) {
                    if (fieldMissing === null)
                        fieldMissing = field;
                } else
                    field.encode(noVerify ? val : field.verifyValue(val), buffer);
            }
            if (fieldMissing !== null) {
                var err = Error("Missing at least one required field for "+this.toString(true)+": "+fieldMissing);
                err["encoded"] = buffer; // Still expose what we got
                throw(err);
            }
            return buffer;
        };

        /**
         * Calculates a runtime message's byte length.
         * @param {!ProtoBuf.Builder.Message} message Runtime message to encode
         * @returns {number} Byte length
         * @throws {Error} If required fields are missing or the message cannot be calculated for another reason
         * @expose
         */
        MessagePrototype.calculate = function(message) {
            for (var n=0, i=0, k=this._fields.length, field, val; i<k; ++i) {
                field = this._fields[i];
                val = message[field.name];
                if (field.required && val === null)
                   throw Error("Missing at least one required field for "+this.toString(true)+": "+field);
                else
                    n += field.calculate(val);
            }
            return n;
        };

        /**
         * Skips all data until the end of the specified group has been reached.
         * @param {number} expectedId Expected GROUPEND id
         * @param {!ByteBuffer} buf ByteBuffer
         * @returns {boolean} `true` if a value as been skipped, `false` if the end has been reached
         * @throws {Error} If it wasn't possible to find the end of the group (buffer overrun or end tag mismatch)
         * @inner
         */
        function skipTillGroupEnd(expectedId, buf) {
            var tag = buf.readVarint32(), // Throws on OOB
                wireType = tag & 0x07,
                id = tag >>> 3;
            switch (wireType) {
                case ProtoBuf.WIRE_TYPES.VARINT:
                    do tag = buf.readUint8();
                    while ((tag & 0x80) === 0x80);
                    break;
                case ProtoBuf.WIRE_TYPES.BITS64:
                    buf.offset += 8;
                    break;
                case ProtoBuf.WIRE_TYPES.LDELIM:
                    tag = buf.readVarint32(); // reads the varint
                    buf.offset += tag;        // skips n bytes
                    break;
                case ProtoBuf.WIRE_TYPES.STARTGROUP:
                    skipTillGroupEnd(id, buf);
                    break;
                case ProtoBuf.WIRE_TYPES.ENDGROUP:
                    if (id === expectedId)
                        return false;
                    else
                        throw Error("Illegal GROUPEND after unknown group: "+id+" ("+expectedId+" expected)");
                case ProtoBuf.WIRE_TYPES.BITS32:
                    buf.offset += 4;
                    break;
                default:
                    throw Error("Illegal wire type in unknown group "+expectedId+": "+wireType);
            }
            return true;
        }

        /**
         * Decodes an encoded message and returns the decoded message.
         * @param {ByteBuffer} buffer ByteBuffer to decode from
         * @param {number=} length Message length. Defaults to decode all the available data.
         * @param {number=} expectedGroupEndId Expected GROUPEND id if this is a legacy group
         * @return {ProtoBuf.Builder.Message} Decoded message
         * @throws {Error} If the message cannot be decoded
         * @expose
         */
        MessagePrototype.decode = function(buffer, length, expectedGroupEndId) {
            length = typeof length === 'number' ? length : -1;
            var start = buffer.offset,
                msg = new (this.clazz)(),
                tag, wireType, id, field;
            while (buffer.offset < start+length || (length === -1 && buffer.remaining() > 0)) {
                tag = buffer.readVarint32();
                wireType = tag & 0x07;
                id = tag >>> 3;
                if (wireType === ProtoBuf.WIRE_TYPES.ENDGROUP) {
                    if (id !== expectedGroupEndId)
                        throw Error("Illegal group end indicator for "+this.toString(true)+": "+id+" ("+(expectedGroupEndId ? expectedGroupEndId+" expected" : "not a group")+")");
                    break;
                }
                if (!(field = this._fieldsById[id])) {
                    // "messages created by your new code can be parsed by your old code: old binaries simply ignore the new field when parsing."
                    switch (wireType) {
                        case ProtoBuf.WIRE_TYPES.VARINT:
                            buffer.readVarint32();
                            break;
                        case ProtoBuf.WIRE_TYPES.BITS32:
                            buffer.offset += 4;
                            break;
                        case ProtoBuf.WIRE_TYPES.BITS64:
                            buffer.offset += 8;
                            break;
                        case ProtoBuf.WIRE_TYPES.LDELIM:
                            var len = buffer.readVarint32();
                            buffer.offset += len;
                            break;
                        case ProtoBuf.WIRE_TYPES.STARTGROUP:
                            while (skipTillGroupEnd(id, buffer)) {}
                            break;
                        default:
                            throw Error("Illegal wire type for unknown field "+id+" in "+this.toString(true)+"#decode: "+wireType);
                    }
                    continue;
                }
                if (field.repeated && !field.options["packed"]) {
                    msg[field.name].push(field.decode(wireType, buffer));
                } else if (field.map) {
                    var keyval = field.decode(wireType, buffer);
                    msg[field.name].set(keyval[0], keyval[1]);
                } else {
                    msg[field.name] = field.decode(wireType, buffer);
                    if (field.oneof) {
                        if (this[field.oneof.name] !== null)
                            this[this[field.oneof.name]] = null;
                        msg[field.oneof.name] = field.name;
                    }
                }
            }

            // Check if all required fields are present and set default values for optional fields that are not
            for (var i=0, k=this._fields.length; i<k; ++i) {
                field = this._fields[i];
                if (msg[field.name] === null)
                    if (field.required) {
                        var err = Error("Missing at least one required field for "+this.toString(true)+": "+field.name);
                        err["decoded"] = msg; // Still expose what we got
                        throw(err);
                    } else if (ProtoBuf.populateDefaults && field.defaultValue !== null)
                        msg[field.name] = field.defaultValue;
            }
            return msg;
        };

        /**
         * @alias ProtoBuf.Reflect.Message
         * @expose
         */
        Reflect.Message = Message;

        /**
         * Constructs a new Message Field.
         * @exports ProtoBuf.Reflect.Message.Field
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Message} message Message reference
         * @param {string} rule Rule, one of requried, optional, repeated
         * @param {string?} keytype Key data type, if any.
         * @param {string} type Data type, e.g. int32
         * @param {string} name Field name
         * @param {number} id Unique field id
         * @param {Object.<string,*>=} options Options
         * @param {!ProtoBuf.Reflect.Message.OneOf=} oneof Enclosing OneOf
         * @param {string?} syntax The syntax level of this definition (e.g., proto3)
         * @constructor
         * @extends ProtoBuf.Reflect.T
         */
        var Field = function(builder, message, rule, keytype, type, name, id, options, oneof, syntax) {
            T.call(this, builder, message, name);

            /**
             * @override
             */
            this.className = "Message.Field";

            /**
             * Message field required flag.
             * @type {boolean}
             * @expose
             */
            this.required = rule === "required";

            /**
             * Message field repeated flag.
             * @type {boolean}
             * @expose
             */
            this.repeated = rule === "repeated";

            /**
             * Message field map flag.
             * @type {boolean}
             * @expose
             */
            this.map = rule === "map";

            /**
             * Message field key type. Type reference string if unresolved, protobuf
             * type if resolved. Valid only if this.map === true, null otherwise.
             * @type {string|{name: string, wireType: number}|null}
             * @expose
             */
            this.keyType = keytype || null;

            /**
             * Message field type. Type reference string if unresolved, protobuf type if
             * resolved. In a map field, this is the value type.
             * @type {string|{name: string, wireType: number}}
             * @expose
             */
            this.type = type;

            /**
             * Resolved type reference inside the global namespace.
             * @type {ProtoBuf.Reflect.T|null}
             * @expose
             */
            this.resolvedType = null;

            /**
             * Unique message field id.
             * @type {number}
             * @expose
             */
            this.id = id;

            /**
             * Message field options.
             * @type {!Object.<string,*>}
             * @dict
             * @expose
             */
            this.options = options || {};

            /**
             * Default value.
             * @type {*}
             * @expose
             */
            this.defaultValue = null;

            /**
             * Enclosing OneOf.
             * @type {?ProtoBuf.Reflect.Message.OneOf}
             * @expose
             */
            this.oneof = oneof || null;

            /**
             * Syntax level of this definition (e.g., proto3).
             * @type {string}
             * @expose
             */
            this.syntax = syntax || 'proto2';

            /**
             * Original field name.
             * @type {string}
             * @expose
             */
            this.originalName = this.name; // Used to revert camelcase transformation on naming collisions

            /**
             * Element implementation. Created in build() after types are resolved.
             * @type {ProtoBuf.Element}
             * @expose
             */
            this.element = null;

            /**
             * Key element implementation, for map fields. Created in build() after
             * types are resolved.
             * @type {ProtoBuf.Element}
             * @expose
             */
            this.keyElement = null;

            // Convert field names to camel case notation if the override is set
            if (this.builder.options['convertFieldsToCamelCase'] && !(this instanceof Message.ExtensionField))
                this.name = ProtoBuf.Util.toCamelCase(this.name);
        };

        /**
         * @alias ProtoBuf.Reflect.Message.Field.prototype
         * @inner
         */
        var FieldPrototype = Field.prototype = Object.create(T.prototype);

        /**
         * Builds the field.
         * @override
         * @expose
         */
        FieldPrototype.build = function() {
            this.element = new Element(this.type, this.resolvedType, false, this.syntax);
            if (this.map)
                this.keyElement = new Element(this.keyType, undefined, true, this.syntax);

            this.defaultValue = typeof this.options['default'] !== 'undefined' ? this.verifyValue(this.options['default']) : null;

            // In proto3, fields do not have field presence, and every field is set to
            // its type's default value ("", 0, 0.0, or false).
            if (this.syntax === 'proto3' && !this.repeated && !this.map)
                this.defaultValue = this.element.defaultFieldValue(this.type);
        };

        /**
         * Checks if the given value can be set for this field.
         * @param {*} value Value to check
         * @param {boolean=} skipRepeated Whether to skip the repeated value check or not. Defaults to false.
         * @return {*} Verified, maybe adjusted, value
         * @throws {Error} If the value cannot be set for this field
         * @expose
         */
        FieldPrototype.verifyValue = function(value, skipRepeated) {
            skipRepeated = skipRepeated || false;
            var fail = function(val, msg) {
                throw Error("Illegal value for "+this.toString(true)+" of type "+this.type.name+": "+val+" ("+msg+")");
            }.bind(this);
            if (value === null) { // NULL values for optional fields
                if (this.required)
                    fail(typeof value, "required");
                if (this.syntax === 'proto3' && this.type !== ProtoBuf.TYPES["message"])
                    fail(typeof value, "proto3 field without field presence cannot be null");
                return null;
            }
            var i;
            if (this.repeated && !skipRepeated) { // Repeated values as arrays
                if (!Array.isArray(value))
                    value = [value];
                var res = [];
                for (i=0; i<value.length; i++)
                    res.push(this.element.verifyValue(value[i]));
                return res;
            }
            if (this.map && !skipRepeated) { // Map values as objects
                if (!(value instanceof ProtoBuf.Map)) {
                    // If not already a Map, attempt to convert.
                    if (!(value instanceof Object)) {
                        fail(typeof value,
                             "expected ProtoBuf.Map or raw object for map field");
                    }
                    return new ProtoBuf.Map(this, value);
                } else {
                    return value;
                }
            }
            // All non-repeated fields expect no array
            if (!this.repeated && Array.isArray(value))
                fail(typeof value, "no array expected");

            return this.element.verifyValue(value);
        };

        /**
         * Determines whether the field will have a presence on the wire given its
         * value.
         * @param {*} value Verified field value
         * @return {boolean} Whether the field will be present on the wire
         */
        FieldPrototype.hasWirePresence = function(value) {
            if (this.syntax !== 'proto3') {
                return (value !== null);
            } else {
                switch (this.type) {
                    case ProtoBuf.TYPES["int32"]:
                    case ProtoBuf.TYPES["sint32"]:
                    case ProtoBuf.TYPES["sfixed32"]:
                    case ProtoBuf.TYPES["uint32"]:
                    case ProtoBuf.TYPES["fixed32"]:
                        return value !== 0;

                    case ProtoBuf.TYPES["int64"]:
                    case ProtoBuf.TYPES["sint64"]:
                    case ProtoBuf.TYPES["sfixed64"]:
                    case ProtoBuf.TYPES["uint64"]:
                    case ProtoBuf.TYPES["fixed64"]:
                        return value.low !== 0 || value.high !== 0;

                    case ProtoBuf.TYPES["bool"]:
                        return value;

                    case ProtoBuf.TYPES["float"]:
                    case ProtoBuf.TYPES["double"]:
                        return value !== 0.0;

                    case ProtoBuf.TYPES["string"]:
                        return value.length > 0;

                    case ProtoBuf.TYPES["bytes"]:
                        return value.remaining() > 0;

                    case ProtoBuf.TYPES["enum"]:
                        return value !== 0;

                    case ProtoBuf.TYPES["message"]:
                        return value !== null;
                    default:
                        return true;
                }
            }
        };

        /**
         * Encodes the specified field value to the specified buffer.
         * @param {*} value Verified field value
         * @param {ByteBuffer} buffer ByteBuffer to encode to
         * @return {ByteBuffer} The ByteBuffer for chaining
         * @throws {Error} If the field cannot be encoded
         * @expose
         */
        FieldPrototype.encode = function(value, buffer) {
            if (this.type === null || typeof this.type !== 'object')
                throw Error("[INTERNAL] Unresolved type in "+this.toString(true)+": "+this.type);
            if (value === null || (this.repeated && value.length == 0))
                return buffer; // Optional omitted
            try {
                if (this.repeated) {
                    var i;
                    // "Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire
                    // types) can be declared 'packed'."
                    if (this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                        // "All of the elements of the field are packed into a single key-value pair with wire type 2
                        // (length-delimited). Each element is encoded the same way it would be normally, except without a
                        // tag preceding it."
                        buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                        buffer.ensureCapacity(buffer.offset += 1); // We do not know the length yet, so let's assume a varint of length 1
                        var start = buffer.offset; // Remember where the contents begin
                        for (i=0; i<value.length; i++)
                            this.element.encodeValue(this.id, value[i], buffer);
                        var len = buffer.offset-start,
                            varintLen = ByteBuffer.calculateVarint32(len);
                        if (varintLen > 1) { // We need to move the contents
                            var contents = buffer.slice(start, buffer.offset);
                            start += varintLen-1;
                            buffer.offset = start;
                            buffer.append(contents);
                        }
                        buffer.writeVarint32(len, start-varintLen);
                    } else {
                        // "If your message definition has repeated elements (without the [packed=true] option), the encoded
                        // message has zero or more key-value pairs with the same tag number"
                        for (i=0; i<value.length; i++)
                            buffer.writeVarint32((this.id << 3) | this.type.wireType),
                            this.element.encodeValue(this.id, value[i], buffer);
                    }
                } else if (this.map) {
                    // Write out each map entry as a submessage.
                    value.forEach(function(val, key, m) {
                        // Compute the length of the submessage (key, val) pair.
                        var length =
                            ByteBuffer.calculateVarint32((1 << 3) | this.keyType.wireType) +
                            this.keyElement.calculateLength(1, key) +
                            ByteBuffer.calculateVarint32((2 << 3) | this.type.wireType) +
                            this.element.calculateLength(2, val);

                        // Submessage with wire type of length-delimited.
                        buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                        buffer.writeVarint32(length);

                        // Write out the key and val.
                        buffer.writeVarint32((1 << 3) | this.keyType.wireType);
                        this.keyElement.encodeValue(1, key, buffer);
                        buffer.writeVarint32((2 << 3) | this.type.wireType);
                        this.element.encodeValue(2, val, buffer);
                    }, this);
                } else {
                    if (this.hasWirePresence(value)) {
                        buffer.writeVarint32((this.id << 3) | this.type.wireType);
                        this.element.encodeValue(this.id, value, buffer);
                    }
                }
            } catch (e) {
                throw Error("Illegal value for "+this.toString(true)+": "+value+" ("+e+")");
            }
            return buffer;
        };

        /**
         * Calculates the length of this field's value on the network level.
         * @param {*} value Field value
         * @returns {number} Byte length
         * @expose
         */
        FieldPrototype.calculate = function(value) {
            value = this.verifyValue(value); // May throw
            if (this.type === null || typeof this.type !== 'object')
                throw Error("[INTERNAL] Unresolved type in "+this.toString(true)+": "+this.type);
            if (value === null || (this.repeated && value.length == 0))
                return 0; // Optional omitted
            var n = 0;
            try {
                if (this.repeated) {
                    var i, ni;
                    if (this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                        n += ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                        ni = 0;
                        for (i=0; i<value.length; i++)
                            ni += this.element.calculateLength(this.id, value[i]);
                        n += ByteBuffer.calculateVarint32(ni);
                        n += ni;
                    } else {
                        for (i=0; i<value.length; i++)
                            n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType),
                            n += this.element.calculateLength(this.id, value[i]);
                    }
                } else if (this.map) {
                    // Each map entry becomes a submessage.
                    value.forEach(function(val, key, m) {
                        // Compute the length of the submessage (key, val) pair.
                        var length =
                            ByteBuffer.calculateVarint32((1 << 3) | this.keyType.wireType) +
                            this.keyElement.calculateLength(1, key) +
                            ByteBuffer.calculateVarint32((2 << 3) | this.type.wireType) +
                            this.element.calculateLength(2, val);

                        n += ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                        n += ByteBuffer.calculateVarint32(length);
                        n += length;
                    }, this);
                } else {
                    if (this.hasWirePresence(value)) {
                        n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType);
                        n += this.element.calculateLength(this.id, value);
                    }
                }
            } catch (e) {
                throw Error("Illegal value for "+this.toString(true)+": "+value+" ("+e+")");
            }
            return n;
        };

        /**
         * Decode the field value from the specified buffer.
         * @param {number} wireType Leading wire type
         * @param {ByteBuffer} buffer ByteBuffer to decode from
         * @param {boolean=} skipRepeated Whether to skip the repeated check or not. Defaults to false.
         * @return {*} Decoded value: array for packed repeated fields, [key, value] for
         *             map fields, or an individual value otherwise.
         * @throws {Error} If the field cannot be decoded
         * @expose
         */
        FieldPrototype.decode = function(wireType, buffer, skipRepeated) {
            var value, nBytes;

            // We expect wireType to match the underlying type's wireType unless we see
            // a packed repeated field, or unless this is a map field.
            var wireTypeOK =
                (!this.map && wireType == this.type.wireType) ||
                (!skipRepeated && this.repeated && this.options["packed"] &&
                 wireType == ProtoBuf.WIRE_TYPES.LDELIM) ||
                (this.map && wireType == ProtoBuf.WIRE_TYPES.LDELIM);
            if (!wireTypeOK)
                throw Error("Illegal wire type for field "+this.toString(true)+": "+wireType+" ("+this.type.wireType+" expected)");

            // Handle packed repeated fields.
            if (wireType == ProtoBuf.WIRE_TYPES.LDELIM && this.repeated && this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                if (!skipRepeated) {
                    nBytes = buffer.readVarint32();
                    nBytes = buffer.offset + nBytes; // Limit
                    var values = [];
                    while (buffer.offset < nBytes)
                        values.push(this.decode(this.type.wireType, buffer, true));
                    return values;
                }
                // Read the next value otherwise...
            }

            // Handle maps.
            if (this.map) {
                // Read one (key, value) submessage, and return [key, value]
                var key = this.keyElement.defaultFieldValue(this.keyType);
                value = this.element.defaultFieldValue(this.type);

                // Read the length
                nBytes = buffer.readVarint32();
                if (buffer.remaining() < nBytes)
                    throw Error("Illegal number of bytes for "+this.toString(true)+": "+nBytes+" required but got only "+buffer.remaining());

                // Get a sub-buffer of this key/value submessage
                var msgbuf = buffer.clone();
                msgbuf.limit = msgbuf.offset + nBytes;
                buffer.offset += nBytes;

                while (msgbuf.remaining() > 0) {
                    var tag = msgbuf.readVarint32();
                    wireType = tag & 0x07;
                    var id = tag >>> 3;
                    if (id === 1) {
                        key = this.keyElement.decode(msgbuf, wireType, id);
                    } else if (id === 2) {
                        value = this.element.decode(msgbuf, wireType, id);
                    } else {
                        throw Error("Unexpected tag in map field key/value submessage");
                    }
                }

                return [key, value];
            }

            // Handle singular and non-packed repeated field values.
            return this.element.decode(buffer, wireType, this.id);
        };

        /**
         * @alias ProtoBuf.Reflect.Message.Field
         * @expose
         */
        Reflect.Message.Field = Field;

        /**
         * Constructs a new Message ExtensionField.
         * @exports ProtoBuf.Reflect.Message.ExtensionField
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Message} message Message reference
         * @param {string} rule Rule, one of requried, optional, repeated
         * @param {string} type Data type, e.g. int32
         * @param {string} name Field name
         * @param {number} id Unique field id
         * @param {Object.<string,*>=} options Options
         * @constructor
         * @extends ProtoBuf.Reflect.Message.Field
         */
        var ExtensionField = function(builder, message, rule, type, name, id, options) {
            Field.call(this, builder, message, rule, /* keytype = */ null, type, name, id, options);

            /**
             * Extension reference.
             * @type {!ProtoBuf.Reflect.Extension}
             * @expose
             */
            this.extension;
        };

        // Extends Field
        ExtensionField.prototype = Object.create(Field.prototype);

        /**
         * @alias ProtoBuf.Reflect.Message.ExtensionField
         * @expose
         */
        Reflect.Message.ExtensionField = ExtensionField;

        /**
         * Constructs a new Message OneOf.
         * @exports ProtoBuf.Reflect.Message.OneOf
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Message} message Message reference
         * @param {string} name OneOf name
         * @constructor
         * @extends ProtoBuf.Reflect.T
         */
        var OneOf = function(builder, message, name) {
            T.call(this, builder, message, name);

            /**
             * Enclosed fields.
             * @type {!Array.<!ProtoBuf.Reflect.Message.Field>}
             * @expose
             */
            this.fields = [];
        };

        /**
         * @alias ProtoBuf.Reflect.Message.OneOf
         * @expose
         */
        Reflect.Message.OneOf = OneOf;

        /**
         * Constructs a new Enum.
         * @exports ProtoBuf.Reflect.Enum
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.T} parent Parent Reflect object
         * @param {string} name Enum name
         * @param {Object.<string,*>=} options Enum options
         * @param {string?} syntax The syntax level (e.g., proto3)
         * @constructor
         * @extends ProtoBuf.Reflect.Namespace
         */
        var Enum = function(builder, parent, name, options, syntax) {
            Namespace.call(this, builder, parent, name, options, syntax);

            /**
             * @override
             */
            this.className = "Enum";

            /**
             * Runtime enum object.
             * @type {Object.<string,number>|null}
             * @expose
             */
            this.object = null;
        };

        /**
         * @alias ProtoBuf.Reflect.Enum.prototype
         * @inner
         */
        var EnumPrototype = Enum.prototype = Object.create(Namespace.prototype);

        /**
         * Builds this enum and returns the runtime counterpart.
         * @return {Object<string,*>}
         * @expose
         */
        EnumPrototype.build = function() {
            var enm = {},
                values = this.getChildren(Enum.Value);
            for (var i=0, k=values.length; i<k; ++i)
                enm[values[i]['name']] = values[i]['id'];
            if (Object.defineProperty)
                Object.defineProperty(enm, '$options', { "value": this.buildOpt() });
            return this.object = enm;
        };

        /**
         * @alias ProtoBuf.Reflect.Enum
         * @expose
         */
        Reflect.Enum = Enum;

        /**
         * Constructs a new Enum Value.
         * @exports ProtoBuf.Reflect.Enum.Value
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Enum} enm Enum reference
         * @param {string} name Field name
         * @param {number} id Unique field id
         * @constructor
         * @extends ProtoBuf.Reflect.T
         */
        var Value = function(builder, enm, name, id) {
            T.call(this, builder, enm, name);

            /**
             * @override
             */
            this.className = "Enum.Value";

            /**
             * Unique enum value id.
             * @type {number}
             * @expose
             */
            this.id = id;
        };

        // Extends T
        Value.prototype = Object.create(T.prototype);

        /**
         * @alias ProtoBuf.Reflect.Enum.Value
         * @expose
         */
        Reflect.Enum.Value = Value;

        /**
         * An extension (field).
         * @exports ProtoBuf.Reflect.Extension
         * @constructor
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.T} parent Parent object
         * @param {string} name Object name
         * @param {!ProtoBuf.Reflect.Message.Field} field Extension field
         */
        var Extension = function(builder, parent, name, field) {
            T.call(this, builder, parent, name);

            /**
             * Extended message field.
             * @type {!ProtoBuf.Reflect.Message.Field}
             * @expose
             */
            this.field = field;
        };

        // Extends T
        Extension.prototype = Object.create(T.prototype);

        /**
         * @alias ProtoBuf.Reflect.Extension
         * @expose
         */
        Reflect.Extension = Extension;

        /**
         * Constructs a new Service.
         * @exports ProtoBuf.Reflect.Service
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Namespace} root Root
         * @param {string} name Service name
         * @param {Object.<string,*>=} options Options
         * @constructor
         * @extends ProtoBuf.Reflect.Namespace
         */
        var Service = function(builder, root, name, options) {
            Namespace.call(this, builder, root, name, options);

            /**
             * @override
             */
            this.className = "Service";

            /**
             * Built runtime service class.
             * @type {?function(new:ProtoBuf.Builder.Service)}
             */
            this.clazz = null;
        };

        /**
         * @alias ProtoBuf.Reflect.Service.prototype
         * @inner
         */
        var ServicePrototype = Service.prototype = Object.create(Namespace.prototype);

        /**
         * Builds the service and returns the runtime counterpart, which is a fully functional class.
         * @see ProtoBuf.Builder.Service
         * @param {boolean=} rebuild Whether to rebuild or not
         * @return {Function} Service class
         * @throws {Error} If the message cannot be built
         * @expose
         */
        ServicePrototype.build = function(rebuild) {
            if (this.clazz && !rebuild)
                return this.clazz;

            // Create the runtime Service class in its own scope
            return this.clazz = (function(ProtoBuf, T) {

                /**
                 * Constructs a new runtime Service.
                 * @name ProtoBuf.Builder.Service
                 * @param {function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))=} rpcImpl RPC implementation receiving the method name and the message
                 * @class Barebone of all runtime services.
                 * @constructor
                 * @throws {Error} If the service cannot be created
                 */
                var Service = function(rpcImpl) {
                    ProtoBuf.Builder.Service.call(this);

                    /**
                     * Service implementation.
                     * @name ProtoBuf.Builder.Service#rpcImpl
                     * @type {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))}
                     * @expose
                     */
                    this.rpcImpl = rpcImpl || function(name, msg, callback) {
                        // This is what a user has to implement: A function receiving the method name, the actual message to
                        // send (type checked) and the callback that's either provided with the error as its first
                        // argument or null and the actual response message.
                        setTimeout(callback.bind(this, Error("Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services")), 0); // Must be async!
                    };
                };

                /**
                 * @alias ProtoBuf.Builder.Service.prototype
                 * @inner
                 */
                var ServicePrototype = Service.prototype = Object.create(ProtoBuf.Builder.Service.prototype);

                /**
                 * Asynchronously performs an RPC call using the given RPC implementation.
                 * @name ProtoBuf.Builder.Service.[Method]
                 * @function
                 * @param {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))} rpcImpl RPC implementation
                 * @param {ProtoBuf.Builder.Message} req Request
                 * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving
                 *  the error if any and the response either as a pre-parsed message or as its raw bytes
                 * @abstract
                 */

                /**
                 * Asynchronously performs an RPC call using the instance's RPC implementation.
                 * @name ProtoBuf.Builder.Service#[Method]
                 * @function
                 * @param {ProtoBuf.Builder.Message} req Request
                 * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving
                 *  the error if any and the response either as a pre-parsed message or as its raw bytes
                 * @abstract
                 */

                var rpc = T.getChildren(ProtoBuf.Reflect.Service.RPCMethod);
                for (var i=0; i<rpc.length; i++) {
                    (function(method) {

                        // service#Method(message, callback)
                        ServicePrototype[method.name] = function(req, callback) {
                            try {
                                try {
                                    // If given as a buffer, decode the request. Will throw a TypeError if not a valid buffer.
                                    req = method.resolvedRequestType.clazz.decode(ByteBuffer.wrap(req));
                                } catch (err) {
                                    if (!(err instanceof TypeError))
                                        throw err;
                                }
                                if (!req || !(req instanceof method.resolvedRequestType.clazz)) {
                                    setTimeout(callback.bind(this, Error("Illegal request type provided to service method "+T.name+"#"+method.name)), 0);
                                    return;
                                }
                                this.rpcImpl(method.fqn(), req, function(err, res) { // Assumes that this is properly async
                                    if (err) {
                                        callback(err);
                                        return;
                                    }
                                    try { res = method.resolvedResponseType.clazz.decode(res); } catch (notABuffer) {}
                                    if (!res || !(res instanceof method.resolvedResponseType.clazz)) {
                                        callback(Error("Illegal response type received in service method "+ T.name+"#"+method.name));
                                        return;
                                    }
                                    callback(null, res);
                                });
                            } catch (err) {
                                setTimeout(callback.bind(this, err), 0);
                            }
                        };

                        // Service.Method(rpcImpl, message, callback)
                        Service[method.name] = function(rpcImpl, req, callback) {
                            new Service(rpcImpl)[method.name](req, callback);
                        };

                        if (Object.defineProperty)
                            Object.defineProperty(Service[method.name], "$options", { "value": method.buildOpt() }),
                            Object.defineProperty(ServicePrototype[method.name], "$options", { "value": Service[method.name]["$options"] });
                    })(rpc[i]);
                }

                // Properties

                /**
                 * Service options.
                 * @name ProtoBuf.Builder.Service.$options
                 * @type {Object.<string,*>}
                 * @expose
                 */
                var $optionsS; // cc needs this

                /**
                 * Service options.
                 * @name ProtoBuf.Builder.Service#$options
                 * @type {Object.<string,*>}
                 * @expose
                 */
                var $options;

                /**
                 * Reflection type.
                 * @name ProtoBuf.Builder.Service.$type
                 * @type {!ProtoBuf.Reflect.Service}
                 * @expose
                 */
                var $typeS;

                /**
                 * Reflection type.
                 * @name ProtoBuf.Builder.Service#$type
                 * @type {!ProtoBuf.Reflect.Service}
                 * @expose
                 */
                var $type;

                if (Object.defineProperty)
                    Object.defineProperty(Service, "$options", { "value": T.buildOpt() }),
                    Object.defineProperty(ServicePrototype, "$options", { "value": Service["$options"] }),
                    Object.defineProperty(Service, "$type", { "value": T }),
                    Object.defineProperty(ServicePrototype, "$type", { "value": T });

                return Service;

            })(ProtoBuf, this);
        };

        /**
         * @alias ProtoBuf.Reflect.Service
         * @expose
         */
        Reflect.Service = Service;

        /**
         * Abstract service method.
         * @exports ProtoBuf.Reflect.Service.Method
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Service} svc Service
         * @param {string} name Method name
         * @param {Object.<string,*>=} options Options
         * @constructor
         * @extends ProtoBuf.Reflect.T
         */
        var Method = function(builder, svc, name, options) {
            T.call(this, builder, svc, name);

            /**
             * @override
             */
            this.className = "Service.Method";

            /**
             * Options.
             * @type {Object.<string, *>}
             * @expose
             */
            this.options = options || {};
        };

        /**
         * @alias ProtoBuf.Reflect.Service.Method.prototype
         * @inner
         */
        var MethodPrototype = Method.prototype = Object.create(T.prototype);

        /**
         * Builds the method's '$options' property.
         * @name ProtoBuf.Reflect.Service.Method#buildOpt
         * @function
         * @return {Object.<string,*>}
         */
        MethodPrototype.buildOpt = NamespacePrototype.buildOpt;

        /**
         * @alias ProtoBuf.Reflect.Service.Method
         * @expose
         */
        Reflect.Service.Method = Method;

        /**
         * RPC service method.
         * @exports ProtoBuf.Reflect.Service.RPCMethod
         * @param {!ProtoBuf.Builder} builder Builder reference
         * @param {!ProtoBuf.Reflect.Service} svc Service
         * @param {string} name Method name
         * @param {string} request Request message name
         * @param {string} response Response message name
         * @param {boolean} request_stream Whether requests are streamed
         * @param {boolean} response_stream Whether responses are streamed
         * @param {Object.<string,*>=} options Options
         * @constructor
         * @extends ProtoBuf.Reflect.Service.Method
         */
        var RPCMethod = function(builder, svc, name, request, response, request_stream, response_stream, options) {
            Method.call(this, builder, svc, name, options);

            /**
             * @override
             */
            this.className = "Service.RPCMethod";

            /**
             * Request message name.
             * @type {string}
             * @expose
             */
            this.requestName = request;

            /**
             * Response message name.
             * @type {string}
             * @expose
             */
            this.responseName = response;

            /**
             * Whether requests are streamed
             * @type {bool}
             * @expose
             */
            this.requestStream = request_stream;

            /**
             * Whether responses are streamed
             * @type {bool}
             * @expose
             */
            this.responseStream = response_stream;

            /**
             * Resolved request message type.
             * @type {ProtoBuf.Reflect.Message}
             * @expose
             */
            this.resolvedRequestType = null;

            /**
             * Resolved response message type.
             * @type {ProtoBuf.Reflect.Message}
             * @expose
             */
            this.resolvedResponseType = null;
        };

        // Extends Method
        RPCMethod.prototype = Object.create(Method.prototype);

        /**
         * @alias ProtoBuf.Reflect.Service.RPCMethod
         * @expose
         */
        Reflect.Service.RPCMethod = RPCMethod;

        return Reflect;

    })(ProtoBuf);

    /**
     * @alias ProtoBuf.Builder
     * @expose
     */
    ProtoBuf.Builder = (function(ProtoBuf, Lang, Reflect) {
        "use strict";

        /**
         * Helper for builder: propagate a top-level syntax annotation (e.g.,
         * 'proto3') down to all message and enum JSON descriptions.
         * @param {Object} msg The top-level JSON object
         */
        function propagateSyntax(syntax, msg) {
          msg['syntax'] = syntax;
          if (msg['messages']) {
              msg['messages'].forEach(function(msg) {
                  propagateSyntax(syntax, msg);
              });
          }
          if (msg['enums']) {
              msg['enums'].forEach(function(en) {
                  propagateSyntax(syntax, en);
              });
          }
        }

        /**
         * Constructs a new Builder.
         * @exports ProtoBuf.Builder
         * @class Provides the functionality to build protocol messages.
         * @param {Object.<string,*>=} options Options
         * @constructor
         */
        var Builder = function(options) {

            /**
             * Namespace.
             * @type {ProtoBuf.Reflect.Namespace}
             * @expose
             */
            this.ns = new Reflect.Namespace(this, null, ""); // Global namespace

            /**
             * Namespace pointer.
             * @type {ProtoBuf.Reflect.T}
             * @expose
             */
            this.ptr = this.ns;

            /**
             * Resolved flag.
             * @type {boolean}
             * @expose
             */
            this.resolved = false;

            /**
             * The current building result.
             * @type {Object.<string,ProtoBuf.Builder.Message|Object>|null}
             * @expose
             */
            this.result = null;

            /**
             * Imported files.
             * @type {Array.<string>}
             * @expose
             */
            this.files = {};

            /**
             * Import root override.
             * @type {?string}
             * @expose
             */
            this.importRoot = null;

            /**
             * Options.
             * @type {!Object.<string, *>}
             * @expose
             */
            this.options = options || {};
        };

        /**
         * @alias ProtoBuf.Builder.prototype
         * @inner
         */
        var BuilderPrototype = Builder.prototype;

        /**
         * Resets the pointer to the root namespace.
         * @expose
         */
        BuilderPrototype.reset = function() {
            this.ptr = this.ns;
        };

        /**
         * Defines a package on top of the current pointer position and places the pointer on it.
         * @param {string} pkg
         * @return {ProtoBuf.Builder} this
         * @throws {Error} If the package name is invalid
         * @expose
         */
        BuilderPrototype.define = function(pkg) {
            if (typeof pkg !== 'string' || !Lang.TYPEREF.test(pkg))
                throw Error("Illegal package: "+pkg);
            var part = pkg.split("."), i, ns;
            for (i=0; i<part.length; i++) // To be absolutely sure
                if (!Lang.NAME.test(part[i]))
                    throw Error("Illegal package: "+part[i]);
            for (i=0; i<part.length; i++) {
                ns = this.ptr.getChild(part[i]);
                if (ns === null) // Keep existing
                    this.ptr.addChild(ns = new Reflect.Namespace(this, this.ptr, part[i]));
                this.ptr = ns;
            }
            return this;
        };

        /**
         * Tests if a definition is a valid message definition.
         * @param {Object.<string,*>} def Definition
         * @return {boolean} true if valid, else false
         * @expose
         */
        Builder.isValidMessage = function(def) {
            // Messages require a string name
            if (typeof def["name"] !== 'string' || !Lang.NAME.test(def["name"]))
                return false;
            // Messages must not contain values (that'd be an enum) or methods (that'd be a service)
            if (typeof def["values"] !== 'undefined' || typeof def["rpc"] !== 'undefined')
                return false;
            // Fields, enums and messages are arrays if provided
            var i;
            if (typeof def["fields"] !== 'undefined') {
                if (!Array.isArray(def["fields"]))
                    return false;
                var ids = [], id; // IDs must be unique
                for (i=0; i<def["fields"].length; i++) {
                    if (!Builder.isValidMessageField(def["fields"][i]))
                        return false;
                    id = parseInt(def["fields"][i]["id"], 10);
                    if (ids.indexOf(id) >= 0)
                        return false;
                    ids.push(id);
                }
                ids = null;
            }
            if (typeof def["enums"] !== 'undefined') {
                if (!Array.isArray(def["enums"]))
                    return false;
                for (i=0; i<def["enums"].length; i++)
                    if (!Builder.isValidEnum(def["enums"][i]))
                        return false;
            }
            if (typeof def["messages"] !== 'undefined') {
                if (!Array.isArray(def["messages"]))
                    return false;
                for (i=0; i<def["messages"].length; i++)
                    if (!Builder.isValidMessage(def["messages"][i]) && !Builder.isValidExtend(def["messages"][i]))
                        return false;
            }
            if (typeof def["extensions"] !== 'undefined')
                if (!Array.isArray(def["extensions"]) || def["extensions"].length !== 2 || typeof def["extensions"][0] !== 'number' || typeof def["extensions"][1] !== 'number')
                    return false;

            if (def["syntax"] === 'proto3') {
                for (i=0; i<def["fields"].length; i++) {
                    var field = def["fields"][i];
                    // proto3 messages cannot contain required fields.
                    if (field["rule"] === "required")
                        return false;
                    // proto3 message fields cannot contain default values.
                    if (field["default"])
                        return false;
                    if (field["options"]) {
                        var optionKeys = Object.keys(field["options"]);
                        for (var j=0; j<optionKeys.length; j++) {
                            if (optionKeys[j] === "default") {
                                return false;
                            }
                        }
                    }
                }
                // proto3 messages cannot contain extensions.
                if (def["extensions"])
                    return false;
            }
            return true;
        };

        /**
         * Tests if a definition is a valid message field definition.
         * @param {Object} def Definition
         * @return {boolean} true if valid, else false
         * @expose
         */
        Builder.isValidMessageField = function(def) {
            // Message fields require a string rule, name and type and an id
            if (typeof def["rule"] !== 'string' || typeof def["name"] !== 'string' || typeof def["type"] !== 'string' || typeof def["id"] === 'undefined')
                return false;
            if (!Lang.RULE.test(def["rule"]) || !Lang.NAME.test(def["name"]) || !Lang.TYPEREF.test(def["type"]) || !Lang.ID.test(""+def["id"]))
                return false;
            if (typeof def["options"] !== 'undefined') {
                // Options are objects
                if (typeof def["options"] !== 'object')
                    return false;
                // Options are <string,string|number|boolean>
                var keys = Object.keys(def["options"]);
                for (var i=0, key; i<keys.length; i++)
                    if (typeof (key = keys[i]) !== 'string' || (typeof def["options"][key] !== 'string' && typeof def["options"][key] !== 'number' && typeof def["options"][key] !== 'boolean'))
                        return false;
            }
            return true;
        };

        /**
         * Tests if a definition is a valid enum definition.
         * @param {Object} def Definition
         * @return {boolean} true if valid, else false
         * @expose
         */
        Builder.isValidEnum = function(def) {
            // Enums require a string name
            if (typeof def["name"] !== 'string' || !Lang.NAME.test(def["name"]))
                return false;
            // Enums require at least one value
            if (typeof def["values"] === 'undefined' || !Array.isArray(def["values"]) || def["values"].length == 0)
                return false;
            for (var i=0; i<def["values"].length; i++) {
                // Values are objects
                if (typeof def["values"][i] != "object")
                    return false;
                // Values require a string name and an id
                if (typeof def["values"][i]["name"] !== 'string' || typeof def["values"][i]["id"] === 'undefined')
                    return false;
                if (!Lang.NAME.test(def["values"][i]["name"]) || !Lang.NEGID.test(""+def["values"][i]["id"]))
                    return false;
            }
            // If this is a proto3 enum, the default (first) value must be 0.
            if (def["syntax"] === 'proto3') {
                if (def["values"][0]["id"] !== 0) {
                    return false;
                }
            }
            // It's not important if there are other fields because ["values"] is already unique
            return true;
        };

        /**
         * Creates ths specified protocol types at the current pointer position.
         * @param {Array.<Object.<string,*>>} defs Messages, enums or services to create
         * @return {ProtoBuf.Builder} this
         * @throws {Error} If a message definition is invalid
         * @expose
         */
        BuilderPrototype.create = function(defs) {
            if (!defs)
                return this; // Nothing to create
            if (!Array.isArray(defs))
                defs = [defs];
            else {
                if (defs.length === 0)
                    return this;
                defs = defs.slice();
            }

            // It's quite hard to keep track of scopes and memory here, so let's do this iteratively.
            var stack = [];
            stack.push(defs); // One level [a, b, c]
            while (stack.length > 0) {
                defs = stack.pop();
                if (Array.isArray(defs)) { // Stack always contains entire namespaces
                    while (defs.length > 0) {
                        var def = defs.shift(); // Namespace always contains an array of messages, enums and services
                        if (Builder.isValidMessage(def)) {
                            var obj = new Reflect.Message(this, this.ptr, def["name"], def["options"], def["isGroup"], def["syntax"]);
                            // Create OneOfs
                            var oneofs = {};
                            if (def["oneofs"]) {
                                var keys = Object.keys(def["oneofs"]);
                                for (var i=0, k=keys.length; i<k; ++i)
                                    obj.addChild(oneofs[keys[i]] = new Reflect.Message.OneOf(this, obj, keys[i]));
                            }
                            // Create fields
                            if (def["fields"] && def["fields"].length > 0) {
                                for (i=0, k=def["fields"].length; i<k; ++i) { // i:k=Fields
                                    var fld = def['fields'][i];
                                    if (obj.getChild(fld['id']) !== null)
                                        throw Error("Duplicate field id in message "+obj.name+": "+fld['id']);
                                    if (fld["options"]) {
                                        var opts = Object.keys(fld["options"]);
                                        for (var j= 0,l=opts.length; j<l; ++j) { // j:l=Option names
                                            if (typeof opts[j] !== 'string')
                                                throw Error("Illegal field option name in message "+obj.name+"#"+fld["name"]+": "+opts[j]);
                                            if (typeof fld["options"][opts[j]] !== 'string' && typeof fld["options"][opts[j]] !== 'number' && typeof fld["options"][opts[j]] !== 'boolean')
                                                throw Error("Illegal field option value in message "+obj.name+"#"+fld["name"]+"#"+opts[j]+": "+fld["options"][opts[j]]);
                                        }
                                    }
                                    var oneof = null;
                                    if (typeof fld["oneof"] === 'string') {
                                        oneof = oneofs[fld["oneof"]];
                                        if (typeof oneof === 'undefined')
                                            throw Error("Illegal oneof in message "+obj.name+"#"+fld["name"]+": "+fld["oneof"]);
                                    }
                                    fld = new Reflect.Message.Field(this, obj, fld["rule"], fld["keytype"], fld["type"], fld["name"], fld["id"], fld["options"], oneof, def["syntax"]);
                                    if (oneof)
                                        oneof.fields.push(fld);
                                    obj.addChild(fld);
                                }
                            }
                            // Push enums, messages and services to stack
                            var subObj = [];
                            if (typeof def["enums"] !== 'undefined' && def['enums'].length > 0)
                                for (i=0; i<def["enums"].length; i++)
                                    subObj.push(def["enums"][i]);
                            if (def["messages"] && def["messages"].length > 0)
                                for (i=0; i<def["messages"].length; i++)
                                    subObj.push(def["messages"][i]);
                            if (def["services"] && def["services"].length > 0)
                                for (i=0; i<def["services"].length; i++)
                                    subObj.push(def["services"][i]);
                            // Set extension range
                            if (def["extensions"]) {
                                obj.extensions = def["extensions"];
                                if (obj.extensions[0] < ProtoBuf.ID_MIN)
                                    obj.extensions[0] = ProtoBuf.ID_MIN;
                                if (obj.extensions[1] > ProtoBuf.ID_MAX)
                                    obj.extensions[1] = ProtoBuf.ID_MAX;
                            }
                            this.ptr.addChild(obj); // Add to current namespace
                            if (subObj.length > 0) {
                                stack.push(defs); // Push the current level back
                                defs = subObj; // Continue processing sub level
                                subObj = null;
                                this.ptr = obj; // And move the pointer to this namespace
                                obj = null;
                                continue;
                            }
                            subObj = null;
                            obj = null;
                        } else if (Builder.isValidEnum(def)) {
                            obj = new Reflect.Enum(this, this.ptr, def["name"], def["options"], def["syntax"]);
                            for (i=0; i<def["values"].length; i++)
                                obj.addChild(new Reflect.Enum.Value(this, obj, def["values"][i]["name"], def["values"][i]["id"]));
                            this.ptr.addChild(obj);
                            obj = null;
                        } else if (Builder.isValidService(def)) {
                            obj = new Reflect.Service(this, this.ptr, def["name"], def["options"]);
                            for (i in def["rpc"])
                                if (def["rpc"].hasOwnProperty(i))
                                    obj.addChild(new Reflect.Service.RPCMethod(this, obj, i, def["rpc"][i]["request"], def["rpc"][i]["response"], !!def["rpc"][i]["request_stream"], !!def["rpc"][i]["response_stream"], def["rpc"][i]["options"]));
                            this.ptr.addChild(obj);
                            obj = null;
                        } else if (Builder.isValidExtend(def)) {
                            obj = this.ptr.resolve(def["ref"], true);
                            if (obj) {
                                for (i=0; i<def["fields"].length; i++) { // i=Fields
                                    if (obj.getChild(def['fields'][i]['id']) !== null)
                                        throw Error("Duplicate extended field id in message "+obj.name+": "+def['fields'][i]['id']);
                                    if (def['fields'][i]['id'] < obj.extensions[0] || def['fields'][i]['id'] > obj.extensions[1])
                                        throw Error("Illegal extended field id in message "+obj.name+": "+def['fields'][i]['id']+" ("+obj.extensions.join(' to ')+" expected)");
                                    // Convert extension field names to camel case notation if the override is set
                                    var name = def["fields"][i]["name"];
                                    if (this.options['convertFieldsToCamelCase'])
                                        name = ProtoBuf.Util.toCamelCase(def["fields"][i]["name"]);
                                    // see #161: Extensions use their fully qualified name as their runtime key and...
                                    fld = new Reflect.Message.ExtensionField(this, obj, def["fields"][i]["rule"], def["fields"][i]["type"], this.ptr.fqn()+'.'+name, def["fields"][i]["id"], def["fields"][i]["options"]);
                                    // ...are added on top of the current namespace as an extension which is used for
                                    // resolving their type later on (the extension always keeps the original name to
                                    // prevent naming collisions)
                                    var ext = new Reflect.Extension(this, this.ptr, def["fields"][i]["name"], fld);
                                    fld.extension = ext;
                                    this.ptr.addChild(ext);
                                    obj.addChild(fld);
                                }
                            } else if (!/\.?google\.protobuf\./.test(def["ref"])) // Silently skip internal extensions
                                throw Error("Extended message "+def["ref"]+" is not defined");
                        } else
                            throw Error("Not a valid definition: "+JSON.stringify(def));
                        def = null;
                    }
                    // Break goes here
                } else
                    throw Error("Not a valid namespace: "+JSON.stringify(defs));
                defs = null;
                this.ptr = this.ptr.parent; // This namespace is s done
            }
            this.resolved = false; // Require re-resolve
            this.result = null; // Require re-build
            return this;
        };

        /**
         * Imports another definition into this builder.
         * @param {Object.<string,*>} json Parsed import
         * @param {(string|{root: string, file: string})=} filename Imported file name
         * @return {ProtoBuf.Builder} this
         * @throws {Error} If the definition or file cannot be imported
         * @expose
         */
        BuilderPrototype["import"] = function(json, filename) {
            if (typeof filename === 'string') {
                if (ProtoBuf.Util.IS_NODE)
                    filename = require("path")['resolve'](filename);
                if (this.files[filename] === true) {
                    this.reset();
                    return this; // Skip duplicate imports
                }
                this.files[filename] = true;
            } else if (typeof filename === 'object') { // Assume object with root, filename.
                var root = filename.root
                if (ProtoBuf.Util.IS_NODE)
                    root = require("path")['resolve'](root);
                var fname = [root, filename.file].join('/');
                if (this.files[fname] === true) {
                  this.reset();
                  return this; // Skip duplicate imports
                }
                this.files[fname] = true;
            }
            if (!!json['imports'] && json['imports'].length > 0) {
                var importRoot, delim = '/', resetRoot = false;
                if (typeof filename === 'object') { // If an import root is specified, override
                    this.importRoot = filename["root"]; resetRoot = true; // ... and reset afterwards
                    importRoot = this.importRoot;
                    filename = filename["file"];
                    if (importRoot.indexOf("\\") >= 0 || filename.indexOf("\\") >= 0) delim = '\\';
                } else if (typeof filename === 'string') {
                    if (this.importRoot) // If import root is overridden, use it
                        importRoot = this.importRoot;
                    else { // Otherwise compute from filename
                        if (filename.indexOf("/") >= 0) { // Unix
                            importRoot = filename.replace(/\/[^\/]*$/, "");
                            if (/* /file.proto */ importRoot === "")
                                importRoot = "/";
                        } else if (filename.indexOf("\\") >= 0) { // Windows
                            importRoot = filename.replace(/\\[^\\]*$/, "");
                            delim = '\\';
                        } else
                            importRoot = ".";
                    }
                } else
                    importRoot = null;

                for (var i=0; i<json['imports'].length; i++) {
                    if (typeof json['imports'][i] === 'string') { // Import file
                        if (!importRoot)
                            throw Error("Cannot determine import root: File name is unknown");
                        var importFilename = json['imports'][i];
                        if (importFilename === "google/protobuf/descriptor.proto")
                            continue; // Not needed and therefore not used
                        importFilename = importRoot + delim + importFilename;
                        if (this.files[importFilename] === true)
                            continue; // Already imported
                        if (/\.proto$/i.test(importFilename) && !ProtoBuf.DotProto)       // If this is a light build
                            importFilename = importFilename.replace(/\.proto$/, ".json"); // always load the JSON file
                        var contents = ProtoBuf.Util.fetch(importFilename);
                        if (contents === null)
                            throw Error("Failed to import '"+importFilename+"' in '"+filename+"': File not found");
                        if (/\.json$/i.test(importFilename)) // Always possible
                            this["import"](JSON.parse(contents+""), importFilename); // May throw
                        else
                            this["import"]((new ProtoBuf.DotProto.Parser(contents+"")).parse(), importFilename); // May throw
                    } else // Import structure
                        if (!filename)
                            this["import"](json['imports'][i]);
                        else if (/\.(\w+)$/.test(filename)) // With extension: Append _importN to the name portion to make it unique
                            this["import"](json['imports'][i], filename.replace(/^(.+)\.(\w+)$/, function($0, $1, $2) { return $1+"_import"+i+"."+$2; }));
                        else // Without extension: Append _importN to make it unique
                            this["import"](json['imports'][i], filename+"_import"+i);
                }
                if (resetRoot) // Reset import root override when all imports are done
                    this.importRoot = null;
            }
            if (json['package'])
                this.define(json['package']);
            if (json['syntax']) {
                // Propagate syntax to all submessages and subenums
                propagateSyntax(json['syntax'], json);
            }
            var base = this.ptr;
            if (json['options'])
                Object.keys(json['options']).forEach(function(key) {
                    base.options[key] = json['options'][key];
                });
            if (json['messages'])
                this.create(json['messages']),
                this.ptr = base;
            if (json['enums'])
                this.create(json['enums']),
                this.ptr = base;
            if (json['services'])
                this.create(json['services']),
                this.ptr = base;
            if (json['extends'])
                this.create(json['extends']);
            this.reset();
            return this;
        };

        /**
         * Tests if a definition is a valid service definition.
         * @param {Object} def Definition
         * @return {boolean} true if valid, else false
         * @expose
         */
        Builder.isValidService = function(def) {
            // Services require a string name and an rpc object
            return !(typeof def["name"] !== 'string' || !Lang.NAME.test(def["name"]) || typeof def["rpc"] !== 'object');
        };

        /**
         * Tests if a definition is a valid extension.
         * @param {Object} def Definition
         * @returns {boolean} true if valid, else false
         * @expose
        */
        Builder.isValidExtend = function(def) {
            if (typeof def["ref"] !== 'string' || !Lang.TYPEREF.test(def["ref"]))
                return false;
            var i;
            if (typeof def["fields"] !== 'undefined') {
                if (!Array.isArray(def["fields"]))
                    return false;
                var ids = [], id; // IDs must be unique (does not yet test for the extended message's ids)
                for (i=0; i<def["fields"].length; i++) {
                    if (!Builder.isValidMessageField(def["fields"][i]))
                        return false;
                    id = parseInt(def["id"], 10);
                    if (ids.indexOf(id) >= 0)
                        return false;
                    ids.push(id);
                }
                ids = null;
            }
            return true;
        };

        /**
         * Resolves all namespace objects.
         * @throws {Error} If a type cannot be resolved
         * @expose
         */
        BuilderPrototype.resolveAll = function() {
            // Resolve all reflected objects
            var res;
            if (this.ptr == null || typeof this.ptr.type === 'object')
                return; // Done (already resolved)
            if (this.ptr instanceof Reflect.Namespace) {
                // Build all children
                var children = this.ptr.children;
                for (var i= 0, k=children.length; i<k; ++i)
                    this.ptr = children[i],
                    this.resolveAll();
            } else if (this.ptr instanceof Reflect.Message.Field) {
                if (!Lang.TYPE.test(this.ptr.type)) { // Resolve type...
                    if (!Lang.TYPEREF.test(this.ptr.type))
                        throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                    res = (this.ptr instanceof Reflect.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true);
                    if (!res)
                        throw Error("Unresolvable type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                    this.ptr.resolvedType = res;
                    if (res instanceof Reflect.Enum) {
                        this.ptr.type = ProtoBuf.TYPES["enum"];
                        if (this.ptr.syntax === 'proto3' && res.syntax !== 'proto3')
                            throw Error("Proto3 message refers to proto2 enum; " +
                                        "this is not allowed due to differing " +
                                        "enum semantics in proto3");
                    }
                    else if (res instanceof Reflect.Message)
                        this.ptr.type = res.isGroup ? ProtoBuf.TYPES["group"] : ProtoBuf.TYPES["message"];
                    else
                        throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                } else
                    this.ptr.type = ProtoBuf.TYPES[this.ptr.type];

                // If it's a map field, also resolve the key type. The key type can
                // be only a numeric, string, or bool type (i.e., no enums or
                // messages), so we don't need to resolve against the current
                // namespace.
                if (this.ptr.map) {
                    if (!Lang.TYPE.test(this.ptr.keyType))
                        throw Error("Illegal key type for map field in "+this.ptr.toString(true)+": "+this.ptr.type);
                    this.ptr.keyType = ProtoBuf.TYPES[this.ptr.keyType];
                }
            } else if (this.ptr instanceof ProtoBuf.Reflect.Enum.Value) {
                // No need to build enum values (built in enum)
            } else if (this.ptr instanceof ProtoBuf.Reflect.Service.Method) {
                if (this.ptr instanceof ProtoBuf.Reflect.Service.RPCMethod) {
                    res = this.ptr.parent.resolve(this.ptr.requestName, true);
                    if (!res || !(res instanceof ProtoBuf.Reflect.Message))
                        throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.requestName);
                    this.ptr.resolvedRequestType = res;
                    res = this.ptr.parent.resolve(this.ptr.responseName, true);
                    if (!res || !(res instanceof ProtoBuf.Reflect.Message))
                        throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.responseName);
                    this.ptr.resolvedResponseType = res;
                } else {
                    // Should not happen as nothing else is implemented
                    throw Error("Illegal service type in "+this.ptr.toString(true));
                }
            } else if (!(this.ptr instanceof ProtoBuf.Reflect.Message.OneOf) && !(this.ptr instanceof ProtoBuf.Reflect.Extension))
                throw Error("Illegal object in namespace: "+typeof(this.ptr)+":"+this.ptr);
            this.reset();
        };

        /**
         * Builds the protocol. This will first try to resolve all definitions and, if this has been successful,
         * return the built package.
         * @param {(string|Array.<string>)=} path Specifies what to return. If omitted, the entire namespace will be returned.
         * @return {ProtoBuf.Builder.Message|Object.<string,*>}
         * @throws {Error} If a type could not be resolved
         * @expose
         */
        BuilderPrototype.build = function(path) {
            this.reset();
            if (!this.resolved)
                this.resolveAll(),
                this.resolved = true,
                this.result = null; // Require re-build
            if (this.result === null) // (Re-)Build
                this.result = this.ns.build();
            if (!path)
                return this.result;
            else {
                var part = typeof path === 'string' ? path.split(".") : path,
                    ptr = this.result; // Build namespace pointer (no hasChild etc.)
                for (var i=0; i<part.length; i++)
                    if (ptr[part[i]])
                        ptr = ptr[part[i]];
                    else {
                        ptr = null;
                        break;
                    }
                return ptr;
            }
        };

        /**
         * Similar to {@link ProtoBuf.Builder#build}, but looks up the internal reflection descriptor.
         * @param {string=} path Specifies what to return. If omitted, the entire namespace wiil be returned.
         * @param {boolean=} excludeNonNamespace Excludes non-namespace types like fields, defaults to `false`
         * @return {ProtoBuf.Reflect.T} Reflection descriptor or `null` if not found
         */
        BuilderPrototype.lookup = function(path, excludeNonNamespace) {
            return path ? this.ns.resolve(path, excludeNonNamespace) : this.ns;
        };

        /**
         * Returns a string representation of this object.
         * @return {string} String representation as of "Builder"
         * @expose
         */
        BuilderPrototype.toString = function() {
            return "Builder";
        };

        // Pseudo types documented in Reflect.js.
        // Exist for the sole purpose of being able to "... instanceof ProtoBuf.Builder.Message" etc.
        Builder.Message = function() {};
        Builder.Service = function() {};

        return Builder;

    })(ProtoBuf, ProtoBuf.Lang, ProtoBuf.Reflect);

    /**
     * @alias ProtoBuf.Map
     * @expose
     */
    ProtoBuf.Map = (function(ProtoBuf, Reflect) {
        "use strict";

        /**
         * Constructs a new Map. A Map is a container that is used to implement map
         * fields on message objects. It closely follows the ES6 Map API; however,
         * it is distinct because we do not want to depend on external polyfills or
         * on ES6 itself.
         *
         * @exports ProtoBuf.Map
         * @param {!ProtoBuf.Reflect.Field} field Map field
         * @param {Object.<string,*>=} contents Initial contents
         * @constructor
         */
        var Map = function(field, contents) {
            if (!field.map)
                throw Error("field is not a map");

            /**
             * The field corresponding to this map.
             * @type {!ProtoBuf.Reflect.Field}
             */
            this.field = field;

            /**
             * Element instance corresponding to key type.
             * @type {!ProtoBuf.Reflect.Element}
             */
            this.keyElem = new Reflect.Element(field.keyType, null, true, field.syntax);

            /**
             * Element instance corresponding to value type.
             * @type {!ProtoBuf.Reflect.Element}
             */
            this.valueElem = new Reflect.Element(field.type, field.resolvedType, false, field.syntax);

            /**
             * Internal map: stores mapping of (string form of key) -> (key, value)
             * pair.
             *
             * We provide map semantics for arbitrary key types, but we build on top
             * of an Object, which has only string keys. In order to avoid the need
             * to convert a string key back to its native type in many situations,
             * we store the native key value alongside the value. Thus, we only need
             * a one-way mapping from a key type to its string form that guarantees
             * uniqueness and equality (i.e., str(K1) === str(K2) if and only if K1
             * === K2).
             *
             * @type {!Object<string, {key: *, value: *}>}
             */
            this.map = {};

            /**
             * Returns the number of elements in the map.
             */
            Object.defineProperty(this, "size", {
                get: function() { return Object.keys(this.map).length; }
            });

            // Fill initial contents from a raw object.
            if (contents) {
                var keys = Object.keys(contents);
                for (var i = 0; i < keys.length; i++) {
                    var key = this.keyElem.valueFromString(keys[i]);
                    var val = this.valueElem.verifyValue(contents[keys[i]]);
                    this.map[this.keyElem.valueToString(key)] =
                        { key: key, value: val };
                }
            }
        };

        var MapPrototype = Map.prototype;

        /**
         * Helper: return an iterator over an array.
         * @param {!Array<*>} arr the array
         * @returns {!Object} an iterator
         * @inner
         */
        function arrayIterator(arr) {
            var idx = 0;
            return {
                next: function() {
                    if (idx < arr.length)
                        return { done: false, value: arr[idx++] };
                    return { done: true };
                }
            }
        }

        /**
         * Clears the map.
         */
        MapPrototype.clear = function() {
            this.map = {};
        };

        /**
         * Deletes a particular key from the map.
         * @returns {boolean} Whether any entry with this key was deleted.
         */
        MapPrototype["delete"] = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            var hadKey = keyValue in this.map;
            delete this.map[keyValue];
            return hadKey;
        };

        /**
         * Returns an iterator over [key, value] pairs in the map.
         * @returns {Object} The iterator
         */
        MapPrototype.entries = function() {
            var entries = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0, entry; i < strKeys.length; i++)
                entries.push([(entry=this.map[strKeys[i]]).key, entry.value]);
            return arrayIterator(entries);
        };

        /**
         * Returns an iterator over keys in the map.
         * @returns {Object} The iterator
         */
        MapPrototype.keys = function() {
            var keys = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0; i < strKeys.length; i++)
                keys.push(this.map[strKeys[i]].key);
            return arrayIterator(keys);
        };

        /**
         * Returns an iterator over values in the map.
         * @returns {!Object} The iterator
         */
        MapPrototype.values = function() {
            var values = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0; i < strKeys.length; i++)
                values.push(this.map[strKeys[i]].value);
            return arrayIterator(values);
        };

        /**
         * Iterates over entries in the map, calling a function on each.
         * @param {function(this:*, *, *, *)} cb The callback to invoke with value, key, and map arguments.
         * @param {Object=} thisArg The `this` value for the callback
         */
        MapPrototype.forEach = function(cb, thisArg) {
            var strKeys = Object.keys(this.map);
            for (var i = 0, entry; i < strKeys.length; i++)
                cb.call(thisArg, (entry=this.map[strKeys[i]]).value, entry.key, this);
        };

        /**
         * Sets a key in the map to the given value.
         * @param {*} key The key
         * @param {*} value The value
         * @returns {!ProtoBuf.Map} The map instance
         */
        MapPrototype.set = function(key, value) {
            var keyValue = this.keyElem.verifyValue(key);
            var valValue = this.valueElem.verifyValue(value);
            this.map[this.keyElem.valueToString(keyValue)] =
                { key: keyValue, value: valValue };
            return this;
        };

        /**
         * Gets the value corresponding to a key in the map.
         * @param {*} key The key
         * @returns {*|undefined} The value, or `undefined` if key not present
         */
        MapPrototype.get = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            if (!(keyValue in this.map))
                return undefined;
            return this.map[keyValue].value;
        };

        /**
         * Determines whether the given key is present in the map.
         * @param {*} key The key
         * @returns {boolean} `true` if the key is present
         */
        MapPrototype.has = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            return (keyValue in this.map);
        };

        return Map;
    })(ProtoBuf, ProtoBuf.Reflect);


    /**
     * Loads a .proto string and returns the Builder.
     * @param {string} proto .proto file contents
     * @param {(ProtoBuf.Builder|string|{root: string, file: string})=} builder Builder to append to. Will create a new one if omitted.
     * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
     * @return {ProtoBuf.Builder} Builder to create new messages
     * @throws {Error} If the definition cannot be parsed or built
     * @expose
     */
    ProtoBuf.loadProto = function(proto, builder, filename) {
        if (typeof builder === 'string' || (builder && typeof builder["file"] === 'string' && typeof builder["root"] === 'string'))
            filename = builder,
            builder = undefined;
        return ProtoBuf.loadJson((new ProtoBuf.DotProto.Parser(proto)).parse(), builder, filename);
    };

    /**
     * Loads a .proto string and returns the Builder. This is an alias of {@link ProtoBuf.loadProto}.
     * @function
     * @param {string} proto .proto file contents
     * @param {(ProtoBuf.Builder|string)=} builder Builder to append to. Will create a new one if omitted.
     * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
     * @return {ProtoBuf.Builder} Builder to create new messages
     * @throws {Error} If the definition cannot be parsed or built
     * @expose
     */
    ProtoBuf.protoFromString = ProtoBuf.loadProto; // Legacy

    /**
     * Loads a .proto file and returns the Builder.
     * @param {string|{root: string, file: string}} filename Path to proto file or an object specifying 'file' with
     *  an overridden 'root' path for all imported files.
     * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
     *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
     *  file will be read synchronously and this function will return the Builder.
     * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
     * @return {?ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
     *   request has failed), else undefined
     * @expose
     */
    ProtoBuf.loadProtoFile = function(filename, callback, builder) {
        if (callback && typeof callback === 'object')
            builder = callback,
            callback = null;
        else if (!callback || typeof callback !== 'function')
            callback = null;
        if (callback)
            return ProtoBuf.Util.fetch(typeof filename === 'string' ? filename : filename["root"]+"/"+filename["file"], function(contents) {
                if (contents === null) {
                    callback(Error("Failed to fetch file"));
                    return;
                }
                try {
                    callback(null, ProtoBuf.loadProto(contents, builder, filename));
                } catch (e) {
                    callback(e);
                }
            });
        var contents = ProtoBuf.Util.fetch(typeof filename === 'object' ? filename["root"]+"/"+filename["file"] : filename);
        return contents === null ? null : ProtoBuf.loadProto(contents, builder, filename);
    };

    /**
     * Loads a .proto file and returns the Builder. This is an alias of {@link ProtoBuf.loadProtoFile}.
     * @function
     * @param {string|{root: string, file: string}} filename Path to proto file or an object specifying 'file' with
     *  an overridden 'root' path for all imported files.
     * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
     *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
     *  file will be read synchronously and this function will return the Builder.
     * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
     * @return {!ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
     *   request has failed), else undefined
     * @expose
     */
    ProtoBuf.protoFromFile = ProtoBuf.loadProtoFile; // Legacy


    /**
     * Constructs a new empty Builder.
     * @param {Object.<string,*>=} options Builder options, defaults to global options set on ProtoBuf
     * @return {!ProtoBuf.Builder} Builder
     * @expose
     */
    ProtoBuf.newBuilder = function(options) {
        options = options || {};
        if (typeof options['convertFieldsToCamelCase'] === 'undefined')
            options['convertFieldsToCamelCase'] = ProtoBuf.convertFieldsToCamelCase;
        if (typeof options['populateAccessors'] === 'undefined')
            options['populateAccessors'] = ProtoBuf.populateAccessors;
        return new ProtoBuf.Builder(options);
    };

    /**
     * Loads a .json definition and returns the Builder.
     * @param {!*|string} json JSON definition
     * @param {(ProtoBuf.Builder|string|{root: string, file: string})=} builder Builder to append to. Will create a new one if omitted.
     * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
     * @return {ProtoBuf.Builder} Builder to create new messages
     * @throws {Error} If the definition cannot be parsed or built
     * @expose
     */
    ProtoBuf.loadJson = function(json, builder, filename) {
        if (typeof builder === 'string' || (builder && typeof builder["file"] === 'string' && typeof builder["root"] === 'string'))
            filename = builder,
            builder = null;
        if (!builder || typeof builder !== 'object')
            builder = ProtoBuf.newBuilder();
        if (typeof json === 'string')
            json = JSON.parse(json);
        builder["import"](json, filename);
        builder.resolveAll();
        return builder;
    };

    /**
     * Loads a .json file and returns the Builder.
     * @param {string|!{root: string, file: string}} filename Path to json file or an object specifying 'file' with
     *  an overridden 'root' path for all imported files.
     * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
     *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
     *  file will be read synchronously and this function will return the Builder.
     * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
     * @return {?ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
     *   request has failed), else undefined
     * @expose
     */
    ProtoBuf.loadJsonFile = function(filename, callback, builder) {
        if (callback && typeof callback === 'object')
            builder = callback,
            callback = null;
        else if (!callback || typeof callback !== 'function')
            callback = null;
        if (callback)
            return ProtoBuf.Util.fetch(typeof filename === 'string' ? filename : filename["root"]+"/"+filename["file"], function(contents) {
                if (contents === null) {
                    callback(Error("Failed to fetch file"));
                    return;
                }
                try {
                    callback(null, ProtoBuf.loadJson(JSON.parse(contents), builder, filename));
                } catch (e) {
                    callback(e);
                }
            });
        var contents = ProtoBuf.Util.fetch(typeof filename === 'object' ? filename["root"]+"/"+filename["file"] : filename);
        return contents === null ? null : ProtoBuf.loadJson(JSON.parse(contents), builder, filename);
    };

    return ProtoBuf;
});

}).call(this,require('_process'))
},{"_process":12,"bytebuffer":32,"fs":6,"path":11}],35:[function(require,module,exports){
/**
 * A pure JS implementation of Snappy decompression, for use in the browser
 **/
var ByteBuffer = require('bytebuffer');
module.exports = {
    uncompressSync: function(buf) {
        var input = ByteBuffer.wrap(buf);
        var size = input.readVarint32();
        var output = new ByteBuffer(size);
        output.offset = 0;
        output.length = size;
        input.littleEndian = true;
        var copy = function(output, length, offset) {
            var ptr = output.offset - offset;
            for (var i = 0; i < length; ++i) {
                output.writeByte(output.readByte(ptr + i));
            }
        };
        while (input.remaining()) {
            var tag = input.readUint8();
            switch (tag & 3) {
                case 0:
                    var length = (tag >> 2) + 1;
                    if (length >= 61) {
                        var bytes = length - 60;
                        length = 0;
                        for (var i = 0; i < bytes; ++i) {
                            length |= input.readUint8() << (8 * i);
                        }
                        length++;
                    }
                    for (var i = 0; i < length; ++i) {
                        output.writeByte(input.readByte());
                    }
                    break;
                case 1:
                    var length = ((tag >> 2) & 7) + 4;
                    var offset = ((tag >> 5) << 8) | input.readUint8();
                    copy(output, length, offset);
                    break;
                case 2:
                    var length = (tag >> 2) + 1;
                    var offset = input.readUint16();
                    copy(output, length, offset);
                    break;
                case 3:
                    var length = (tag >> 2) + 1;
                    var offset = input.readUint32();
                    copy(output, length, offset);
                    break;
            };
        }
        output.offset = 0;
        return output.toBuffer();
    }
};
},{"bytebuffer":32}]},{},[2]);
